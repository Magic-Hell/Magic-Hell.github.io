<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式</title>
      <link href="/2023/09/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1. 单例模式"></a>1. 单例模式</h2><ul><li><p>模式定义</p><p>保证一个类只有一个实例，并且提供一个全局访问点</p></li><li><p>场景：</p><p>重量级对象，不需要多个实例，如线程池，数据库连接池</p><img src="/2023/09/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-11%20081538.png" class="" title="屏幕截图 2023-09-11 081538.png"></li></ul><ol><li><p>懒汉模式：延迟加载，只有在真正使用的时候才开始实例化</p><ul><li>线程安全问题</li><li>double check 加锁优化</li><li>编译器（JIT），CPU有可能对指令进行重排序，导致使用到尚未初始化的实例，可以通过添加volatile关键字进行修饰，对于Volatile修饰的字段，可以防止指令重排。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.magichell.Lazysingleton;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingletonText</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LazySingleton</span> <span class="variable">instance1</span> <span class="operator">=</span> LazySingleton.getInstance();</span><br><span class="line">        <span class="type">LazySingleton</span> <span class="variable">instance2</span> <span class="operator">=</span> LazySingleton.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果true</strong></p><p>在多线程中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.magichell.Lazysingleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingletonText</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>( ()-&gt; &#123;</span><br><span class="line">            <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                instance = LazySingleton.getInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(instance);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>( ()-&gt; &#123;</span><br><span class="line">            <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                instance = LazySingleton.getInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(instance);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.magichell.Lazysingleton.LazySingleton@1894a1d6</span><br><span class="line">com.magichell.Lazysingleton.LazySingleton@737ab110</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>如果添加上synchronized（加锁）则会解决多线程的单例问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="2. 工厂模式"></a>2. 工厂模式</h2><h2 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3. 抽象工厂模式"></a>3. 抽象工厂模式</h2><h2 id="4-建造者模式"><a href="#4-建造者模式" class="headerlink" title="4. 建造者模式"></a>4. 建造者模式</h2><h2 id="5-原型模式"><a href="#5-原型模式" class="headerlink" title="5. 原型模式"></a>5. 原型模式</h2><h2 id="6-享元模式"><a href="#6-享元模式" class="headerlink" title="6. 享元模式"></a>6. 享元模式</h2><h2 id="7-门面模式"><a href="#7-门面模式" class="headerlink" title="7. 门面模式"></a>7. 门面模式</h2><h2 id="8-适配器模式"><a href="#8-适配器模式" class="headerlink" title="8. 适配器模式"></a>8. 适配器模式</h2><h2 id="9-装饰器模式"><a href="#9-装饰器模式" class="headerlink" title="9. 装饰器模式"></a>9. 装饰器模式</h2><h2 id="10-策略模式"><a href="#10-策略模式" class="headerlink" title="10. 策略模式"></a>10. 策略模式</h2><h2 id="11-模板方法模式"><a href="#11-模板方法模式" class="headerlink" title="11. 模板方法模式"></a>11. 模板方法模式</h2><h2 id="12-观察者模式"><a href="#12-观察者模式" class="headerlink" title="12. 观察者模式"></a>12. 观察者模式</h2><h2 id="13-责任链模式"><a href="#13-责任链模式" class="headerlink" title="13. 责任链模式"></a>13. 责任链模式</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
            <tag> 工厂模式 </tag>
            
            <tag> 抽象工厂模式 </tag>
            
            <tag> 建造者模式 </tag>
            
            <tag> 原型模式 </tag>
            
            <tag> 享元模式 </tag>
            
            <tag> 门面模式 </tag>
            
            <tag> 适配器模式 </tag>
            
            <tag> 装饰器模式 </tag>
            
            <tag> 策略模式 </tag>
            
            <tag> 模板方法模式 </tag>
            
            <tag> 观察者模式 </tag>
            
            <tag> 责任链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图灵第五期笔记</title>
      <link href="/2023/09/07/%E5%9B%BE%E7%81%B5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/07/%E5%9B%BE%E7%81%B5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring底层核心原理解析"><a href="#1-Spring底层核心原理解析" class="headerlink" title="1. Spring底层核心原理解析"></a>1. Spring底层核心原理解析</h1><ol><li><p>bean的创建生命周期</p><ul><li>UserService.class—&gt;无参构造方法（推断构造方法）—-&gt;普通对象—&gt;依赖注入（属性赋值）—-&gt;初始化前(@PostConstruct)—&gt; 初始化（IniializingBean）—&gt;初始化后（Aop）—&gt;代理对象—-&gt;Bean <ul><li>注：instance of IniializingBean  可以判断此方法是否被调用</li><li>Spring会先去寻找无参构造方法，如果找到则调用，再去寻找有参构造方法（如果为一个则调用，如果为多个，则报错）</li></ul></li></ul></li><li><p>入门使用Spring的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.test();</span><br></pre></td></tr></table></figure><ul><li>第一行代码，会构造一个ClassPathXmlApplicationContext对象。</li><li>第二行代码，会调用ClassPathXmlApplicationContext的getBean方法，会得到一个UserService对象。</li><li>第三行代码，就是简单的调用UserService的test()方法。</li></ul><p>注：在新版的Spring MVC和Spring Boot的底层主要用的都是AnnotationConfigApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line"><span class="comment">//ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.test();</span><br></pre></td></tr></table></figure><blockquote><p>可以看到AnnotationConfigApplicationContext的用法和ClassPathXmlApplicationContext是非常类似的，只不过需要传入的是一个class，而不是一个xml文件。</p></blockquote><p>注：而AppConfig.class和spring.xml一样，表示Spring的配置，比如可以指定扫描路径，可以直接定义Bean，比如：</p><p>spring.xml中的内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.magichell&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.magichell.service.UserService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>AppConfig中的内容为：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.magichell&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserService <span class="title function_">userService</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以spring.xml和AppConfig.class本质上是一样的。</p><p>目前，我们基本很少直接使用上面这种方式来用Spring，而是使用Spring MVC，或者Spring Boot，但是它们都是基于上面这种方式的，都需要在内部去创建一个ApplicationContext的，只不过：</p><ol><li>Spring MVC创建的是XmlWebApplicationContext，和ClassPathXmlApplicationContext类似，都是基于XML配置的</li><li>Spring Boot创建的是AnnotationConfigApplicationContext</li></ol></li><li><p>Spring中是如何创建一个对象</p><ol><li><p>其实不管是AnnotationConfigApplicationContext还是</p><p>ClassPathXmlApplicationContext，目前，我们都可以简单的将它们理解为就是用来创建Java对象的</p><ul><li><p>在Java语言中，肯定是根据某个类来创建一个对象的。我们在看一下实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.test();</span><br></pre></td></tr></table></figure><ul><li><p>当我们调用context.getBean(“userService”)时，就会去创建一个对象，但是getBean方法内部怎么知道”userService”对应的是UserService类呢？</p><p>所以，我们就可以分析出来，在调用AnnotationConfigApplicationContext的构造方法时，也就是第一行代码，会去做一些事情：</p><ol><li>解析AppConfig.class，得到扫描路径</li><li>Service等注解，那么Spring就把这个类记录下来，存在一个Map中，比如Map&lt;String, Class&gt;。（实际上，Spring源码中确实存在类似的这么一个Map，叫做BeanDefinitionMap）</li><li>Spring会根据某个规则生成当前类对应的beanName，作为key存入Map，当前类作为value</li><li>这样，但调用context.getBean(“userService”)时，就可以跟据”userService”找到UserService类，从而就可以去创建对象了。</li></ol></li></ul></li></ul></li></ol></li><li><p>Bean的创建过程</p><ul><li>Spring到底是如何来创建一个Bean的呢，这个就是Bean创建的生命周期，大致过程如下<ol><li>利用该类的构造方法来实例化得到一个对象（但是如何一个类中有多个构造方法，Spring则会进行选择，这个叫做推断构造方法）</li><li>得到一个对象后，Spring会判断该对象中是否存在被@Autowired注解了的属性，把这些属性找出来并由Spring进行赋值（依赖注入）</li><li>依赖注入后，Spring会判断该对象是否实现了BeanNameAware接口、BeanClassLoaderAware接口、BeanFactoryAware接口，如果实现了，就表示当前对象必须实现该接口中所定义的setBeanName()、setBeanClassLoader()、setBeanFactory()方法，那Spring就会调用这些方法并传入相应的参数（Aware回调）</li><li>Aware回调后，Spring会判断该对象中是否存在某个方法被@PostConstruct注解了，如果存在，Spring会调用当前对象的此方法（初始化前）</li><li>紧接着，Spring会判断该对象是否实现了InitializingBean接口，如果实现了，就表示当前对象必须实现该接口中的afterPropertiesSet()方法，那Spring就会调用当前对象中的afterPropertiesSet()方法（初始化）</li><li>最后，Spring会判断当前对象需不需要进行AOP，如果不需要那么Bean就创建完了，如果需要进行AOP，则会进行动态代理并生成一个代理对象做为Bean（初始化后）</li></ol></li><li>通过最后一步，我们可以发现，当Spring根据UserService类来创建一个Bean时：<ol><li>如果不用进行AOP，那么Bean就是UserService类的构造方法所得到的对象。</li><li>如果需要进行AOP，那么Bean就是UserService的代理类所实例化得到的对象，而不是UserService本身所得到的对象。</li></ol></li><li>Bean对象创建出来后：<ol><li>如果当前Bean是单例Bean，那么会把该Bean对象存入一个Map&lt;String,Object&gt;，Map的key为beanName，value为Bean对象。这样下次getBean时就可以直接从Map中拿到对应的Bean对象了。（实际上，在Spring源码中，这个Map就是单例池）</li><li>如果当前Bean是原型Bean，那么后续没有其他动作，不会存入一个Map，下次getBean时会再次执行上述创建过程，得到一个新的Bean对象</li></ol></li></ul></li><li><p>推断构造方法</p><ul><li>Spring在基于某个类生成Bean的过程中，需要利用该类的构造方法来实例化得到一个对象，但是如果一个类存在多个构造方法，Spring会使用哪个呢？<ul><li>Spring的判断逻辑如下：<ol><li>如果一个类只存在一个构造方法，不管该构造方法是无参构造方法，还是有参构造方法，Spring都会用这个构造方法</li><li>如果一个类存在多个构造方法</li><li>这些构造方法中，存在一个无参的构造方法，那么Spring就会用这个无参的构造方法</li><li>这些构造方法中，不存在一个无参的构造方法，那么Spring就会报错</li></ol></li><li>Spring的设计思想是这样的：<ol><li>如果一个类只有一个构造方法，那么没得选择，只能用这个构造方法</li><li>如果一个类存在多个构造方法，Spring不知道如何选择，就会看是否有无参的构造方法，因为无参构造方法本身表示了一种默认的意义</li><li>不过如果某个构造方法上加了@Autowired注解，那就表示程序员告诉Spring就用这个加了注解的方法，那Spring就会用这个加了@Autowired注解构造方法了</li></ol></li><li>需要重视的是，如果Spring选择了一个有参的构造方法，Spring在调用这个有参构造方法时，需要传入参数，那这个参数是怎么来的呢？<ul><li>Spring会根据入参的类型和入参的名字去Spring中找Bean对象（以单例Bean为例，Spring会从单例池那个Map中去找）：<ol><li>先根据入参类型找，如果只找到一个，那就直接用来作为入参</li><li>如果根据类型找到多个，则再根据入参名字来确定唯一一个</li><li>最终如果没有找到，则会报错，无法创建当前Bean对象</li></ol></li></ul></li></ul></li></ul><p>注：<strong>确定用哪个构造方法，确定入参的Bean对象，这个过程就叫做推断构造方法。</strong></p></li><li><p>Spring事务</p><p>当我们在某个方法上加了@Transactional注解后，就表示该方法在调用时会开启Spring事</p><p>务，而这个方法所在的类所对应的Bean对象会是该类的代理对象。</p><p>Spring事务的代理对象执行某个方法时的步骤：</p><p>​1. 判断当前执行的方法是否存在@Transactional注解</p><ol start="2"><li><p>如果存在，则利用事务管理器（TransactionMananger）新建一个数据库连接</p></li><li><p>修改数据库连接的autocommit为false</p></li><li><p>执行target.test()，执行程序员所写的业务逻辑代码，也就是执行sql</p></li><li><p>执行完了之后如果没有出现异常，则提交，否则回滚</p></li></ol><p>Spring事务是否会失效的判断标准：某个加了@Transactional注解的方法被调用时，要判断到底是不是直接被代理对象调用的，如果是则事务会生效，如果不是则失效。</p></li><li><p>AOP大致流程</p><p>AOP就是进行动态代理，在创建一个Bean的过程中，Spring在最后一步会去判断当前正在创建的这个Bean是不是需要进行AOP，如果需要则会进行动态代理。</p><p>如何判断当前Bean对象需不需要进行AOP:</p><ol><li><p>找出所有的切面Bean</p></li><li><p>遍历切面中的每个方法，看是否写了@Before、@After等注解</p></li><li><p>如果写了，则判断所对应的Pointcut是否和当前Bean对象的类是否匹配</p></li><li><p>如果匹配则表示当前Bean对象有匹配的的Pointcut，表示需要进行AOP</p></li></ol><p>利用cglib进行AOP的大致流程：</p><ol><li><p>生成代理类UserServiceProxy，代理类继承UserService</p></li><li><p>代理类中重写了父类的方法，比如UserService中的test()方法</p></li><li><p>代理类中还会有一个target属性，该属性的值为被代理对象（也就是通过UserService类推断构造方法实例化出来的对象，进行了依赖注入、初始化等步骤的对象）</p></li><li><p>代理类中的test()方法被执行时的逻辑如下：</p><p>a. 执行切面逻辑（@Before）</p><p>b. 调用target.test()</p></li></ol><p>当我们从Spring容器得到UserService的Bean对象时，拿到的就是UserServiceProxy所生成的对象，也就是代理对象。UserService代理对象.test()—&gt;执行切面逻辑—&gt;target.test()，注意target对象不是代理对象，而是被代理对象。</p></li><li><p><strong>BeanDefinition</strong></p><p>BeanDefinition表示Bean定义，BeanDefinition中存在很多属性用来描述一个Bean的特点。比如：</p><ul><li>class：表示Bean类型</li><li>scope：表示Bean作用域，单例或原型等</li><li>lazyInit：表示Bean是否是懒加载</li><li>initMethodName：表示Bean初始化时要执行的方法</li><li>destroyMethodName：表示Bean销毁时要执行的方法</li></ul><p>在Spring中，我们经常会通过以下几种方式来定义Bean：</p><ol><li><bean/></li><li><p>@Bean</p></li><li><p>@Component(@Service,@Controller)</p></li></ol><p>注：这些我们可以称之<strong>申明式定义Bean</strong>。</p><p>我们还可以<strong>编程式定义Bean</strong>，那就是直接通过BeanDefinition，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line"><span class="comment">// 生成一个BeanDefinition对象，并设置beanClass为User.class，并注册到ApplicationContext中</span></span><br><span class="line">AbstractBeanDefinition beanDefinition=BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();</span><br><span class="line">beanDefinition.setBeanClass(User.class);</span><br><span class="line">context.registerBeanDefinition(<span class="string">&quot;user&quot;</span>, beanDefinition);</span><br><span class="line">System.out.println(context.getBean(<span class="string">&quot;user&quot;</span>));</span><br></pre></td></tr></table></figure><p>我们还可以通过BeanDefinition设置一个Bean的其他属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beanDefinition.setScope(<span class="string">&quot;prototype&quot;</span>); <span class="comment">// 设置作用域</span></span><br><span class="line">beanDefinition.setInitMethodName(<span class="string">&quot;init&quot;</span>); <span class="comment">// 设置初始化方法</span></span><br><span class="line">beanDefinition.setLazyInit(<span class="literal">true</span>); <span class="comment">// 设置懒加载</span></span><br></pre></td></tr></table></figure><p>和申明式事务、编程式事务类似，通过<bean/>，@Bean，@Component等申明式方式所定义的Bean，最终都会被Spring解析为对应的BeanDefinition对象，并放入Spring容器中。</p></li><li><p><strong>BeanDefinitionReader</strong></p><p>接下来，我们来介绍几种在Spring源码中所提供的BeanDefinition读取器（BeanDefinitionReader），这些BeanDefinitionReader在我们使用Spring时用得少，但在Spring源码中用得多，相当于Spring源码的基础设施。</p></li><li><p><strong>AnnotatedBeanDefinitionReader</strong></p></li></ol><p>   可以直接把某个类转换为BeanDefinition，并且会解析该类上的注解，比如：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line"><span class="type">AnnotatedBeanDefinitionReader</span> <span class="variable">annotatedBeanDefinitionReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(context);</span><br><span class="line"><span class="comment">// 将User.class解析为BeanDefinition</span></span><br><span class="line">annotatedBeanDefinitionReader.register(User.class);</span><br><span class="line">System.out.println(context.getBean(<span class="string">&quot;user&quot;</span>));</span><br></pre></td></tr></table></figure><p>   注意：它能解析的注解是：@Conditional，**@Scope**、@Lazy、@Primary、@DependsOn、</p><p>   @Role、@Description</p><ol start="11"><li><p><strong>XmlBeanDefinitionReader</strong></p><p>可以解析<bean/>标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line"><span class="type">XmlBeanDefinitionReader</span> <span class="variable">xmlBeanDefinitionReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(context);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> xmlBeanDefinitionReader.loadBeanDefinitions(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">System.out.println(context.getBean(<span class="string">&quot;user&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p><strong>ClassPathBeanDefinitionScanner</strong></p><p>ClassPathBeanDefinitionScanner是扫描器，但是它的作用和BeanDefinitionReader类似，它可以进行扫描，扫描某个包路径，对扫描到的类进行解析，比如，扫描到的类上如果存在@Component注解，那么就会把这个类解析为一个BeanDefinition，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">context.refresh();</span><br><span class="line"><span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(context);</span><br><span class="line">scanner.scan(<span class="string">&quot;com.zhouyu&quot;</span>);</span><br><span class="line">System.out.println(context.getBean(<span class="string">&quot;userService&quot;</span>));</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Service </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图灵 </tag>
            
            <tag> Spring底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Service学习</title>
      <link href="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/27/Service%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Service学习（server-applet）"><a href="#Service学习（server-applet）" class="headerlink" title="Service学习（server applet）"></a>Service学习（server applet）</h1><ol><li><p>概念</p><ul><li><p>概念 : 运行在服务器端的小程序</p><ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li><li>将来我们自定义一个类，实现servlet接口，复写方法。</li></ul></li><li><p>快速入门：</p><ol><li><p>创建JavaEE项目</p></li><li><p>定义一个类，实现Servlect接口</p></li><li><p>实现接口中得抽象方法</p></li><li><p>配置Servlect</p> <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/image-20230828163556269.png" class="" title="image-20230828163556269.png"></li></ol></li><li><p>上面过程的配图（理解性的）</p>  <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/1738f9b2b0022601a83c994b61eb652.png" class="" title="1738f9b2b0022601a83c994b61eb652.png"></li><li><p>执行原理：</p><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xm1文件，是否有对应的<url-pattern>标签体内容</li><li>如果有，则在找到对应的<servlet-class>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li><li><p>se’rvlet中的生命周期：</p><ol><li><p>被创建: 执行init方法，只执行一次</p> <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/7a03d8ed384e4f4e352578e180b3d25.png" class="" title="7a03d8ed384e4f4e352578e180b3d25.png"><ul><li>Servlet什么时候被创建 ?<ol><li>默认情况下，第一次被访问时，servlet被创建</li><li>可以配置执行servlet的创建时机。<ul><li><!--指定servlet的创建时机          1.第一次被访问时，创建                  *<load-on-startup>的值为负数              2.在服务器启动时，创建                  *<load-on-startup>的值为0或正整数  --></li></ul></li><li>servlet的init方法，只执行一次，说明一个servlet在内存中只存在一个对象，Servlet是单例的.<ul><li>多个用户同时访问时，可能存在线程安全问题。</li><li>解决:尽量不要在servlet中定义成员变量。即使定义了成员变量，也不要对修改值</li></ul></li></ol></li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定servlet的创建时机</span></span><br><span class="line"><span class="comment">1.第一次被访问时，创建</span></span><br><span class="line"><span class="comment">*&lt;load-on-startup&gt;的值为负数</span></span><br><span class="line"><span class="comment">2.在服务器启动时，创建</span></span><br><span class="line"><span class="comment">*&lt;load-on-startup&gt;的值为0或正整数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>5<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>提供服务: 执行service方法，执行多次</p><ul><li>每次访问servlet时，service方法都会被调用一次</li></ul> <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/af891e1f5b3fbc1e44da101d5a98479.png" class="" title="af891e1f5b3fbc1e44da101d5a98479.png"></li><li><p>被销毁: 执行destroy方法，只执行一次</p><ul><li>servlet被销毁时执行。服务器关闭时，servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在servlet被销毁之前执行，一般用于释放资源</li></ul> <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/dbfdef238bfcdd0de73294db7b0bbe7.png" class="" title="dbfdef238bfcdd0de73294db7b0bbe7.png"></li><li><p>Servlect3.0 ：</p><ul><li><p>好处：</p><ul><li>支持注解配置。可以不需要web.xml了</li></ul></li><li><p>步骤：</p><ol><li>创建JavaEE项目，选择Servlet的版本3.o以上，可以不创建web.xml</li><li>定义一个类，实现servlet接口</li><li>复写方法</li><li>在类上使用@webservlet注解，进行配置<ul><li>@webservlet(“资源路径”）</li></ul></li></ol><blockquote><p>您提供的代码片段看起来像是一个 Java 注解 <code>@WebServlet</code> 的部分定义。这个注解在 Java EE 或 Servlet 规范中使用，用于声明一个 Servlet，并配置它的属性。以下是对您提供的代码片段中各个属性的解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是对每个属性的解释：</p><ul><li><code>name()</code>: Servlet 的名称。</li><li><code>value()</code>: 与 <code>urlPatterns()</code> 相同，用于指定 Servlet 的 URL 映射。可以提供一个或多个 URL 模式。</li><li><code>urlPatterns()</code>: 用于指定 Servlet 的 URL 映射，即哪些 URL 触发该 Servlet 的处理。</li><li><code>loadOnStartup()</code>: 定义 Servlet 的启动顺序。正整数值表示 Servlet 应该在容器启动时加载的顺序。负数表示在请求时加载。</li><li><code>initParams()</code>: 初始化参数，这是一个 <code>WebInitParam</code> 数组，用于为 Servlet 提供初始化参数。</li><li><code>asyncSupported()</code>: 布尔值，指示 Servlet 是否支持异步操作。</li><li><code>smallIcon()</code>: 小图标路径，通常用于 Servlet 管理界面。</li><li><code>largeIcon()</code>: 大图标路径，同样通常用于 Servlet 管理界面。</li><li><code>description()</code>: Servlet 的描述信息。</li><li><code>displayName()</code>: Servlet 的显示名称。</li></ul><p>这些属性允许您在声明 Servlet 时设置各种配置选项，从而影响其在 Web 容器中的行为。</p><p>请注意，这只是一个 Java 注解的定义，实际使用需要在具体的 Servlet 类上进行注解标记，并提供相应的属性值。这些注解将在 Java EE 或 Servlet 容器中生效，以配置和管理您的 Servlet。</p></blockquote></li></ul></li></ol></li></ul></li><li><p>IDEA与tomcat的相关配置</p><ol><li>IDEA会为每一个tomcat部署的项目单独建立一份配置文件<ul><li>查看控制台的log:Using CATALINA BASE:   “c:\Users\fqy.Intellijidea2018.1\system tomcat\ itcast”</li></ul></li><li>工作空间项目和tomcat部署的web项目<ul><li>tomcat真正访问的是“tomcat部署的web项目”，”tomcat部署的web项目”对应着”工作空间项目”的web目录下的所有资源</li><li>WEB-INF目录下的资源不能被浏览器直接访问。</li><li>断点调试: 使用”小虫子”启动 dubug 启动</li></ul></li><li>资源分类<ol><li>静态资源:所有用户访问后，得到的结果都是一样的，称为静态资源,静态资源可以直接被浏览器解析<ul><li>如: html,css,Javascript</li></ul></li><li>动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器<ul><li>如 : servlet&#x2F;jsp,php,asp………</li></ul></li><li>网络通信三要素<ol><li>IP :电子设备(计算机)在网络中的唯一标识</li><li>端口:应用程序在计算机中的唯一标识。 0~65536</li><li>传输协议:规定了数据传输的规则<ol><li>基础协议：<ol><li>tcp：安全协议，三次握手。速度稍慢</li><li>udp: 不安全协议。 速度快</li></ol></li></ol></li></ol></li><li>servlet相关配置<ol><li>urlpartten:servlet访问路径<ol><li>一个servlet可以定义多个访问路径：@webservlet([“&#x2F;d4”,”&#x2F;dd4”,”&#x2F;ddd4”})</li><li>路径定义规则：<ol><li>&#x2F;xxx : 路径匹配</li><li>&#x2F;xxx&#x2F;xxx:多层路径，目录结构</li><li>*.do : 扩展名匹配</li></ol></li></ol></li></ol></li></ol></li></ol></li><li><p>HTTP：</p><ol><li><p>概念：Hyper Text Transfer Protocol 超文本传输协议</p><ul><li>传输协议: 定义了，客户端和服务器端通信时，发送数据的格式</li><li>特点：<ol><li>基于TCP&#x2F;IP的高级协议</li><li>默认端口号:80</li><li>基于请求&#x2F;响应模型的:一次请求对应一次响应</li><li>无状态的 :每次请求之间相互独立，不能交互数据</li></ol></li></ul></li><li><p>请求消息数据格式</p><ol><li><p>请求行</p><ul><li>请求方式 请求url 请求协议&#x2F;版本</li><li>GET &#x2F;login.html HTTP 1.1</li><li>请求方式<ul><li>HTTP协议有7中请求方式，常用的有2种<ul><li>GET :<ol><li>请求参数在请求行中，在url后。</li><li>请求的url长度有限制的</li><li>不太安全</li></ol></li><li>POST：<ol><li>请求参数在请求体中</li><li>请求的url长度没有限制的</li><li>相对安全</li></ol></li></ul></li></ul></li></ul></li><li><p>请求头</p><ul><li><p>请求头名称:请求头值</p></li><li><p>常见的请求头：</p><ol><li><p>User-Agent : 浏览器告诉服务器，我访问你使用的浏览器版本信息</p><ul><li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li></ul></li><li><p>Referer : <a href="http://localhost/login.html">http://localhost/login.html</a></p><ul><li><p>告诉服务器，我(当前请求)从哪里来 ?</p><p>  作用：防盗链、统计工作</p>  <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/ac11cabe2726664bc0dce16c1c97f3e.png" class="" title="ac11cabe2726664bc0dce16c1c97f3e.png">  <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/c3d340df43abcab324659ae29327b7d.png" class="" title="c3d340df43abcab324659ae29327b7d.png"></li></ul></li></ol></li></ul></li><li><p>请求空行</p><ul><li>空行</li></ul></li><li><p>请求体(正文)</p></li></ol><ul><li><p>字符串格式：</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /login.htmlHost<span class="punctuation">:</span> localhost</span><br><span class="line">User-Agent<span class="punctuation">:</span> Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>; Win64; <span class="number">64</span>; rv<span class="punctuation">:</span><span class="number">60.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">60.0</span>Accept; text/html<span class="punctuation">,</span>application/xhtml+xml<span class="punctuation">,</span>application/xml;q=<span class="number">0.9</span><span class="punctuation">,</span>*<span class="comment">/*;g=0.8Accept-Language: zh-cN,zh;q=0.8,zh-Tw;q=0.7,zh-HK;q=0.5,en-us;q=0.3,en;q=0.2Accept-Encoding: gzip，deflateConnection: keep-alive</span></span><br><span class="line"><span class="comment">Upgrade-Insecune-Requests:</span></span><br><span class="line"><span class="comment">usepname=zhangsan</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>Request</p><ol><li><p>request对象和response对象的原理</p><ul><li>request和response对象是由服务器创建的。我们来使用它们</li><li>request对象是来获取请求消息，response对象是来设置响应消息</li></ul></li><li><p>request对象继承体系结构:</p> <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/cf9f501beab019a85e6f7c498251bfc.png" class="" title="cf9f501beab019a85e6f7c498251bfc.png"></li><li><p>request:获取请求消息</p></li><li><p>request功能：</p><ul><li><p>获取请求消息数据</p><ul><li><p>获取请求行数据</p><p>  GET &#x2F;day14&#x2F;demo1?name&#x3D;zhangsan HTTP&#x2F;1.1</p><p>  方法：</p><ol><li>获取请求方式:GET<ul><li>string getMethod()</li></ul></li><li>获取虚拟目录:&#x2F;day14<ul><li>string getContextPath()</li></ul></li><li>获取Servlet路径: &#x2F;demo1<ul><li>string getservletPath()</li></ul></li><li>获取get方式请求参数:name&#x3D;zhangsan<ul><li>string getouerystring()</li></ul></li><li>获取请求URI : &#x2F;day14&#x2F;demo1<ul><li>string getRequestURI()：    &#x2F;dav14&#x2F;demo1</li><li>stringBuffer getRequestURL()：<a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a></li></ul></li><li>获取协议及版本:HTTP&#x2F;1.1<ul><li>string getProtocol(）</li></ul></li><li>获取客户机的IP地址 :<ul><li>string getRemoteAddr()</li></ul></li></ol>  <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/5e1586260877a7c31eb3167f2f4c75d.png" class="" title="5e1586260877a7c31eb3167f2f4c75d.png"></li></ul></li></ul></li><li><p>获取请求头数据：</p><ul><li><p>方法：</p><ul><li>string getHeader(string name):通过请求头的名称获取请求头的值</li><li>Enumeration<string> getHeaderNames();获取所有的请求头名称</li></ul>  <img src="/2023/08/27/Service%E5%AD%A6%E4%B9%A0/07855545d008e8a06c035ac2e33792d.png" class="" title="07855545d008e8a06c035ac2e33792d.png"></li><li><p>获取请求体数据：</p><ul><li>请求体: 只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</li><li>步骤：<ol><li>获取流对象<ul><li>BuffenedReader getReader(]: 获取字符输入流，只能操作字符数据</li><li>ServletInputstream getInputstream(): 获取字节输入流，可以操作所有类型数据<ul><li>在文件上传知识点后讲解</li></ul></li></ul></li><li>再从流对象中拿数据</li></ol></li><li>其他功能：<ol><li>获取请求参数通用方式<ul><li>String getParaneter(String name) ：根据参数名称获取参数值</li><li>String[] getParameterVa</li></ul></li></ol></li></ul></li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Service </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring注解驱动</title>
      <link href="/2023/08/24/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/"/>
      <url>/2023/08/24/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring注解驱动"><a href="#Spring注解驱动" class="headerlink" title="Spring注解驱动"></a>Spring注解驱动</h1><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ol><li><p>@Configuration  &#x2F;&#x2F;告诉Spring这是一个配置类</p><img src="/2023/08/24/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-24%20142801.png" class="" title="屏幕截图 2023-08-24 142801.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MainConfig.class);</span><br><span class="line"><span class="type">Person</span> <span class="variable">bean</span> <span class="operator">=</span> applicationContext.getBean(Person.class);</span><br><span class="line">System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/2023/08/24/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-24%20143717.png" class="" title="屏幕截图 2023-08-24 143717.png"></li><li><p>ComponentScan(value &#x3D; “com.magichell”)  &#x2F;&#x2F;扫描包的作用</p><img src="/2023/08/24/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-24%20144550.png" class="" title="屏幕截图 2023-08-24 144550.png"><p>@ComponentsScan(value &#x3D; “com.magichell”,excludeFilters &#x3D; {@Filter(type &#x3D; FilterType.ANNOTATION,classes &#x3D; controller.class,service.class)})  &#x2F;&#x2F;其中excludeFilters指定扫描的时候按照什么规则排除哪些组件</p><p>@ComponentsScan(value &#x3D; “com.magichell”,includeFilters &#x3D; {@Filter(type &#x3D; FilterType.ANNOTATION,classes &#x3D; controller.class,service.class)}，useDefaultFilters &#x3D; flase)  &#x2F;&#x2F;其中includeFilters是需要包含哪些组件</p><ul><li>FilterType.ANNOTATION:按照注解</li><li>FilterType.ASSIGNABLE_TYPE：按照给定的类型</li><li>FilterType.ASPECTJ:按照ASPECTJ表达式</li><li>FilterType.REGEX:按照正则表达式</li><li>FilterType.CUSTOM:使用自定义规则</li></ul></li></ol><p>​<img src="/2023/08/24/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-24%20152753.png" class="" title="屏幕截图 2023-08-24 152753.png"></p><ol start="3"><li><p>@Scope默认是单实例的</p><ul><li>prototype：多实例的，ioc容器启动并不会去调用方法创建对象放在容器中。每次获取的时候才会调用方法创建对象。</li><li>singleton：单实例的（默认值），ioc容器启动会调用方法创建对象放到ioc容器中，以后每一次获取都是从容器中拿取</li><li>request：同一次请求创建一个实例</li><li>session：同一个session创建一个实例</li></ul></li><li><p>懒加载：只是用在单实例中（@Lazy）</p></li><li><p>@Conditioal：按照一定的条件进行判断，满足条件给容器中注册bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LInuxCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context,AnntatedTypeMetadata metadata)</span>&#123;</span><br><span class="line">        <span class="comment">//判断是否为Linux的系统</span></span><br><span class="line">        <span class="comment">//1. 能获取到ioc使用的beanFactory</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">        <span class="comment">//2. 获取类加载器</span></span><br><span class="line">        <span class="type">ClassLoder</span> <span class="variable">classLoader</span> <span class="operator">=</span>context.getClassLoader();</span><br><span class="line">        <span class="comment">//3.获取环境</span></span><br><span class="line">        <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> context.getEnvironment();</span><br><span class="line">        <span class="comment">//4.获取到bean定义的注类</span></span><br><span class="line">        <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> context.getRegistry();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConditionContext：判断条件能使用的上下文（环境）</li><li>AnntatedTypeMetadata：注释信息</li></ul><img src="/2023/08/24/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-24%20170305.png" class="" title="屏幕截图 2023-08-24 170305.png"></li><li><ol><li><p>快速导入@Import（color.class）</p></li><li><p>ImportSelector：返回需要导入的组件的全类名数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span>&#123;</span><br><span class="line"><span class="comment">//返回值，就是导入到容器中的组件全类名</span></span><br><span class="line"><span class="comment">//AnnotationMetadata：当前标注@Import注解的类的所有注解信息</span></span><br><span class="line"><span class="keyword">public</span>  String[] selectImports(AnnotationMetadata importingClassMetadata)&#123;</span><br><span class="line"><span class="comment">//方法不要返回null值</span></span><br><span class="line"><span class="comment">//importingClassMetadata.get</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>importBeanDefinitionRegistrar：手动注册bean到容器中</p><blockquote><p><code>ImportBeanDefinitionRegistrar</code> 是 Spring Framework 中的一个接口，用于允许开发人员在配置类中动态地注册额外的 Bean 定义到 Spring 容器中。它允许您在运行时基于条件或其他逻辑来注册 Bean，从而实现更加灵活和动态的配置。</p><p>以下是一个简单的示例，说明了 <code>ImportBeanDefinitionRegistrar</code> 的作用：</p><p>假设您有一个基于 Spring 的应用程序，其中有两种不同类型的数据源，分别为主数据源（Primary DataSource）和次要数据源（Secondary DataSource）。您想要在配置类中根据特定的条件动态地注册适当类型的数据源 Bean。</p><p>首先，创建一个注解类 <code>EnableDynamicDataSources</code>，用于启用动态数据源配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(DynamicDataSourcesRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableDynamicDataSources &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，创建 <code>DynamicDataSource</code> 类表示数据源，以及两个不同的数据源实现类 <code>PrimaryDataSource</code> 和 <code>SecondaryDataSource</code>。</p><p>接下来，创建一个 <code>DynamicDataSourcesRegistrar</code> 类，实现 <code>ImportBeanDefinitionRegistrar</code> 接口，根据条件注册不同的数据源 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.EnvironmentAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Profiles;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSourcesRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, EnvironmentAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnvironment</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">usePrimaryDataSource</span> <span class="operator">=</span> environment.acceptsProfiles(Profiles.of(<span class="string">&quot;primary&quot;</span>));</span><br><span class="line">        Class&lt;?&gt; dataSourceType = usePrimaryDataSource ? PrimaryDataSource.class : SecondaryDataSource.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Register the appropriate data source bean definition</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// For demonstration purposes, you would register the dataSourceType as a bean here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在您的配置类中使用 <code>@EnableDynamicDataSources</code> 注解来启用动态数据源配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableDynamicDataSources</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// Other configuration beans</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，通过使用 <code>ImportBeanDefinitionRegistrar</code>，您可以根据配置文件中的条件（例如，使用 <code>application.properties</code> 中的配置）来动态地选择注册不同类型的数据源 Bean，从而实现更加灵活的配置方式。这在具有不同环境、条件或业务需求的场景下非常有用。请注意，示例中的代码只是演示概念，实际代码可能会更加复杂。</p></blockquote></li></ol></li><li><p>使用Spring提供的FactoryBean来给容器注册组件（工厂Bean）</p><ol><li>默认获取到的是工厂bean调用getObject创建对象</li><li>要获取工厂Bean本身，我们需要给id前面加一个&amp;（&amp;colorFactoryBean）</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Spring的FactoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Color&gt;&#123;</span><br><span class="line">    <span class="comment">//返回一个Color对象，这个对象会添加到容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Color <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ColorFactoryBean.....&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">color</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType()&#123;</span><br><span class="line">        <span class="keyword">return</span> Color.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//来判断单例</span></span><br><span class="line">    <span class="comment">//true：这个bean是单实例，在容器中保存</span></span><br><span class="line">    <span class="comment">//false:多实例，每次获取都会创建一个新的bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>bean的生命周期：</p><p> ​         bean创建—初始化—-销毁的过程</p><p> 我们可以自定义初始化和销毁方法：容器在bean进行到当前生命周期的时候来调用我们自定义的初始化和销毁过程</p><ol><li><p>指定初始化和销毁方法（init-method&#x3D;”” destory-method&#x3D;””）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfigOfLifeCycle</span>&#123;</span><br><span class="line">    <span class="meta">@Bean(initMethod=&quot;init&quot;,destoryMethod=&quot;destory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">car</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 初始化</p><ul><li>对象创建完成，并赋值好，调用初始化方法。。。</li></ul><p> 销毁：</p><ul><li>单实例：容器关闭的时候</li><li>多实例：容器不会管理这个bean；容器不会调用销毁方法</li></ul></li><li><p>通过Bean实现InitializingBean（定义初始化）、DisposablBean（定义销毁）</p></li><li><p>可以使用JSR250：</p><p> @PostConstruct：在bean创建完成并且属性赋值完成；来执行初始化方法</p><p> @PreDestory：在容器销毁bean之前通知我们进行清理工</p></li><li><p>BeanPostProcessor：bean的后置处理器；（在初始化之前开始工作）</p><p> 在bean初始化前后进行一些处理工作：</p><p> ​postProcessBeforeInitialization: 在初始化之前工作</p><p> ​postProcessAfterInitialization：在初始化之后工作</p><p> 遍历得到容器中所有的BeanPostProcessor；挨个执行eforeInitialization，一旦返回null，跳出for循环，不会执行后面的BeanPostProcessor.postProcessBeforeInitialization</p></li><li></li></ol> <ol start="6"><li><p>Spring底层对BeanPostProcessor的使用：</p><p> ​bean赋值，注入其他组件；@Autowired：生命周期注解功能；@Async，xxx BeanPostProcessor；q</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring 注解驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEight-leggedEssay</title>
      <link href="/2023/08/23/JavaEight-leggedEssay/"/>
      <url>/2023/08/23/JavaEight-leggedEssay/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaEight-leggedEssay"><a href="#JavaEight-leggedEssay" class="headerlink" title="JavaEight-leggedEssay"></a>JavaEight-leggedEssay</h1><h2 id="Java八股文笔记"><a href="#Java八股文笔记" class="headerlink" title="Java八股文笔记"></a>Java八股文笔记</h2><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><ol><li><h4 id="说下面向对象四大特性"><a href="#说下面向对象四大特性" class="headerlink" title="说下面向对象四大特性"></a>说下面向对象四大特性</h4><blockquote><p>面向对象编程（Object-Oriented Programming，简称OOP）的四大特性是封装、继承、多态和抽象。这些特性是面向对象编程的基本概念，帮助程序员设计和组织代码以实现灵活、可维护和可扩展的软件系统。</p><ol><li><p>封装（Encapsulation）：<br>封装是将数据（属性）和行为（方法）捆绑在一个单元（类）中，并对外部隐藏其实现细节的机制。通过封装，对象对外部提供了一个接口，外部程序只能通过这个接口访问对象的数据和行为，而无需了解其内部的具体实现。这样可以保护数据不被意外修改，同时也使得对象的实现细节可以灵活地更改而不影响外部使用。</p></li><li><p>继承（Inheritance）：<br>继承是指一个类（称为子类或派生类）可以继承另一个类（称为父类或基类）的属性和方法。子类可以复用父类的代码，同时还可以在其基础上添加新的属性和方法，或者覆盖父类的方法来实现特定的功能。继承提供了代码的重用性和层次性，使得对象之间可以形成一个层次结构，增强了代码的组织和扩展能力。</p></li><li><p>多态（Polymorphism）：<br>多态是指同一操作对不同对象会产生不同的结果。在面向对象编程中，多态可以通过方法重载和方法重写来实现。方法重载是指在同一个类中定义多个同名方法，但参数列表不同；方法重写是指子类重写父类的方法，使得子类对象可以表现出不同的行为。多态提高了代码的灵活性和可扩展性，使得程序可以更加通用和易于维护。</p></li><li><p>抽象（Abstraction）：<br>抽象是将对象的共同特征提取出来形成一个抽象类或接口，表示一种抽象的数据类型。抽象类定义了对象的属性和方法，但没有具体的实现；接口则只定义了方法的签名而没有实现。抽象类和接口为程序员提供了一种规范和约束，使得对象可以按照一定的标准来设计和实现。通过抽象，可以将复杂的问题简化为更容易理解和处理的问题，同时也提高了代码的可扩展性和可维护性。</p></li></ol><p>这四大特性是面向对象编程的基石，通过它们，可以创建出具有高度灵活性、可维护性和可扩展性的软件系统。它们相互之间密切联系，相辅相成，共同构建了面向对象编程的编程范式。</p></blockquote></li><li><h4 id="Java语言有些特点"><a href="#Java语言有些特点" class="headerlink" title="Java语言有些特点"></a>Java语言有些特点</h4><blockquote><p>Java 是一种流行的编程语言，具有许多特点，这些特点使其在软件开发中广受欢迎。以下是 Java 语言的一些主要特点：</p><ol><li><p><strong>面向对象（Object-Oriented）</strong>：Java 是一种面向对象的编程语言，支持封装、继承和多态等面向对象的概念。这使得代码更具可重用性、可扩展性和灵活性。</p></li><li><p><strong>平台无关性（Platform-Independent）</strong>：Java 代码编译后生成字节码，而不是本地机器代码。这些字节码可以在任何支持 Java 虚拟机（JVM）的平台上运行，使得 Java 程序跨平台可移植。</p></li><li><p><strong>自动内存管理（Automatic Memory Management）</strong>：Java 提供垃圾回收器（Garbage Collector），负责自动管理内存分配和释放，程序员不需要手动处理内存管理，有助于减少内存泄漏和悬挂指针等问题。</p></li><li><p><strong>强类型（Strongly Typed）</strong>：Java 是一种强类型语言，所有变量在编译时必须指定数据类型。这增加了代码的可靠性和安全性，防止类型转换错误。</p></li><li><p><strong>丰富的类库（Rich Standard Library）</strong>：Java 提供了一个广泛的类库，称为 Java Standard Library（Java 标准库），其中包含大量预定义的类和方法，简化了开发过程。</p></li><li><p><strong>多线程支持（Multithreading）</strong>：Java 内置了对多线程编程的支持，可以轻松创建和管理多线程应用程序，充分利用多核处理器的优势。</p></li><li><p><strong>异常处理（Exception Handling）</strong>：Java 引入了异常处理机制，允许开发人员捕获和处理程序运行时可能发生的异常情况，从而增强了代码的健壮性。</p></li><li><p><strong>安全性（Security）</strong>：Java 支持安全编程，并提供安全管理器（Security Manager）来控制访问敏感资源，确保程序在受限的执行环境中运行。</p></li><li><p><strong>简单性（Simplicity）</strong>：Java 设计简洁易懂，语法类似于 C++，使得初学者能够相对容易上手。</p></li><li><p><strong>开源社区（Open Source Community）</strong>：Java 拥有庞大的开源社区，有许多开源框架和工具，使开发人员能够更高效地构建应用程序。</p></li></ol><p>总体而言，Java 是一种功能强大、可靠性高、可移植性好的编程语言，适用于各种应用程序开发，尤其在企业级应用和互联网应用方面得到广泛应用。</p></blockquote></li><li><h4 id="什么是Java程序的主类？应用程序和小程序的主类有何不同？"><a href="#什么是Java程序的主类？应用程序和小程序的主类有何不同？" class="headerlink" title="什么是Java程序的主类？应用程序和小程序的主类有何不同？"></a>什么是Java程序的主类？应用程序和小程序的主类有何不同？</h4></li></ol><blockquote><p>在 Java 程序中，主类是指包含 <code>main</code> 方法的类。<code>main</code> 方法是 Java 程序的入口点，即程序从这里开始执行。主类的定义是 Java 程序执行的起始点。</p><p><strong>主类的定义：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 程序逻辑和功能代码在这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>MainClass</code> 就是主类，其中的 <code>main</code> 方法就是程序的入口点。当你运行一个 Java 程序时，JVM 会寻找并执行这个 <code>main</code> 方法。</p><p><strong>应用程序和小程序的主类有何不同？</strong></p><ol><li><p><strong>应用程序的主类：</strong></p><ul><li>应用程序主类通常是一个包含完整功能的 Java 程序，用于执行一系列任务或实现特定的功能。它们可以是图形用户界面（GUI）应用程序或命令行工具，可以有多个类组成，用于构建复杂的应用程序。</li><li>应用程序主类的 <code>main</code> 方法是程序的入口点，启动整个应用程序的执行。通过调用其他类和方法，应用程序可以执行各种任务，与用户交互，并且可以在需要时调用其他类库或模块。</li></ul></li><li><p><strong>小程序的主类：</strong></p><ul><li>小程序主类通常是一个简单的 Java 程序，用于解决某个特定的问题或执行某个简单的任务。它通常不涉及复杂的用户界面或大规模的功能集。</li><li>小程序主类的 <code>main</code> 方法是程序的入口点，用于启动小程序的执行。这些程序可能由单个类组成，或者只包含少量其他类的代码，目的是解决一个明确的问题。</li></ul></li></ol><p>总结来说，应用程序主类和小程序主类都包含 <code>main</code> 方法作为程序的入口点。不同之处在于应用程序主类是构建复杂应用程序的起始点，可以包含多个类和功能，而小程序主类通常是一个简单的解决方案，可能只由一个类组成，用于执行某个特定的简单任务。</p></blockquote><ol start="4"><li><h4 id="访问修饰符public-private-protected-以及不写（默认）时的区别？"><a href="#访问修饰符public-private-protected-以及不写（默认）时的区别？" class="headerlink" title="访问修饰符public,private,protected,以及不写（默认）时的区别？"></a>访问修饰符public,private,protected,以及不写（默认）时的区别？</h4><blockquote><p>访问修饰符用于控制类、方法和成员变量的可访问性，即决定哪些部分可以在其他类中访问。在 Java 中，有四种访问修饰符：<code>public</code>、<code>private</code>、<code>protected</code> 和默认（不写任何修饰符）。</p><ol><li><p><strong>public：</strong></p><ul><li>使用 <code>public</code> 修饰的类、方法或成员变量可以在任何地方被访问，即使是在不同的包（package）中。</li><li>其他类可以自由地访问公共类的公共方法和成员变量，不受限制。</li></ul></li><li><p><strong>private：</strong></p><ul><li>使用 <code>private</code> 修饰的类、方法或成员变量只能在声明它们的类内部被访问，其他类无法访问。</li><li>这种修饰符提供了封装性，确保数据只能通过类内部的公共方法进行访问和修改。</li></ul></li><li><p><strong>protected：</strong></p><ul><li>使用 <code>protected</code> 修饰的类、方法或成员变量可以在同一个包内访问，以及在不同包中的子类（继承类）中访问。</li><li>对于不在同一个包中的非子类，<code>protected</code> 的成员将不可见。</li></ul></li><li><p><strong>默认（不写任何修饰符）：</strong></p><ul><li>如果不使用任何访问修饰符，即默认情况下，类、方法或成员变量将在同一个包中可见，但在其他包中不可见。</li><li>这种访问级别通常被称为“包级私有”或“友好访问”，它确保同一个包中的类可以相互访问，但其他包中的类无法访问。</li></ul></li></ol><p><strong>总结：</strong></p><ul><li><code>public</code>：在任何地方都可以访问。</li><li><code>private</code>：仅在声明它们的类内部可访问。</li><li><code>protected</code>：在同一包中和子类中可访问。</li><li>默认（不写任何修饰符）：在同一包中可访问，其他包中不可访问。</li></ul><p>选择适当的访问修饰符是面向对象编程的重要概念之一，可以确保代码的封装性和安全性，同时允许需要访问的部分在适当的条件下可见。</p></blockquote></li><li><h4 id="float-f-3-4-是否正确？"><a href="#float-f-3-4-是否正确？" class="headerlink" title="float f&#x3D;3.4;是否正确？"></a>float f&#x3D;3.4;是否正确？</h4><blockquote><p>在 Java 中，该语句是不正确的。这是因为在给浮点数变量赋值时，需要在数字后面加上 <code>f</code> 或 <code>F</code> 后缀，以明确指定该数字为浮点数而不是双精度数（double）。</p><p>正确的写法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">3.4f</span>;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">3.4F</span>;</span><br></pre></td></tr></table></figure><p>如果不加后缀 <code>f</code> 或 <code>F</code>，Java 默认将小数点后的数值视为 double 类型。因此，如果想要将该值赋给 float 类型的变量，必须显式地指定后缀。</p></blockquote></li><li><h4 id="Java有没有goto？"><a href="#Java有没有goto？" class="headerlink" title="Java有没有goto？"></a>Java有没有goto？</h4><blockquote><p>在标准的 Java 语言规范中，是没有提供像 C&#x2F;C++ 中的 <code>goto</code> 语句的。Java 在设计上避免了 <code>goto</code> 语句的使用，主要是为了促进结构化编程和更安全的代码。</p><p><code>goto</code> 语句可以导致代码变得混乱，难以理解和维护。它会使得程序流程难以跟踪，容易产生逻辑错误和代码耦合问题。因此，Java 中没有引入这个语句。</p><p>在 Java 中，推荐使用结构化编程的控制语句，例如 <code>if-else</code>、<code>while</code>、<code>for</code>、<code>switch</code> 等，以及方法调用和异常处理来控制程序流程。这些结构化编程工具使得代码更加清晰、可读性更高，并有助于编写更健壮的程序。</p><p>虽然标准 Java 没有提供 <code>goto</code> 语句，但是请注意，还有一些特殊情况下可能需要使用标签（label）来实现类似于 <code>goto</code> 的效果。但是这种用法并不推荐，因为它可能导致代码复杂化和维护上的困难。除非有特殊需求，一般情况下应避免使用标签和类似 <code>goto</code> 的结构。</p></blockquote></li><li><h4 id="和-的区别？"><a href="#和-的区别？" class="headerlink" title="&amp;和&amp;&amp;的区别？"></a>&amp;和&amp;&amp;的区别？</h4><blockquote><p><code>&amp;</code> 和 <code>&amp;&amp;</code> 都是逻辑运算符，用于执行逻辑与操作，但它们之间有一些重要的区别：</p><ol><li><p><strong>&amp; （逻辑与）：</strong></p><ul><li><code>&amp;</code> 是一个按位逻辑与运算符。对于两个布尔表达式，无论第一个表达式的结果是什么，都会对两个表达式进行计算。即使第一个表达式的结果是 <code>false</code>，第二个表达式也会被计算。</li><li>例如：<code>true &amp; false</code> 的结果是 <code>false</code>，<code>false &amp; true</code> 的结果也是 <code>false</code>，即使第一个表达式是 <code>false</code>，第二个表达式仍然被计算。</li></ul></li><li><p><strong>&amp;&amp; （短路逻辑与）：</strong></p><ul><li><code>&amp;&amp;</code> 是一个短路逻辑与运算符。对于两个布尔表达式，如果第一个表达式的结果为 <code>false</code>，则不会对第二个表达式进行计算。只有当第一个表达式的结果为 <code>true</code> 时，才会继续计算第二个表达式。</li><li>例如：<code>true &amp;&amp; false</code> 的结果是 <code>false</code>，但是 <code>false &amp;&amp; true</code> 的结果是 <code>false</code>。在第一个表达式为 <code>false</code> 的情况下，第二个表达式不会被计算。</li></ul></li></ol><p><strong>总结：</strong></p><ul><li><code>&amp;</code> 是按位逻辑与运算符，无论第一个表达式的结果如何，都会对两个表达式进行计算。</li><li><code>&amp;&amp;</code> 是短路逻辑与运算符，如果第一个表达式的结果为 <code>false</code>，则不会对第二个表达式进行计算，只有当第一个表达式的结果为 <code>true</code> 时，才会继续计算第二个表达式。</li></ul><p>在大多数情况下，使用 <code>&amp;&amp;</code> 是更好的选择，因为它可以减少不必要的计算，提高代码效率。但在某些特殊情况下，如果需要对两个表达式都进行计算，才能达到所需的效果，那么可以使用 <code>&amp;</code> 运算符。</p></blockquote></li><li><h4 id="Math-round-11-5-等于多少？Math-round-11-5-等于多少？"><a href="#Math-round-11-5-等于多少？Math-round-11-5-等于多少？" class="headerlink" title="Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？"></a>Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？</h4><blockquote><p><code>Math.round(11.5)</code> 的结果是 <code>12</code>，<code>Math.round(-11.5)</code> 的结果是 <code>-11</code>。</p><p><code>Math.round()</code> 方法是 Java 中的一个数学工具方法，用于对浮点数进行四舍五入。其工作原理如下：</p><ul><li>对于正数：如果小数部分大于等于 0.5，则将整数部分加 1；否则，舍去小数部分，保留整数部分。</li><li>对于负数：如果小数部分的绝对值大于等于 0.5，则将整数部分减 1；否则，舍去小数部分，保留整数部分。</li></ul><p>所以，<code>Math.round(11.5)</code> 中小数部分是 <code>0.5</code>，所以结果为 <code>12</code>。而 <code>Math.round(-11.5)</code> 中小数部分的绝对值也是 <code>0.5</code>，所以结果为 <code>-11</code>。</p></blockquote></li><li><h4 id="什么是Java注释"><a href="#什么是Java注释" class="headerlink" title="什么是Java注释"></a>什么是Java注释</h4><blockquote><p>Java注释是在Java程序中用于添加说明、解释或文档化代码的特殊文本。它们不会被编译器编译成实际的可执行代码，而是在编译时被完全忽略。Java注释对于代码的可读性、维护性和文档生成至关重要。</p><p>Java中有三种主要类型的注释：</p><ol><li><strong>单行注释</strong>：以两个斜杠（&#x2F;&#x2F;）开头，后面跟着注释内容。单行注释仅适用于其后的一行代码。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 这是在代码行末尾的单行注释</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>多行注释</strong>：以斜杠和星号（&#x2F;<em>）开头，以星号和斜杠（</em>&#x2F;）结束，中间可以包含多行注释内容。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释的开始。</span></span><br><span class="line"><span class="comment">它可以跨越多行。</span></span><br><span class="line"><span class="comment">这是多行注释的结束。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>文档注释</strong>：以斜杠和两个星号（&#x2F;*<em>）开头，以星号和斜杠（</em>&#x2F;）结束。文档注释用于生成API文档，并支持一些特定的标记，如<code>@param</code>（方法参数说明）、<code>@return</code>（方法返回值说明）等。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是文档注释的示例。</span></span><br><span class="line"><span class="comment"> * 它可以用于生成API文档。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x 一个整数参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 参数的平方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档注释是用于生成代码文档的重要工具，通常由工具（如JavaDoc）解析，并生成用于代码库的文档。这有助于开发者更好地理解如何使用代码，以及每个方法、类和字段的功能。</p></blockquote></li><li><h4 id="Java有哪些数据类型"><a href="#Java有哪些数据类型" class="headerlink" title="Java有哪些数据类型"></a>Java有哪些数据类型</h4><blockquote><p>Java具有两种主要的数据类型分类：原始数据类型（Primitive Data Types）和引用数据类型（Reference Data Types）。</p><p><strong>原始数据类型（Primitive Data Types）</strong>：<br>这些数据类型是Java中最基本的数据类型，用于存储简单的值。原始数据类型分为以下几种：</p><ol><li><strong>byte</strong>：8位有符号整数，范围为 -128 到 127。</li><li><strong>short</strong>：16位有符号整数，范围为 -32,768 到 32,767。</li><li><strong>int</strong>：32位有符号整数，范围为 -2^31 到 2^31 - 1。</li><li><strong>long</strong>：64位有符号整数，范围为 -2^63 到 2^63 - 1。</li><li><strong>float</strong>：32位单精度浮点数，用于表示带小数部分的数字。</li><li><strong>double</strong>：64位双精度浮点数，更精确地表示带小数部分的数字。</li><li><strong>char</strong>：16位Unicode字符，用于表示单个字符。</li><li><strong>boolean</strong>：表示 true 或 false 值。</li></ol><p><strong>引用数据类型（Reference Data Types）</strong>：<br>这些数据类型用于引用对象，对象可以是类、接口、数组等。引用数据类型包括：</p><ol><li><strong>类（Class）</strong>：定义了对象的属性和方法，是面向对象编程的基本组成单元。</li><li><strong>接口（Interface）</strong>：定义了一组方法签名，实现类必须提供这些方法的具体实现。</li><li><strong>数组（Array）</strong>：用于存储相同类型的多个元素的数据结构。</li><li><strong>枚举（Enum）</strong>：一种特殊的类，表示一组预定义的常量。</li><li><strong>字符串（String）</strong>：表示文本，实际上是一个字符数组的对象。</li></ol><p>引用数据类型不直接存储数据，而是存储对数据的引用。它们允许在内存中动态分配和管理数据。例如，一个对象的实例会在堆内存中分配，然后通过引用访问。</p><p>使用这些数据类型，Java程序可以处理不同类型的数据，从简单的数字到复杂的对象。</p></blockquote></li><li><h4 id="final-有什么用？"><a href="#final-有什么用？" class="headerlink" title="final 有什么用？"></a>final 有什么用？</h4></li></ol><blockquote><p>在Java中，<code>final</code> 是一个关键字，用于声明某些实体具有不可变性或终态（finality）。它可以应用于变量、方法和类，具体用途如下：</p><ol><li><p><strong>Final 变量</strong>：</p><ul><li>当应用于变量时，<code>final</code> 关键字表示该变量的值一旦被赋值后就不能再被修改。这种变量也称为常量。</li><li>例如：<code>final int MAX_VALUE = 100;</code></li></ul></li><li><p><strong>Final 方法</strong>：</p><ul><li>当应用于方法时，<code>final</code> 关键字表示该方法不能被子类重写（覆盖）。</li><li>这在设计类的时候可以用来防止子类修改或覆盖某些关键的方法，以确保类的一致性和稳定性。</li></ul></li><li><p><strong>Final 类</strong>：</p><ul><li>当应用于类时，<code>final</code> 关键字表示该类不能被继承。即，其他类不能扩展（extend）这个被标记为 <code>final</code> 的类。</li><li>这通常用于表示一个类已经达到了某种完整性或安全性，不允许被修改或扩展。</li></ul></li></ol><p><code>final</code> 的主要用途包括：</p><ul><li><p><strong>安全性</strong>：通过将某些字段或方法标记为 <code>final</code>，可以确保它们的值或行为不会被修改，从而提高代码的安全性和可靠性。</p></li><li><p><strong>性能优化</strong>：在某些情况下，编译器可以根据 <code>final</code> 的限制进行优化，因为它知道某些值不会被修改，从而可以进行更有效的操作。</p></li><li><p><strong>文档化</strong>：通过使用 <code>final</code>，可以清晰地表达代码中的意图，例如指示某个类、方法或变量的预期用途。</p></li></ul><p>总之，<code>final</code> 关键字在Java中用于表示不可变性、终态和限制，有助于编写更安全、清晰和可维护的代码。</p></blockquote><ol start="12"><li><h4 id="final-finally-finalize的区别、"><a href="#final-finally-finalize的区别、" class="headerlink" title="final finally finalize的区别、"></a>final finally finalize的区别、</h4><blockquote><p><code>final</code>、<code>finally</code> 和 <code>finalize</code> 是三个在Java中具有不同含义和用途的关键字。它们分别用于表示不同的概念：</p><ol><li><p><strong>final</strong>：</p><ul><li><code>final</code> 是一个关键字，可以用于变量、方法和类。</li><li>当用于变量时，<code>final</code> 表示该变量的值一旦被赋值后就不能再被修改，它变成了一个常量。</li><li>当用于方法时，<code>final</code> 表示该方法不能被子类重写（覆盖）。</li><li>当用于类时，<code>final</code> 表示该类不能被继承，即不允许其他类扩展（extend）这个被标记为 <code>final</code> 的类。</li></ul></li><li><p><strong>finally</strong>：</p><ul><li><code>finally</code> 是一个关键字，用于与异常处理（try-catch）语句一起使用。</li><li><code>finally</code> 块中的代码始终会被执行，无论是否发生异常，它通常用于确保资源的释放和清理。</li><li>无论异常是否被捕获，<code>finally</code> 块都会在相关的 <code>try</code> 或 <code>catch</code> 块之后执行。</li></ul></li><li><p><strong>finalize</strong>：</p><ul><li><code>finalize</code> 是一个方法，定义在<code>java.lang.Object</code>类中。</li><li>它是一个垃圾回收器（Garbage Collector）相关的方法。当对象被垃圾回收器准备对其进行回收时，<code>finalize</code> 方法会被调用。</li><li>通常用于执行对象的资源释放和清理操作，但不推荐使用，因为它的调用时机不确定，可能会影响性能。</li></ul></li></ol><p>总结：</p><ul><li><code>final</code> 是用于变量、方法和类的关键字，用于表示不可修改、不可重写或不可继承的性质。</li><li><code>finally</code> 是用于异常处理的关键字，确保在发生异常或不发生异常的情况下都执行一段代码块。</li><li><code>finalize</code> 是<code>Object</code>类的一个方法，用于在对象被垃圾回收前执行资源清理操作，但不推荐使用。</li></ul><p>请注意，<code>finalize</code> 方法在Java 9 及以后的版本已经被标记为废弃（deprecated），因此在现代Java编程中，建议使用其他方式来管理资源和执行清理操作。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> 面试技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习</title>
      <link href="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Redis简介"><a href="#1-Redis简介" class="headerlink" title="1.  Redis简介"></a>1.  Redis简介</h1><p>   Redis（全称为Remote Dictionary Server）是一个开源的高性能键值  对存储系统，具有快速、灵活和可扩展的特性。它是一个基于内存的数据结构存储系统，可以用作数据库、缓存和消息代理。</p><h2 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2. 数据处理"></a>2. 数据处理</h2><p><strong>Redis中的键是区分大小写的</strong></p><ol><li><p>字符串String</p><p>Redis存储数据是以键值对的形式存储的，所以我们需要指定一个键和一个值。</p><p>可以使用SET命令来设置一个键值对。</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202023-08-23%20092711.png" class="" title="批注 2023-08-23 092711.png"><p>可以使用GET命令然后后面加上键的名称。</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202023-08-23%20093038.png" class="" title="批注 2023-08-23 093038.png"><p>可以使用DEL命令来删除一个键。</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202023-08-23%20093513.png" class="" title="批注 2023-08-23 093513.png"><p>可以使用EXISTS判断一个键是否存在。</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202023-08-23%20093714.png" class="" title="批注 2023-08-23 093714.png"><p>可以使用KEYS查找现有键</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202023-08-23%20093958.png" class="" title="批注 2023-08-23 093958.png"><p>可以使用TTl来查看一下name键的过期时间；可以使用EXPIRE来设置键值对的过期时间</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202023-08-23%20095802.png" class="" title="批注 2023-08-23 095802.png"><ol start="2"><li><p>列表List</p><p>一般用来存储和操作一组有顺序的数据。</p><p>可以使用LPUSH或者RPUSH命令来将元素添加到列表的头部或者尾部</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-24%20103306.png" class="" title="屏幕截图 2023-08-24 103306.png"><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-24%20103701.png" class="" title="屏幕截图 2023-08-24 103701.png"><p>可以使用LPOP和RPOP命令来分别从头部或者尾部删除元素</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-24%20103951.png" class="" title="屏幕截图 2023-08-24 103951.pn"></li></ol><p>可以使用LYRIM删除指定范围以外的元素</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-24%20104859.png" class="" title="屏幕截图 2023-08-24 104859.png"></li><li><p>SET是一种无序集合</p><ul><li>他和列表的区别在于列表中的元素都是可以重复的而SET中的元素是不能重复的</li><li>SET中的元素不像列表那样有序</li></ul></li></ol><p>​可以使用SADD来向SET中添加一个元素</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-25%20073659.png" class="" title="屏幕截图 2023-08-25 073659.png"><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-25%20074111.png" class="" title="屏幕截图 2023-08-25 074111.png"><p>可以使用SREM命令来删除集合中的元素</p><img src="/2023/08/23/Redis%E5%AD%A6%E4%B9%A0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-25%20074640.png" class="" title="屏幕截图 2023-08-25 074640.png">]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot学习</title>
      <link href="/2023/08/21/springboot%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/21/springboot%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-Boot概述"><a href="#1-Spring-Boot概述" class="headerlink" title="1. Spring Boot概述"></a>1. Spring Boot概述</h1><h2 id="1-Spring-Boot-概念"><a href="#1-Spring-Boot-概念" class="headerlink" title="1. Spring Boot 概念"></a>1. Spring Boot 概念</h2><p>SpringBoot提供了一种快速使用Spring的方式，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的功换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。2014年4月，Spring Boot 1.0.0发布Spring的顶级项目之-(<a href="https://spring.io)./">https://spring.io)。</a></p><h2 id="2-环境要求"><a href="#2-环境要求" class="headerlink" title="2. 环境要求"></a>2. 环境要求</h2><table><thead><tr><th>环境&amp;工具</th><th>版本（or later）</th></tr></thead><tbody><tr><td>SpringBoot</td><td>3.0.5+</td></tr><tr><td>IDEA</td><td>2021.2.1+</td></tr><tr><td>Java</td><td>17+</td></tr><tr><td>Maven</td><td>3.5+</td></tr><tr><td>Tomcat</td><td>10.0+</td></tr><tr><td>Servlet</td><td>5.0+</td></tr><tr><td>GraalVM Community</td><td>22.3+</td></tr><tr><td>Native Build Tools</td><td>0.9.19+</td></tr></tbody></table><h2 id="3-SpringBoot是什么"><a href="#3-SpringBoot是什么" class="headerlink" title="3. SpringBoot是什么"></a>3. SpringBoot是什么</h2><p>SpringBoot 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring 应用（说明：SpringBoot底层是Spring）</strong></p><p>大多数 SpringBoot 应用只需要编写少量配置即可快速整合 Spring 平台以及第三方技术</p><p><strong>特性：</strong></p><ul><li><p>快速创建独立 Spring 应用</p><ul><li>SSM：导包、写配置、启动运行</li></ul></li><li><p>直接嵌入Tomcat、Jetty or Undertow（无需部署 war 包）【Servlet容器】</p><ul><li>linux  java tomcat mysql： war 放到 tomcat 的 webapps下</li><li>jar： java环境；  java -jar</li></ul></li><li><p><strong>重点</strong>：提供可选的starter，简化应用<strong>整合</strong></p><ul><li><strong>场景启动器</strong>（starter）：web、json、邮件、oss（对象存储）、异步、定时任务、缓存…</li><li>导包一堆，控制好版本。</li><li>为每一种场景准备了一个依赖； <strong>web-starter、mybatis-starter</strong></li></ul></li><li><p><strong>重点：</strong>按需自动配置 Spring 以及 第三方库</p><ul><li>如果这些场景我要使用（生效）。这个场景的所有配置都会自动配置好。</li><li><strong>约定大于配置</strong>：每个场景都有很多默认配置。</li><li>自定义：配置文件中修改几项就可以</li></ul></li><li><p>提供生产级特性：如 监控指标、健康检查、外部化配置等</p><ul><li>监控指标、健康检查（k8s）、外部化配置</li></ul></li><li><p>无代码生成、无xml</p><p>总结 ： 简化开发，简化配置，简化整合，简化部署，简化监控，简化运维。</p></li></ul><h1 id="2-快速体验"><a href="#2-快速体验" class="headerlink" title="2. 快速体验"></a>2. 快速体验</h1><p>需求： 浏览器发送**&#x2F;hello**请求，返回”<strong>Hello,Spring Boot 3!</strong>“</p><h2 id="1-开发流程"><a href="#1-开发流程" class="headerlink" title="1. 开发流程"></a>1. 开发流程</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>maven项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    所有springboot项目都必须继承自 spring-boot-starter-parent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-导入场景"><a href="#2-导入场景" class="headerlink" title="2. 导入场景"></a>2. 导入场景</h3><p>场景启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        web开发的场景启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-主程序"><a href="#3-主程序" class="headerlink" title="3. 主程序"></a>3. 主程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">//这是一个SpringBoot应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-业务层"><a href="#4-业务层" class="headerlink" title="4. 业务层"></a>4. 业务层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span><span class="comment">//ResponseBody的作用其实是将java对象转为json格式的数据。简单来说，不管注解下面标注的方法返回值是什么，最终都要以json数据格式返回到客户端（浏览器页面）。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,Spring Boot 3!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h3><p>默认启动访问： localhost:8080</p><h3 id="6-打包"><a href="#6-打包" class="headerlink" title="6. 打包"></a>6. 打包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    SpringBoot应用打包插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>mvn clean package</code>把项目打成可执行的jar包</p><p><code>java -jar demo.jar</code>启动项目</p><h3 id="3-特性小结"><a href="#3-特性小结" class="headerlink" title="3. 特性小结"></a>3. 特性小结</h3><h4 id="1-简化整合"><a href="#1-简化整合" class="headerlink" title="1. 简化整合"></a>1. 简化整合</h4><p>导入相关的场景，拥有相关的功能。场景启动器</p><p>默认支持的所有场景：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></p><ul><li>官方提供的场景：命名为：<code>spring-boot-starter-*</code></li><li>第三方提供场景：命名为：<code>*-spring-boot-starter</code></li></ul><p><strong>场景一导入，万物皆就绪。</strong></p><h4 id="2-简化开发"><a href="#2-简化开发" class="headerlink" title="2. 简化开发"></a>2. 简化开发</h4><p>无需编写任何配置，直接开发业务</p><h4 id="3-简化配置"><a href="#3-简化配置" class="headerlink" title="3. 简化配置"></a>3. 简化配置</h4><p><code>application.properties</code>：</p><ul><li><p>集中式管理配置。只需要修改这个文件就行 。</p></li><li><p>配置基本都有默认值</p></li><li><p>能写的所有配置都在： <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</a></p></li></ul><h4 id="4-简化部署"><a href="#4-简化部署" class="headerlink" title="4. 简化部署"></a>4. 简化部署</h4><p>打包为可执行的jar包。</p><p>linux服务器上有java环境。</p><h4 id="5-简化运维"><a href="#5-简化运维" class="headerlink" title="5. 简化运维"></a>5. 简化运维</h4><p>   修改配置（外部放一个application.properties文件）、监控、健康检查。</p><h1 id="3-Spring-Initializr-创建向导"><a href="#3-Spring-Initializr-创建向导" class="headerlink" title="3. Spring Initializr 创建向导"></a>3. Spring Initializr 创建向导</h1><p>一键创建好整个项目结构</p><img src="/2023/08/21/springboot%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202023-08-21%20231801.png" class="" title="批注 2023-08-21 231801"><h1 id="4-应用分析"><a href="#4-应用分析" class="headerlink" title="4. 应用分析"></a>4. 应用分析</h1><h2 id="1-依赖管理机制"><a href="#1-依赖管理机制" class="headerlink" title="1. 依赖管理机制"></a>1. 依赖管理机制</h2><p>思考：</p><p>1、为什么导入<code>starter-web</code>所有相关依赖都导入进来？</p><ul><li>开发什么场景，导入什么<strong>场景启动器。</strong></li><li><strong>maven依赖传递原则。A-B-C： A就拥有B和C</strong></li><li>导入 场景启动器。 场景启动器 自动把这个场景的所有核心依赖全部导入进来</li></ul><p>2、为什么版本号都不用写？</p><ul><li>每个boot项目都有一个父项目<code>spring-boot-starter-parent</code></li><li>parent的父项目是<code>spring-boot-dependencies</code></li><li>父项目 <strong>版本仲裁中心</strong>，把所有常见的jar的依赖版本都声明好了。</li><li>比如：<code>mysql-connector-j</code></li></ul><p>3、自定义版本号</p><ul><li><p>利用maven的就近原则</p><ul><li><p>直接在当前项目<code>properties</code>标签中声明父项目用的版本属性的key</p></li><li><p>直接在<strong>导入依赖的时候声明版本</strong></p></li></ul></li></ul><ol start="4"><li><p>第三方的Jar包<br>boot父项目没有管理的需要自行声明好</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-自动配置机制"><a href="#2-自动配置机制" class="headerlink" title="2.自动配置机制"></a>2.自动配置机制</h2><h3 id="1-初步了解"><a href="#1-初步了解" class="headerlink" title="1. 初步了解"></a>1. 初步了解</h3><ul><li><strong>自动配置</strong>的 Tomcat、SpringMVC 等<ul><li><strong>导入场景</strong>，容器中就会自动配置好这个场景的核心组件。</li><li>以前：DispatcherServlet、ViewResolver、CharacterEncodingFilter….</li><li>现在：自动配置好的这些组件</li><li>验证：<strong>容器中有了什么组件，就具有什么功能</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//java10： 局部变量类型的自动推断</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">ioc</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    <span class="comment">//1、获取容器中所有组件的名字</span></span><br><span class="line">    String[] names = ioc.getBeanDefinitionNames();</span><br><span class="line">    <span class="comment">//2、挨个遍历：</span></span><br><span class="line">    <span class="comment">// dispatcherServlet、beanNameViewResolver、characterEncodingFilter、multipartResolver</span></span><br><span class="line">    <span class="comment">// SpringBoot把以前配置的核心组件现在都给我们自动配置好了。</span></span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/08/21/springboot%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202023-08-22%20001029.png" class="" title="批注 2023-08-22 001029"><ul><li><p><strong>默认的包扫描规则</strong></p><ul><li><p><code>@SpringBootApplication</code> 标注的类就是主程序类</p></li><li><p><strong>SpringBoot只会扫描主程序所在的包及其下面的子包，自动的component-scan功能</strong></p></li><li><p><strong>自定义扫描路径</strong></p><ul><li><pre><code class="Java">SpringBootApplication(scanBasePackages = &quot;com.magichell&quot;) <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    - `@ComponentScan(&quot;com.magichell&quot;)` 直接指定扫描的路径</span><br><span class="line"></span><br><span class="line">- **配置默认值**</span><br><span class="line"></span><br><span class="line">  - **配置文件**的所有配置项是和某个**类的对象**值进行一一绑定的。</span><br><span class="line">  - 绑定了配置文件中每一项值的类： **属性类**。</span><br><span class="line">  - 比如：</span><br><span class="line"></span><br><span class="line">- `ServerProperties`绑定了所有Tomcat服务器有关的配置</span><br><span class="line">    - `MultipartProperties`绑定了所有文件上传相关的配置</span><br><span class="line">    - ....参照[官方文档](https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server)：或者参照 绑定的  **属性类**。</span><br><span class="line"></span><br><span class="line">- 按需加载自动配置</span><br><span class="line"></span><br><span class="line">  - 导入场景`spring-boot-starter-web`</span><br><span class="line">  - 场景启动器除了会导入相关功能依赖，导入一个`spring-boot-starter`，是所有`starter`的`starter`，基础核心starter</span><br><span class="line">  - `spring-boot-starter`导入了一个包 `spring-boot-autoconfigure`。包里面都是各种场景的`AutoConfiguration`**自动配置类**</span><br><span class="line">  - 虽然全场景的自动配置都在 `spring-boot-autoconfigure`这个包，但是不是全都开启的。</span><br><span class="line"></span><br><span class="line">- 导入哪个场景就开启哪个自动配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结： 导入场景启动器、触发 `spring-boot-autoconfigure`这个包的自动配置生效、容器中就会具有相关场景的功能</span><br><span class="line">### 2. 完整流程</span><br><span class="line"></span><br><span class="line">&gt; 思考：</span><br><span class="line">&gt;</span><br><span class="line">&gt; **1、SpringBoot怎么实现导一个**`**starter**`**、写一些简单配置，应用就能跑起来，我们无需关心整合**</span><br><span class="line">&gt;</span><br><span class="line">&gt; 2、为什么Tomcat的端口号可以配置在`application.properties`中，并且`Tomcat`能启动成功？</span><br><span class="line">&gt;</span><br><span class="line">&gt; 3、导入场景后哪些**自动配置能生效**？</span><br><span class="line"></span><br><span class="line">***自动配置流程细节梳理：***</span><br><span class="line"></span><br><span class="line">**1、**导入`starter-web`：导入了web开发场景</span><br><span class="line"></span><br><span class="line">- 1、场景启动器导入了相关场景的所有依赖：`starter-json`、`starter-tomcat`、`springmvc`</span><br><span class="line">- 2、每个场景启动器都引入了一个`spring-boot-starter`，核心场景启动器。</span><br><span class="line">- 3、**核心场景启动器**引入了`spring-boot-autoconfigure`包。</span><br><span class="line">- 4、`spring-boot-autoconfigure`里面囊括了所有场景的所有配置。</span><br><span class="line">- 5、只要这个包下的所有类都能生效，那么相当于SpringBoot官方写好的整合功能就生效了。</span><br><span class="line">- 6、SpringBoot默认却扫描不到 `spring-boot-autoconfigure`下写好的所有**配置类**。（这些**配置类**给我们做了整合操作），**默认只扫描主程序所在的包**。</span><br><span class="line"></span><br><span class="line">**2、****主程序**：`@SpringBootApplication`</span><br><span class="line"></span><br><span class="line">- 1、`@SpringBootApplication`由三个注解组成`@SpringBootConfiguration`、`@EnableAutoConfiguratio`、`@ComponentScan`</span><br><span class="line">- 2、SpringBoot默认只能扫描自己主程序所在的包及其下面的子包，扫描不到 `spring-boot-autoconfigure`包中官方写好的**配置类**</span><br><span class="line">- 3、`**@EnableAutoConfiguration**`：SpringBoot **开启自动配置的核心**。</span><br><span class="line"></span><br><span class="line">- - 1. 是由`@Import(AutoConfigurationImportSelector.class)`提供功能：批量给容器中导入组件。</span><br><span class="line">  - 2. pringBoot启动会默认加载 142个配置类。</span><br><span class="line">  - 3. 这**142个配置类**来自于`spring-boot-autoconfigure`下 `META-INF/spring/**org.springframework.boot.autoconfigure.AutoConfiguration**.imports`文件指定的</span><br><span class="line">  - 4. 项目启动的时候利用 @Import 批量导入组件机制把 `autoconfigure` 包下的142 `xxxxAutoConfiguration`类导入进来（**自动配置类**）</span><br><span class="line">  - 5. 虽然导入了`142`个自动配置类</span><br><span class="line"></span><br><span class="line">- 4、按需生效：</span><br><span class="line"></span><br><span class="line">- - 并不是这`142`个自动配置类都能生效</span><br><span class="line">  - 每一个自动配置类，都有条件注解`@ConditionalOnxxx`，只有条件成立，才能生效 </span><br><span class="line"></span><br><span class="line">**3、**xxxxAutoConfiguration**自动配置类**</span><br><span class="line"></span><br><span class="line">- **1、给容器中使用@Bean 放一堆组件。**</span><br><span class="line">- 2、每个**自动配置类**都可能有这个注解`@EnableConfigurationProperties(**ServerProperties**.class)`，用来把配置文件中配的指定前缀的属性值封装到 `xxxProperties`**属性类**中</span><br><span class="line">- 3、以Tomcat为例：把服务器的所有配置都是以`server`开头的。配置都封装到了属性类中。</span><br><span class="line">- 4、给**容器**中放的所有**组件**的一些**核心参数**，都来自于`**xxxProperties**`**。**`**xxxProperties**`**都是和配置文件绑定。**</span><br><span class="line">- **只需要改配置文件的值，核心组件的底层参数都能修改**</span><br><span class="line"></span><br><span class="line">**4、**写业务，全程无需关心各种整合（底层这些整合写好了，而且也生效了）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**核心流程总结：**</span><br><span class="line"></span><br><span class="line">1、导入`starter`，就会导入`autoconfigure`包。</span><br><span class="line"></span><br><span class="line">2、`autoconfigure` 包里面 有一个文件 `META-INF/spring/**org.springframework.boot.autoconfigure.AutoConfiguration**.imports`,里面指定的所有启动要加载的自动配置类</span><br><span class="line"></span><br><span class="line">3、@EnableAutoConfiguration 会自动的把上面文件里面写的所有**自动配置类都导入进来。xxxAutoConfiguration 是有条件注解进行按需加载**</span><br><span class="line"></span><br><span class="line">4、`xxxAutoConfiguration`给容器中导入一堆组件，组件都是从 `xxxProperties`中提取属性值</span><br><span class="line"></span><br><span class="line">5、`xxxProperties`又是和**配置文件**进行了绑定</span><br><span class="line"></span><br><span class="line">**效果：**导入`starter`、修改配置文件，就能修改底层行为。</span><br><span class="line"></span><br><span class="line"># 5. 核心技能</span><br><span class="line"></span><br><span class="line">## 1. 常用注解</span><br><span class="line"></span><br><span class="line">&gt; SpringBoot摒弃XML配置方式，改为**全注解驱动**</span><br><span class="line"></span><br><span class="line">### 1. 组件注册</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Configuration、@SpringBootConfiguration</span><br><span class="line">@Bean、@Scope</span><br><span class="line">@Controller、 @Service、@Repository、@Component</span><br><span class="line">@Import</span><br><span class="line">@ComponentScan</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><p>步骤：</p><p><strong>1、@Configuration 编写一个配置类</strong></p><p><strong>2、在配置类中，自定义方法给容器中注册组件。配合@Bean</strong></p><p><strong>3、或使用@Import 导入第三方的组件</strong></p><h3 id="2-条件注解"><a href="#2-条件注解" class="headerlink" title="2. 条件注解"></a>2. 条件注解</h3><p>如果注解指定的<strong>条件成立</strong>，则触发指定行为</p><p><em><strong>@ConditionalOnXxx</strong></em></p><p><strong>@ConditionalOnClass：如果类路径中存在这个类，则触发指定行为</strong></p><p><strong>@ConditionalOnMissingClass：如果类路径中不存在这个类，则触发指定行为</strong></p><p><strong>@ConditionalOnBean：如果容器中存在这个Bean（组件），则触发指定行为</strong></p><p><strong>@ConditionalOnMissingBean：如果容器中不存在这个Bean（组件），则触发指定行为</strong></p><p>场景：</p><ul><li>如果存在<code>FastsqlException</code>这个类，给容器中放一个<code>Cat</code>组件，名cat01，</li><li>否则，就给容器中放一个<code>Dog</code>组件，名dog01</li><li>如果系统中有<code>dog01</code>这个组件，就给容器中放一个 User组件，名zhangsan </li><li>否则，就放一个User，名叫lisi</li></ul><p><strong>@ConditionalOnBean（value&#x3D;组件类型，name&#x3D;组件名字）：判断容器中是否有这个类型的组件，并且名字是指定的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnRepositoryType</span> (org.springframework.boot.autoconfigure.data)</span><br><span class="line"><span class="meta">@ConditionalOnDefaultWebSecurity</span> (org.springframework.boot.autoconfigure.security)</span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> (org.springframework. boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnWarDeployment</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnJndi</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnResource</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnExpression</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnEnabledResourceChain</span> (org.springframework.boot.autoconfigure.web)</span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnNotWebApplication</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnCloudPlatform</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span> (org.springframework.boot.autoconfigure.condition)</span><br><span class="line"><span class="meta">@ConditionalOnMissingFilterBean</span> (org.springframework.boot.autoconfigure.web.servlet)</span><br><span class="line"><span class="meta">@Profile</span> (org.springframework.context.annotation)</span><br><span class="line"><span class="meta">@ConditionalOnInitializedRestarter</span> (org.springframework.boot.devtools.restart)</span><br><span class="line"><span class="meta">@ConditionalOnGraphQlSchema</span> (org.springframework.boot.autoconfigure.graphql)</span><br><span class="line"><span class="meta">@ConditionalOnJava</span> (org.springframework.boot.autoconfigure.condition)</span><br></pre></td></tr></table></figure><h3 id="3-属性绑定"><a href="#3-属性绑定" class="headerlink" title="3. 属性绑定"></a>3. 属性绑定</h3><p><strong>@ConfigurationProperties： 声明组件的属性和配置文件哪些前缀开始项进行绑定</strong></p><p><strong>@EnableConfigurationProperties：快速注册注解：</strong></p><ul><li><strong>场景：</strong>SpringBoot默认只扫描自己主程序所在的包。如果导入第三方包，即使组件上标注了 @Component、@ConfigurationProperties 注解，也没用。因为组件都扫描不进来，此时使用这个注解就可以快速进行属性绑定并把组件注册进容器</li></ul><p>将容器中任意<strong>组件（Bean）的属性值</strong>和<strong>配置文件</strong>的配置项的值<strong>进行绑定</strong></p><ul><li><strong>1、给容器中注册组件（@Component、@Bean）</strong></li><li><strong>2、使用</strong>@ConfigurationProperties 声明组件和配置文件的哪些配置项进行绑定</li></ul><h3 id="4-YAML配置文件"><a href="#4-YAML配置文件" class="headerlink" title="4. YAML配置文件"></a>4. YAML配置文件</h3><blockquote><p><strong>痛点</strong>：SpringBoot 集中化管理配置，<code>application.properties</code></p><p><strong>问题</strong>：配置多以后难阅读和修改，<strong>层级结构辨识度不高</strong></p></blockquote><blockquote><p>YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言）。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（是另一种标记语言）。</p><ul><li>设计目标，就是<strong>方便人类读写</strong></li><li><strong>层次分明</strong>，更适合做配置文件</li><li>使用<code>.yaml</code>或 <code>.yml</code>作为文件后缀</li></ul></blockquote><p>基本语法：</p><ul><li><strong>大小写敏感</strong></li><li>使用<strong>缩进表示层级关系，k: v，使用空格分割k,v</strong></li><li>缩进时不允许使用Tab键，只允许<strong>使用空格</strong>。换行</li><li>缩进的空格数目不重要，只要<strong>相同层级</strong>的元素<strong>左侧对齐</strong>即可</li><li><strong># 表示注释</strong>，从这个字符一直到行尾，都会被解析器忽略。</li></ul><p>支持的语法：</p><ul><li><strong>对象</strong>：<strong>键值对</strong>的集合，如：映射（map）&#x2F; 哈希（hash） &#x2F; 字典（dictionary）</li><li><strong>数组</strong>：一组按次序排列的值，如：序列（sequence） &#x2F; 列表（list）</li><li><strong>纯量</strong>：单个的、不可再分的值，如：字符串、数字、bool、日期</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML学习</title>
      <link href="/2023/08/19/UML%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/19/UML%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章选择题"><a href="#第一章选择题" class="headerlink" title="第一章选择题"></a>第一章选择题</h1><ol><li><p>(单选题)什么不是面向对象程序设计的主要特征。（D）<br>A. 封装<br>B. 多态<br>C. 继承<br>D. 结构</p></li><li><p>(单选题)封装是一种（D）技术。<br>A. 组装<br>B. 产品化<br>C. 固化<br>D. 信息隐藏</p></li><li><p>(单选题)封装的目的是使对象的（A）分离。<br>A. 定义和实现<br>B. 设计和测试<br>C. 设计和实现<br>D. 分析和定义</p></li><li><p>(单选题)下列选项中不属于面向对象方法的优势之一的是（C）<br>A. 复用性强<br>B. 改善了软件结构<br>C. 软件的执行效率更高<br>D. 抽象更符合人类的思维习惯</p></li><li><p>(单选题)（A）是面向对象方法中用来描述“对客户隐藏对象属性和实现细节”的概念。<br>A. 封装<br>B. 继承<br>C. 多态<br>D. 抽象</p></li><li><p>(单选题)软件工程的概念是在（B）年被首次提出的。<br>A. 1949<br>B. 1968<br>C. 1972<br>D. 1989</p></li><li><p>(单选题)下列不属于软件工程的目标的一项是（C）<br>A. 提高软件产品的质量<br>B. 提高软件产品的可靠性<br>C. 减少软件产品的需求<br>D. 控制软件产品的开发成本</p></li><li><p>(单选题)软件危机产生的主要原因是（D）<br>A. 软件工具落后<br>B. 软件生产能力不足<br>C. 对软件认识不够<br>D. 软件本身的特点与开发方法</p></li></ol><h1 id="第二章选择题"><a href="#第二章选择题" class="headerlink" title="第二章选择题"></a>第二章选择题</h1><ol><li><p>(单选题)UML的全称是（B）<br>A. Unify Modeling Language<br>B. Unified Modeling Language<br>C. Unified Modem Language<br>D. Unified Making Language</p></li><li><p>(单选题)OMT方法是由下面哪位科学家提出的？（B）<br>A. Booch<br>B. Rumbaugh<br>C. Coad<br>D. Jacobson</p></li><li><p>(单选题)什么概念被认为是第二代面向对象技术的标志？（A）<br>A. 用例<br>B. UML语言<br>C. 活动图<br>D. 组件图</p></li><li><p>(单选题)正式的UML2.0规范是在（C）年通过的。<br>A. 2001<br>B. 2003<br>C. 2005<br>D. 2007</p></li><li><p>(单选题)下列表述中不属于UML的目标的是（C）<br>A. 为建模者提供可用的、富有表达力的、可视化的建模语言<br>B. 支持独立于编程语言和开发过程的规范<br>C. 称为一门独立的编程语言<br>D. 推动面向对象建模工具市场的成长</p></li><li><p>(单选题)UML主要用于（D）<br>A. 基于螺旋模型的结构化开发方法<br>B. 基于需求动态定义的原型化方法<br>C. 基于数据的数据流开发方法<br>D. 基于对象的面向对象的方法</p></li><li><p>(单选题)下面面向对象方法中不是UML所融合的方法的一项是（D）<br>A. Booch<br>B. OOSE<br>C. OMT<br>D. Coad&#x2F;Yourdon</p></li><li><p>(单选题)下列关于模型的表述，不正确的一项是（A）<br>A. 建模语言只能用图形表示<br>B. 模型所描绘的系统蓝图既可以包括详细的计划，也可以包括系统的总体规划<br>C. 模型可以帮助开发组生成有用的工作产品<br>D. 最好的模型总是与现实世界联系密切</p></li></ol><h1 id="第三章选择题"><a href="#第三章选择题" class="headerlink" title="第三章选择题"></a>第三章选择题</h1><ol><li><p>(单选题)类图应该画在Rose的哪种视图中？（B）<br>A. Use Case View<br>B. Logic View<br>C. Component View<br>D. Deployment View</p></li><li><p>(单选题)下面哪个不是UML中的静态视图？（A）<br>A. 状态图<br>B. 用例图<br>C. 对象图<br>D. 类图</p></li><li><p>(单选题)在UML中，（B）图显示了一组类、接口、协作以及他们之间的关系。<br>A. 状态图<br>B. 类图<br>C. 用例图<br>D. 部署图</p></li><li><p>(单选题)UML中有四种关系是：依赖、泛化、关联和（C）<br>A. 继承<br>B. 合作<br>C. 实现<br>D. 抽象</p></li><li><p>(单选题)UML中的事物包括：结构事物、分组事物、注释事物和（D）<br>A. 实体事物<br>B. 边界事物<br>C. 控制事物<br>D. 动作事物</p></li><li><p>(单选题)UML体系包括三个部分：UML基本构造块，（A）和UML公共机制<br>A. UML规则<br>B. UML命名<br>C. UML模型<br>D. UML约束</p></li><li><p>(单选题)下列描述中，哪个不是建模的基本原则。（D）<br>A. 要仔细的选择模型<br>B. 每一种模型可以在不同的精度级别上表示所要开发的系统<br>C. 模型要与现实相联系<br>D. 对一个重要的系统用一个模型就可以充分描述</p></li><li><p>(单选题)在 ROSE中，时序图和协作图（或通信图）通常建立在  (  B ) 下的Use Case Realization包中。<br>A. Use Case View<br>B. Logical View<br>C. Component View<br>D. Deployment View</p></li><li><p>(单选题)下面哪个视图属于UML语言的交互图？（D）<br>A. 行为图<br>B. 状态图<br>C. 实现图<br>D. 顺序图</p></li><li><p>(单选题)领域模型又称为（C）<br>A. 业务流程模型<br>B. 用例模型<br>C. 概念模型<br>D. 设计模型</p></li><li><p>(单选题)UML图不包括（D）<br>A. 用例图<br>B. 类图<br>C. 状态图<br>D. 流程图</p></li><li><p>(单选题)当需要表示某个元素的特性信息时，可以使用（D）这种扩展机制。<br>A. 约束<br>B. 构造型<br>C. 注释<br>D. 标记值</p></li><li><p>(单选题)在“4+1”架构中，（B）主要用来描述软件的各个模块的组织方式。<br>A. 逻辑视图<br>B. 开发视图<br>C. 进程视图<br>D. 物理视图</p></li><li><p>(单选题)UML使用（D）来描述接口和实现接口的类之间的关系。<br>A. 关联关系<br>B. 泛化关系<br>C. 依赖关系<br>D. 实现关系</p></li><li><p>(单选题)下列UML图中不属于结构图的一项是（D）。<br>A. 类图<br>B. 对象图<br>C. 组件图<br>D. 顺序图</p></li><li><p>(单选题)下列UML图中不是UML 2.0规范新增加的图的一项是（A）。<br>A. 类图<br>B. 交互概览图<br>C. 组合结构图<br>D. 时序图</p></li><li><p>(单选题)下列选项中不属于UML的扩展机制的是（C）。<br>A. 约束<br>B. 构造型<br>C. 注释<br>D. 标记值</p></li><li><p>(单选题)描述了一组动作序列的模型元素是（C）。<br>A. 类<br>B. 接口<br>C. 用例<br>D. 组件</p></li><li><p>(单选题)在UML中表示一般事物与特殊事物之间的关系是（B）。<br>A. 关联关系<br>B. 泛化关系<br>C. 依赖关系<br>D. 实现关系</p></li><li><p>(单选题)我们可以使用UML中的（A）来描述图书馆与书的关系。<br>A. 关联关系<br>B. 泛化关系<br>C. 依赖关系<br>D. 实现关系</p></li></ol><h1 id="第四章选择题"><a href="#第四章选择题" class="headerlink" title="第四章选择题"></a>第四章选择题</h1><ol><li><p>(单选题)用例（Use-case）用来描述系统在事件做出响应时所采取的行动。用例之间是具有相关性的。在一个“订单输入子系统”中，创建新订单和更新订单都需要检查用户帐号是否正确。那么，用例“创建新订单”、“更新订单”与用例“检查用户帐号”之间是（　A　）关系<br>A. 包含（include）<br>B. 扩展（extend）<br>C. 分类（classification）<br>D. 聚集（aggregation）</p></li><li><p>(单选题)UML中，对象行为是通过交互来实现的，是对象间为完成某一目的而进行的一系列消息交换。消息序列可用两种类来表示，分别是（　D　）<br>A. 状态图和顺序图<br>B. 活动图和协作图<br>C. 状态图和活动图<br>D. 顺序图和协作图</p></li><li><p>(单选题)UML中，用例图展示了外部Actor与系统所提供的用例之间的连接，UML中的外部Actor是指（　　D　）<br>A. 人员<br>B. 单位<br>C. 人员和单位<br>D. 人员和外部系统</p></li><li><p>(单选题)<br>下图中的空心箭头连线表示（ A   ）关系。<br><img src="https://img-blog.csdnimg.cn/7008f74b68c94fce9f30ffc49817844e.png" alt="在这里插入图片描述"><br>A. 泛化<br>B. 包含<br>C. 扩展<br>D. 实现</p></li><li><p>(单选题)在用例之间，会有三种不同的关系，下列不是用例之间关系的是（    D   ）。<br>A. 包含（include）<br>B. 扩展（extend）<br>C. 泛化（generalization）<br>D. 关联（connect ）</p></li><li><p>(单选题)在ATM自动取款机的工作模型中（用户通过输入正确的用户资料，从银行取钱的过程），下面不是“Actor”的是（    D  ）。<br>A. 用户<br>B. ATM提款机<br>C. ATM提款机管理员<br>D. 取款</p></li><li><p>(单选题)下面不属于用例之间关系的是（A）<br>A. 友元<br>B. 扩展<br>C. 包含<br>D. 泛化</p></li><li><p>(单选题)在建立系统的用例模型时，首先应该确定系统的参与者。以下问题中，对于确定参与者没有用处的是 (  C ) 。<br>A. 谁是系统的主要用户，即谁使用系统的主要功能<br>B. 谁来管理、维护系统，以保证系统的正常运行<br>C. 系统的功能应如何实现<br>D. 系统需要和哪些其他的系统交互</p></li><li><p>(单选题)执行者（Actor）与用例之间的关系是（C）<br>A. 包含关系<br>B. 泛化关系<br>C. 关联关系<br>D. 扩展关系</p></li><li><p>(单选题)包含关系是在（C）关系的基础上通过添加构造型实现的。<br>A. 关联关系<br>B. 泛化关系<br>C. 依赖关系<br>D. 实现关系</p></li><li><p>(单选题)下面不属于用例图的作用的是（B）。<br>A. 展示软件的功能<br>B. 展示软件的特性<br>C. 展示软件使用者与软件功能的关系<br>D. 展示软件功能之间的关系</p></li><li><p>(单选题)下列不属于构成用例图的要素是（A）<br>A. 包含<br>B. 参与者<br>C. 用例<br>D. 关系</p></li><li><p>(单选题)对于ATM系统的“取款”用例（客户通过插入银行卡并输入正确的密码从ATM机中成功取款的过程），（C）应该作为该用例的参与者。<br>A. ATM机<br>B. 银行工作人员<br>C. 取款客户<br>D. 取款</p></li><li><p>(单选题)下列关于用例图的描述，错误的是（D）<br>A. 用例图表示系统的行为<br>B. 用例在用例图中使用椭圆表示<br>C. 参与者在用例图中使用小人表示<br>D. 一般使用从用例指向参与者的箭头表示启动关系</p></li><li><p>(单选题)在进行某网上商店的用例图绘制时，（A）是一个不合适的用例。<br>A. 打开页面<br>B. 购买商品<br>C. 管理订单<br>D. 搜索商品</p></li><li><p>(单选题)下列说法中，不正确的是（B）<br>A. 用例和参与者之间的对应关系是关联关系，它表示参与者使用了系统的用例<br>B. 参与者指的是人，不能是子系统和时间等概念<br>C. 特殊需求指的是一个用例的非功能需求和设计约束<br>D. 在扩展关系中，基础用例提供了一个或多个插入点，扩展用例在这些插入点中提供了另外的行为</p></li><li><p>(单选题)以下各项中，（B）不是用例图适于表达的内容。<br>A. 参与者<br>B. 事件流<br>C. 用例关系<br>D. 系统边界</p></li></ol><h1 id="第五章选择题"><a href="#第五章选择题" class="headerlink" title="第五章选择题"></a>第五章选择题</h1><ol><li><p>(单选题)下列关于类方法的声明，不正确的是（C）<br>A. 方法定义了类所许可的行动<br>B. 从一个类所创建的所有对象可以使用同一组属性和方法<br>C. 每个方法应该有一个参数<br>D. 如果在同一个类中定义了类似的操作，则他们的行为应该是类似的</p></li><li><p>(单选题)类通常可以分为实体类，（  C   ）和边界类。<br>A. 父类<br>B. 子类<br>C. 控制类<br>D. 祖先类</p></li><li><p>(单选题)通常对象有很多属性，下面仅能在对象内部访问的属性可见性限制是（D）<br>A. public<br>B. protected<br>C. friendly<br>D. private</p></li><li><p>(单选题)类的结构是（D）。<br>A. 由代码来表示<br>B. 由属性和关系来表示<br>C. 由操作来表示<br>D. B&amp;C</p></li><li><p>(单选题)类的行为是（A）<br>A. 由一组操作决定<br>B. 由类的属性决定<br>C. 对类的每一个对象唯一的<br>D. 由父类决定</p></li><li><p>(单选题)在类图中，下面哪个符号表示继承关系（C）</p></li></ol><p>A. <img src="https://img-blog.csdnimg.cn/5b6c8d06d7c2436080547cba4a76c148.png" alt="在这里插入图片描述"><br>B. <img src="https://img-blog.csdnimg.cn/f08db98d84254ccd947348f5be9a7471.png" alt="在这里插入图片描述"></p><p>C. <img src="https://img-blog.csdnimg.cn/d2e25cbf35214adfbcc8279c3b33d1d2.png" alt="在这里插入图片描述"></p><p>D. <img src="https://img-blog.csdnimg.cn/d1e6a9e8a4374015be87e942d76de503.png" alt="在这里插入图片描述"></p><ol start="7"><li><p>(单选题)下面的(A)模式将对象组合成树形结构以表示“部分-整体”的层次结构，并使得用户对单个对象和组合对象的使用具有一致性。<br>A. 组合（Composite）<br>B. 桥接（Bridge）<br>C. 修饰（Decorator）<br>D. 外观（Facade）</p></li><li><p>(单选题)如下的短语(B)能最好地表示“泛化”关系。<br>A. is a part of<br>B. is a kind of<br>C. is a replica of<br>D. is an inheritance of</p></li><li><p>(单选题)类A的一个操作调用类B的一个操作，且这两个类之间不存在其他关系，那么类A和类B之间是  (  C   )  关系。<br>A. 实现<br>B. 继承<br>C. 依赖<br>D. 关联</p></li><li><p>(单选题)在用ROSE创建的类图中，“#”表示的可见性是(B)<br>A. public<br>B. protected<br>C. private<br>D. package</p></li><li><p>(单选题)UML中关联的多重度是指(B)<br>A. 一个类有多个方法被另一个类调用<br>B. 一个类的实体类能够与另一个类的多个实体类相关联<br>C. 一个类的某个方法被另一个类调用的次数<br>D. 两个类所具有的相同的方法和属性</p></li><li><p>(单选题)类之间的关系不包括（D）<br>A. 依赖关系<br>B. 泛化关系<br>C. 实现关系<br>D. 分解关系</p></li><li><p>(单选题)类图应该画在ROSE的哪种（  B ）视图中。<br>A. Use Case View<br>B. Logic View<br>C. Component View<br>D. Department View</p></li><li><p>(单选题)汽车（Car）由轮子、发动机、油箱、座椅、方向盘等组成，那么Car类和其他类（Wheel、Engin、Tank、Chair、SteeringWheel）之间的关系是（A）。<br>A. 关联关系<br>B. 泛化关系<br>C. 实现关系<br>D. 依赖关系</p></li><li><p>(单选题)假设类A的一个操作的其中一个参数是类B的一个对象，且这两个类之间不存在其他关系，那么类A和类B之间构成（D）。<br>A. 关联关系<br>B. 泛化关系<br>C. 实现关系<br>D. 依赖关系</p></li><li><p>(单选题)在下列选项中不属于类图的元素的是（B）<br>A. 类<br>B. 用例<br>C. 接口<br>D. 关联类</p></li><li><p>(单选题)当类的属性与操作添加了（B）限定符后表示该属性或操作只对本类可见，不能被其他类访问。<br>A. public<br>B. private<br>C. protected<br>D. package</p></li><li><p>(单选题)下列关于接口关系的说法不正确的是（D）。<br>A. 接口是一种特殊的类<br>B. 接口可以看成是有interface构造型的类<br>C. 一个类可以通过实现接口从而具有接口指定的行为<br>D. 在调用设计合理的接口时，需要知道类对接口实现的具体信息</p></li><li><p>(单选题)下列对类和接口的描述不正确的是（D）。<br>A. 当使用子类去替换一处父类时，设计良好的软件应当可以正确实现功能<br>B. 接口的方法名必须是公开（public）的<br>C. 一个类可以实现多个接口<br>D. 当一个类拥有另外一个类的全部属性和方法的时候，他们之间是实现关系</p></li><li><p>(单选题)下列关于类图的说法中正确的是（C）<br>A. 类图是由类、组件、包等模型元素以及它们间的关系构成的<br>B. 类图的目的在于描述系统的运行方式，而不是系统如何构成<br>C. 类图通过系统中的类与类间的关系描述了系统的静态特性<br>D. 类图和数据模型有许多相似之处，区别是数据模型不仅描述了内部信息的结构，也包含了系统的内部行为</p></li></ol><h1 id="第六章选择题"><a href="#第六章选择题" class="headerlink" title="第六章选择题"></a>第六章选择题</h1><ol><li><p>(单选题)下列关于链的叙述中，正确的一项是（D）。<br>A. 链就是关联关系<br>B. 链使用一根虚线段来表示<br>C. 链用来表示对象和类之间的关系<br>D. 链没有多重性</p></li><li><p>(单选题)下列关于对象图的叙述中，错误的一项是（C）。<br>A. 对象图显示了某时刻的一组对象以及他们之间的关系<br>B. 对象图中的主要元素是链和对象<br>C. 对象图中的链是泛化关系的实例<br>D. 对象图主要用于说明系统在某一特定时刻的具体运行状态</p></li><li><p>(单选题)下列关于类和对象的关系的叙述中，错误的一项是（B）。<br>A. 每个对象都是某个类的实例<br>B. 每个类某一时刻必定存在对象实体<br>C. 类是静态的描述<br>D. 类之间可能存在关联关系，对象之间也可能存在链</p></li><li><p>(单选题)下列关于对象图的叙述中，错误的一项是（C）。<br>A. 对象图显示了某一时刻的一组对象以及他们之间的关系<br>B. 对象图可以被看作是类图的实例<br>C. 对象图表达的交互的动态部分<br>D. 对象图中的建模元素主要有对象和链</p></li></ol><h1 id="第七章选择题"><a href="#第七章选择题" class="headerlink" title="第七章选择题"></a>第七章选择题</h1><ol><li><p>(单选题)（ A  ）是用于把元素组织成组的通用机制<br>A. 包<br>B. 类<br>C. 接口<br>D. 组件</p></li><li><p>(单选题)关于包的描述，哪个不正确（   D　 ）<br>A. 和其他建模元素一样，每个包必须有一个区别于其他包的名字<br>B. 包中可以包含其他元素，比如类、接口、组件等<br>C. 包的可见性包括：公有、私有、受保护<br>D. 导出（export）使得一个包中的元素可以单项访问另一个包中的元素</p></li><li><p>(单选题)在下列选项中，包元素之间可能形成的关系是（B）。<br>A. 关联关系<br>B. 依赖关系<br>C. 实现关系<br>D. 扩展关系</p></li><li><p>(单选题)包图的组成不包括（D）。<br>A. 包的名称和构造型<br>B. 包中含有的元素<br>C. 包与包之间的关系<br>D. 包间的消息和发送者</p></li><li><p>(单选题)下列关于包的用途，说法不正确的是（C）。<br>A. 描述需求和设计的高层情况<br>B. 组织源代码<br>C. 细化用例表达<br>D. 将复杂系统在逻辑层面上模块化</p></li><li><p>(单选题)下列选项中，不能直接放在包中的元素是（B）。<br>A. 类<br>B. 操作<br>C. 包<br>D. 对象图</p></li></ol><h1 id="第八章选择题"><a href="#第八章选择题" class="headerlink" title="第八章选择题"></a>第八章选择题</h1><ol><li><p>(单选题)顺序图由类角色，生命线，激活期和（  B ）组成<br>A. 关系<br>B. 消息<br>C. 用例<br>D. 实体</p></li><li><p>(单选题)一个对象和另一个对象之间，通过消息来进行通信。消息通信在面向对象的语言中即（ C ）<br>A. 方法实现<br>B. 方法嵌套<br>C. 方法调用<br>D. 方法定义</p></li><li><p>(单选题)顺序图是强调消息随时间顺序变化的交互图，下面不是用来描述顺序图的组成部分的是（   D   ）。<br>A. 类角色<br>B. 生命线<br>C. 消息<br>D. 转换</p></li><li><p>(单选题)顺序图反映对象之间发送消息的时间顺序，它与（  C    ）是同构的。<br>A. 用例图<br>B. 类图<br>C. 协作图<br>D. 状态图</p></li><li><p>(单选题)在UML的顺序图中，通常由左向右分层排列各个对象，正确的排列方法是（  A ）<br>A. 执行者角色、控制类、用户接口、业务层、后台数据库<br>B. 执行者角色、用户接口、控制类、业务层、后台数据库<br>C. 执行者角色、控制类、用户接口、后台数据库、业务层<br>D. 执行者角色、用户接口、业务层、控制类、后台数据库</p></li><li><p>(单选题)消息的组成不包括（   A  ）<br>A. 接口<br>B. 活动<br>C. 发送者<br>D. 接收者</p></li><li><p>(单选题)多对象是UML哪个视图中的概念（  C ）<br>A. 类图<br>B. 状态图<br>C. 协作图<br>D. 组件图</p></li><li><p>(单选题)顺序图中的消息是以（ A ）顺序排列的。<br>A. 时间<br>B. 调用<br>C. 发送者<br>D. 接收者</p></li><li><p>(单选题)顺序图的作用有（B）。<br>A. 确认和丰富一个使用语境的逻辑表达<br>B. 细化用例的表达<br>C. 有效的描述如何分配各个类的职责，以及这些类具有相应职责的原因<br>D. 显示在交互过程中各个对象之间的组织交互关系及对象彼此之间的连接</p></li><li><p>(单选题)下列关于生命线的说法不正确的是（ D ）。<br>A. 生命线是一条垂直的虚线，用来表示顺序图中的对象在一段时间内存在<br>B. 在顺序图中，每个对象的底部中心的位置都带有生命线<br>C. 在顺序图中，生命线是一条时间线，从顺序图的顶部一直延伸到底部，所用时间取决于交互持续的时间，即生命线表现了对象存在的时段<br>D. 顺序图中的所有对象在程序一开始运行的时候，其生命线都必须存在</p></li><li><p>(单选题)在UML的顺序图中将交互关系表现成一幅二维图，其中纵向是（A），横向是（A）。<br>A. 时间、对象角色<br>B. 交互、消息<br>C. 时间、消息<br>D. 交互、泛化</p></li><li><p>(单选题)下列关于顺序图的说法不正确的是（D）。<br>A. 顺序图是对象之间传送消息时间顺序的可视化表示<br>B. 顺序图比较详细地描述了用例表达的需求<br>C. 顺序图的目的在于描述系统中各个对象按照时间顺序的交互<br>D. 在顺序图中，消息表示一组在对象间传递的数据，不能代表调用</p></li></ol><h1 id="第九章选择题"><a href="#第九章选择题" class="headerlink" title="第九章选择题"></a>第九章选择题</h1><ol><li><p>(单选题)关于协作图的描述，下列哪个不正确（　B　　）<br>A. 协作图作为一种交互图，强调的是参加交互的对象的组织<br>B. 协作图是顺序图的一种特例<br>C. 协作图中有消息流的顺序号<br>D. 在ROSE中，协作图可在顺序图的基础上按F5键自动生成</p></li><li><p>(单选题)在UML中，协作图的组成不包括（  C  ）<br>A. 对象<br>B. 消息<br>C. 发送者<br>D. 链</p></li><li><p>(单选题)下列选项中不属于通信图与顺序图的共同点的是（ D ）。<br>A. 表达语义相同，都是对系统中的交互建模<br>B. 对象责任相同，都担任发送者和接受者的角色<br>C. 主要元素相同，都是对象与消息作为主要元素<br>D. 对象表示相同，都可以显示地体现出对象的生命周期</p></li><li><p>(单选题)在通信图中用来连接对象与对象的元素是（B）。<br>A. 关联关系<br>B. 链<br>C. 生命线<br>D. 消息</p></li><li><p>(单选题)下列关于通信图中链的叙述，正确的是（A）。<br>A. 通信图中的链和对象图中的链在语义及表示法上相同<br>B. 在通信图中，链一定连接了两个不同的对象<br>C. 在通信图中，链可以添加可见性修饰来表示两端对象对整条链的可见性<br>D. 通信图中对象之间的链一定在整个软件的生命周期内都存在</p></li></ol><h1 id="第十章选择题"><a href="#第十章选择题" class="headerlink" title="第十章选择题"></a>第十章选择题</h1><ol><li><p>(单选题)若将活动状态比作方法，那么动作状态即（  C ）<br>A. 方法名<br>B. 方法返回值<br>C. 方法体中的每一条语句<br>D. 方法的可见性</p></li><li><p>(单选题)事件（event）表示对一个在时间和空间上占据一定位置的有意义的事情的规格说明，下面哪个不是事件的类型（  C  ）<br>A. 信号<br>B. 调用事件<br>C. 源事件<br>D. 时间事件</p></li><li><p>(单选题)下列关于状态图的说法中，正确的是（  C　）<br>A. 状态图是UML中对系统的静态方面进行建模的五种图之一<br>B. 状态图是活动图的一个特例，状态图中的多数状态是活动状态<br>C. 活动图和状态图是对一个对象的生命周期进行建模，描述对象随时间变化的行为。<br>D. 状态图强调对有几个对象参与的活动过程建模，而活动图更强调对单个反应型对象建模</p></li><li><p>(单选题)对反应型对象建模一般使用（  A ）图<br>A. 状态图<br>B. 顺序图<br>C. 活动图<br>D. 类图</p></li><li><p>(单选题)状态图包括（   D   ）<br>A. 类的状态和类执行的动作<br>B. 状态之间的转换<br>C. 触发类的动作的事件<br>D. 以上所有选项</p></li><li><p>(单选题)下列对状态图描述不正确的是 (  C  )<br>A. 状态图通过建立类对象的生命周期模型来描述对象随时间变化的动态行为<br>B. 状态图适用于描述状态和动作的顺序，不仅可以展现一个对象拥有的状态，还可与说明事件如何随着时间的推移来影响这些状态<br>C. 状态图的主要目的是描述对象创建和撤销过程中资源的不同状态，有利于开发人员提高开发效率<br>D. 状态图描述了一个实体基于事件反映的动态行为，显示了该如何根据当前所处状态对不同事件做出反应</p></li><li><p>(单选题)组成一个状态的多个子状态之间是互斥的，不能同时存在，那么这种状态称为（ A ）复合状态。<br>A. 顺序<br>B. 并发<br>C. 历史<br>D. 同步</p></li><li><p>(单选题)假设在某个状态的内部的一行内容表示为“eventA&#x2F;defer”，则这行内容所表示的是（ D ）。<br>A. 触发器<br>B. 内部转换<br>C. 内部执行活动<br>D. 可推迟事件</p></li><li><p>(单选题)下列说法不正确的是（D）。<br>A. 触发器事件就是能够引起状态转换的事件，触发器事件可以是信号或者调用等<br>B. 没有触发器事件的转换是由状态活动的完成引起的<br>C. 内部转换默认不激发入口和出口动作，因此内部转换激发的结果不改变本来状态<br>D. 状态机图的主要目的是描述对象创建和销毁过程中资源的不同状态，有利于开发人员提高开发效率</p></li><li><p>(单选题)假设一个转换被表示为“A［B］&#x2F;C”，那么这个转换所表达的语义是（B）<br>A. 该转换的触发器事件为B，监护条件为A，效果列表为C<br>B. 该转换的触发器事件为A，监护条件为B，效果列表为C<br>C. 该转换的触发器事件为C，监护条件为A，效果列表为B<br>D. 该转换的触发器事件为A，监护条件为C，效果列表为B</p></li><li><p>(单选题)需要依赖于某个表达式所表达的布尔条件才能发生的事件被称作（ C ）。<br>A. 信号事件<br>B. 调用事件<br>C. 改变事件<br>D. 时间事件</p></li><li><p>(单选题)状态机图的意义是（A）<br>A. 对实体在其生命周期中的各个状态进行建模，状态是实体在一段时间内保持的一个状态<br>B. 将系统的需求转化成图形表示，简单直观，还可以转化成程序的伪代码<br>C. 表示两个或多个对象之间的独立连接，是不同对象不同时期情况的图形化描述<br>D. 描述对象和对象之间按时间顺序的交互行为</p></li><li><p>(单选题)下列选项不属于伪状态的是（B）<br>A. 历史状态<br>B. 复合状态<br>C. 初态<br>D. 选择</p></li></ol><h1 id="第十一章活动图"><a href="#第十一章活动图" class="headerlink" title="第十一章活动图"></a>第十一章活动图</h1><ol><li><p>(单选题)（ A  ）技术是将一个活动图中的活动状态进行分组，每一组表示一个特定的类、人或部门，他们负责完成组内的活动。<br>A. 泳道<br>B. 交叉汇合<br>C. 分支<br>D. 转移</p></li><li><p>(单选题)下列关于状态图的说法中，正确的是（  C　）<br>A. 状态图是UML中对系统的静态方面进行建模的五种图之一<br>B. 状态图是活动图的一个特例，状态图中的多数状态是活动状态<br>C. 状态图和活动图是对对象的生命周期进行建模，描述对象随时间变化的行为<br>D. 状态图强调对有几个对象参与的活动过程建模，而活动图更强调对单个反应型对象建模。</p></li><li><p>(单选题)下面不是活动图中的基本元素的是（   D   ）。<br>A. 状态、分支<br>B. 分叉、汇合<br>C. 泳道、对象流<br>D. 用况、状态</p></li><li><p>(单选题)以下说法错误的是（C）。<br>A. 活动图中的开始标记一般只有一个，而终止标记可能有多个<br>B. 判断节点的出口条件必须保证不互相重复，并且不缺少情况<br>C. 在活动图中并没有表现出并发，在实际实现的时候一定不涉及并发问题<br>D. 活动图比状态图更加合适去描述一个流程</p></li><li><p>(单选题)下列建模需求中，适合使用活动图来完成的是（C）。<br>A. 对体系结构建模<br>B. 对消息流程建模<br>C. 对业务流程建模<br>D. 对数据库模式建模</p></li><li><p>(单选题)在活动图中负责在一个活动节点执行完毕后切换到另一个节点的元素是（A）。<br>A. 控制流<br>B. 对象流<br>C. 判断节点<br>D. 扩展区域</p></li><li><p>(单选题)若想在活动图中表现对象流，则首先需要绘制出（C）元素。<br>A. 控制流<br>B. 分叉节点<br>C. 泳道<br>D. 扩展区域</p></li><li><p>(单选题)以下哪一项信息不容易在活动图中表达？（D）<br>A. 动作执行顺序<br>B. 动作的执行者<br>C. 活动进行的逻辑结构<br>D. 执行者之间的交互</p></li><li><p>(单选题)在活动图中用于连接动作或节点，表示活动进行方向的元素是（A）。<br>A. 控制流<br>B. 对象流<br>C. 动作<br>D. 扩展区域</p></li><li><p>(单选题)在活动图中用于对元素按照负责对象分组的元素是（A）。<br>A. 判断节点<br>B. 泳道<br>C. 分叉节点<br>D. 控制流</p></li><li><p>(单选题)在活动图中用于将判断节点产生的多个控制流合成并导出为一个控制流的元素是（D）。<br>A. 分叉节点<br>B. 结合节点<br>C. 判断节点<br>D. 合并节点</p></li><li><p>(单选题)活动图中可能出现的终止标记的数量是（B）。<br>A. 0<br>B. 0到多个<br>C. 1<br>D. 0或1</p></li><li><p>(单选题)在活动图中包含并发含义的元素主要指的是（D）。<br>A. 控制流<br>B. 判断节点<br>C. 泳道<br>D. 分叉节点</p></li></ol><h1 id="第十二章选择题"><a href="#第十二章选择题" class="headerlink" title="第十二章选择题"></a>第十二章选择题</h1><ol><li><p>(单选题)组件图用于对系统的静态实现视图建模，这种视图主要支持系统部件的配置管理，通常可以分为四种方式来完成，下面哪种不是其中之一（　B　）<br>A. 对源代码建模<br>B. 对事物建模<br>C. 对物理数据库建模<br>D. 对可适应的系统建模</p></li><li><p>(单选题)组件图专注于系统的（ B  ）实现图<br>A. 动态<br>B. 静态<br>C. 基础<br>D. 实体</p></li><li><p>(单选题)（ B  ）是被节点执行的事物<br>A. 包<br>B. 组件<br>C. 接口<br>D. 节点</p></li><li><p>(单选题)（ D   ）是可复用的，提供明确接口完成特定功能的程序代码块。<br>A. 模块<br>B. 函数<br>C. 用例<br>D. 软件构件</p></li><li><p>(单选题)（  D  ）是系统中遵从一组接口且提供实现的一个物理部件，通常指开发和运行时类的物理实现<br>A. 部署图<br>B. 类<br>C. 接口<br>D. 组件</p></li><li><p>(单选题)构件图的组成不包括 (   C  )<br>A. 接口<br>B. 构件<br>C. 发送者<br>D. 依赖关系</p></li><li><p>(单选题)UML 中的构件是遵从一组接口并提供一组接口的实现，下列说法错误的是(  B  )。<br>A. 构件应是可替换的<br>B. 构件表示的是逻辑模块而不是物理模块<br>C. 构件应是组成系统的一部分<br>D. 构件与类处于不同的抽象层次</p></li></ol><h1 id="第十三章选择题"><a href="#第十三章选择题" class="headerlink" title="第十三章选择题"></a>第十三章选择题</h1><ol><li><p>(单选题)部署图的组成不包括（C）<br>A. 处理器<br>B. 设备<br>C. 构件<br>D. 连接</p></li><li><p>(单选题)下列说法正确的是（D）<br>A. 部署就是复制软件<br>B. 软件的执行环境一般是一个独立的设备节点<br>C. 部署图不适用于分布式系统<br>D. 节点之间一般会存在通信</p></li><li><p>(单选题)软件部署的实质是（D）<br>A. 部署软件组件<br>B. 部署软件程序<br>C. 部署软件模型<br>D. 部署软件制品</p></li><li><p>(单选题)下列关于部署图的说法不正确的是（B）<br>A. 部署图描述了一个系统运行时的硬件节点，这些节点上运行的软件构件将在何处物理运行，以及它们将如何彼此通信的静态视图<br>B. 每一个系统模型中可以包含多个部署图<br>C. 在一个部署图中包含了两种基本的模型元素：节点和节点之间的连接<br>D. 每一个系统模型中应该仅包含一个部署图</p></li><li><p>(单选题)某系统部署时需要一台LED显示屏，其在部署图中应该被建模为（A）类型节点<br>A. 设备<br>B. 处理器<br>C. 二者均可<br>D. 都不适用</p></li></ol><h1 id="第十四章选择题"><a href="#第十四章选择题" class="headerlink" title="第十四章选择题"></a>第十四章选择题</h1><ol><li><p>(单选题)RUP中有（   C  ）个核心过程工作流。<br>A. 1<br>B. 3<br>C. 6<br>D. 9</p></li><li><p>(单选题)定义大多数的需求和范围的工作是在RUP中的(  B  )阶段完成的。<br>A. 初始阶段<br>B. 细化阶段<br>C. 构造阶段<br>D. 提交阶段</p></li><li><p>(单选题)下列(  D )不在RUP的初始阶段中完成的<br>A. 编制简要的愿景文档<br>B. 粗略评估成本<br>C. 定义大多数的需求<br>D. 业务案例</p></li><li><p>(单选题)估计项目时长、对项目进行风险评估一般是（A）进行的工作。<br>A. 起始阶段<br>B. 细化阶段<br>C. 构建阶段<br>D. 转化阶段</p></li><li><p>(单选题)下列有关核心工作流的描述有误的是（C）。<br>A. 在分析和设计工作流中需要考虑系统的运行时性能，以及用户需求的满足程度<br>B. 实现工作流就是编程实现各个组件的过程<br>C. 部署工作流需要输出完整产品，并对组件进行单元测试<br>D. 配置和变更管理工作流描述了开发团队应当如何掌握数量庞大的制品</p></li><li><p>(单选题)下列选项中，不是迭代过程的优势的一项是（C）。<br>A. 可以更早地弱化风险<br>B. 更灵活地处理各种变化<br>C. 可以建立更抽象的软件架构<br>D. 开发团队不必一次完成所有工作，可以在工作的过程中学习和调整</p></li><li><p>(单选题)统一软件开发过程共有九个核心工作流，以下（D）不是RUP的核心工作流。<br>A. 需求工作流<br>B. 实现工作流<br>C. 测试工作流<br>D. 架构工作流</p></li><li><p>(单选题)RUP建议使用这个句式来描述过程： “谁在什么时候要用什么方法，做什么”，其中“做什么”对应着静态结构中的（C）元素。<br>A. 工作者<br>B. 活动<br>C. 制品<br>D. 工作流</p></li><li><p>(单选题)统一软件开发过程RUP共存在四个阶段，以下（B）不是RUP的阶段之一。<br>A. 起始阶段<br>B. 策划阶段<br>C. 构建阶段<br>D. 转化阶段</p></li></ol><h1 id="第一章简答题"><a href="#第一章简答题" class="headerlink" title="第一章简答题"></a>第一章简答题</h1><ol start="17"><li><p>(简答题)什么是对象间的可见性？<br>可见性指的是一个对象能够“看到”或者引用另一个对象的能力。</p></li><li><p>(简答题)简述面向对象分析方法（OOA）的5个基本步骤。<br>识别对象（包括标识潜在的对象和筛选对象两步）；识别对象的属性；识别对象的行为；识别对象所属的类；定义主题词。</p></li><li><p>(简答题)软件工程的目标有哪些？<br>使软件开发的成本能够控制在预计的合理范围内；使软件产品的各项功能和性能都能够满足用户需求；提高软件产品的质量；提高软件产品的可靠性；使生产出来的软件产品便于移植、维护、升级和适用；使软件产品的开发周期能够控制在预计的合理时间范围内。</p></li><li><p>(简答题)什么是面向对象方法？简述其优势。<br>面向对象方法就是主张从客观世界固有的事物出发来构建系统，提倡用人类在现实生活中常用的思维方法来认识、理解和描述客观事物，强调最终建立的系统能够映射问题域，也就是说，系统中的对象以及对象之间的关系能够如实反映问题域中固有的事物及其关系。</p></li><li><p>(简答题)简述对象、类、抽象、封装、泛化与多态的概念。<br>对象：一个具有状态、行为和标识符的实体，并且对象之间往往可以通过通信相互交互。</p></li></ol><p>类：拥有共同的结构、行为和语义的一组对象的抽象。</p><p>抽象：揭示一个事物区别于其他事物的本质特征，去除从某一角度看来不重要的细节的行为。</p><p>封装：对其客户隐藏对象的属性和实现细节，仅对外公开接口，并控制在程序中属性的读取和修改的访问级别。</p><p>泛化：类元的一般描述和具体描述之间的关系，具体描述建立在一半描述的基础之上，并对其进行了扩展。</p><p>多态：在同一接口下表现多种行为的能力，是面向对象技术的根本特征。</p><ol start="22"><li>(简答题)简述软件危机产生的原因？<br>随着软件规模的扩大，复杂性的增加，功能的增强，使用早期的自由软件开发方式使得高质量的软件开发变得越来越困难。</li></ol><h1 id="第二章简答题"><a href="#第二章简答题" class="headerlink" title="第二章简答题"></a>第二章简答题</h1><ol start="19"><li><p>(简答题)简述统一建模语言(UML)<br>统一建模语言(UML)是一种绘制软件蓝图的标准语言。可以用UML对软件密集型系统的制品进行可视化详述和文档化。UML是一种定义良好、易于表达、功能强大且普遍适用的可视化建模语言。它融入了软件工程领域的新思想、新方法和新技术。它的作用域不限于支持面向对象的分析与设计，还支持从需求分析开始的软件开发的全过程。UML的作用就是用很多图从静态和动态方面来全面描述我们将要开发的系统。</p></li><li><p>(简答题)简述建模的几点基本原理。<br>第一，选择创建什么模型对如何解决问题和如何形成相应解决方案意义深远。第二，可以在不同的层次级别上表示不同模型。第三，最好的模型总是与现实世界联系密切。第四，单个模型或视图是不充分的。</p></li><li><p>(简答题)谈谈统一建模语言出现的意义<br>UML的出现可以帮助开发团队以一种可视化的方式理解系统的功能需求。UML统一了各种方法对不同类型的系统、不同开发阶段以及不同内部概念的不同观点，从而有效地消除了各种建模语言之间不必要的差异。UML建模能力比其他面向对象建模方法更强。它不仅适合于一般系统的开发，而且对并行、分布式系统的建模尤为适宜。使用UML使硬件组件和软件组件之间将会有更大的透明度。便携性和综合效率将会增加。</p></li><li><p>(简答题)简述UML的应用范围<br>UML最广泛的应用是对软件系统进行建模，但它同样适用于许多非软件系统领域的系统。当UML应用于大多数软件系统的开发过程时，它从需求分析阶段到系统完成后的测试阶段都能起到重要作用。</p></li><li><p>(简答题)什么是模型？为什么为软件系统建模非常重要？<br>模型是用某种媒介对相同媒介或其他媒介里的一些事物的表现形式。建模对一个系统的作用包括： 捕获和精确表达项目的需求和应用领域的知识，以使全部涉众能够理解并达成一致； 完成系统设计； 分离需求与具体实现细节； 帮助生成有用的工作产品； 方便研究多种解决方案； 全面把握复杂的系统。</p></li></ol><h1 id="第三章简答题"><a href="#第三章简答题" class="headerlink" title="第三章简答题"></a>第三章简答题</h1><ol start="24"><li><p>(简答题)简述UML中四种基本关系的含义和作用。<br>UML中的四中关系包括关联关系、依赖关系、泛化关系和实现关系。 关联关系用来描述不同类元的实例之间的连接。它是一种结构化的关系，指一种对象和另一种对象之间存在联系，即“从一个对象可以访问另一个对象”。 依赖关系用来描述一对模型元素之间的内在联系（语义关系）。 泛化关系类似于面向对象方法中的继承关系，是从特殊到一般的一种归纳和分类关系。 实现关系是用来描述规格说明和其实现的元素之间的连接的一种关系。其中规格说明定义了行为的说明，真正的实现由后一个模型元素来完成。</p></li><li><p>(简答题)简述“4+1”视图中五种视图的作用。<br>“4+1”视图包括逻辑视图、开发视图、进程视图、物理视图和场景视图。 逻辑视图将系统功能进行分解，负责反映出系统内部是如何组织和协作来实现功能的。 开发视图主要用来描述软件的各个模块的组织方式，包括源程序、程序包、支持软件、第三方库等。 进程视图主要描述系统的运行特性，侧重系统的性能和稳定性，关心系统的并发性、分布性、集成性的好坏，主要关注进程、线程、对象，并发、同步、通信等运行时概念。 物理视图主要描述硬件配置，强调系统的安装、配置、通信、拓扑结构等问题。 场景视图从项目需求入手，将四个视图结合为一个整体。可以描述一个特定视图内的构件关系，也可以描述不同视图间的构件关系。</p></li><li><p>(简答题)简述UML中的四种事物的含义和作用。<br>UML中的四种事物包括结构事物、行为事物、分组事物和注释事物。 结构事物通常作为UML模型的静态部分，用于描述概念元素或物理元素。 行为事物是UML模型的动态部分，用于描述UML模型中的动态元素，主要为静态元素之间产生的时间和空间上的行为动作，类似于句子中动词的作用。 分组事物是UML模型的组织部分，是用来组织系统设计的事物。 注释事物是UML模型的解释部分。这些注释事物用来描述、说明和标注模型的任何元素，简言之，就是对UML中元素的注释。</p></li></ol><h1 id="第四章简答题"><a href="#第四章简答题" class="headerlink" title="第四章简答题"></a>第四章简答题</h1><ol start="30"><li>(简答题)学生管理系统中有一个模块是报到登记，具体流程是：在新生入校报到时，进行新生信息登记，记录学生的报到资料、个人基本情况的输入、查询、修改等。问题： 1.　写出在上述需求描述中出现的Actor   2.　根据上述描述绘制其用例图<br><img src="https://img-blog.csdnimg.cn/a543ea0ee01c4385841839d7c1a1c0f3.png" alt="在这里插入图片描述"></li><li>(简答题)请选择UML中合适的图来描述图书管理系统中图书馆业务功能模块。该模块包括借书，还书，预约借书等功能<br><img src="https://img-blog.csdnimg.cn/bd955d17c64f46b2ac3cc8d55236223c.png" alt="在这里插入图片描述"></li><li>(简答题)网络的普及带给了人们更多的学习途径，随之而来的管理远程网络教学的“远程网络教学系统”诞生了。“远程网络教学系统”的功能需求如下： 1.学生登录网站后，可以浏览课件、查找课件、下载课件、观看教学视频。 2.教师登录网站后，可以上传课件、上传教学视频、发布教学心得、查看教学心得、修改教学心得。 3.系统管理员负责对网站页面的维护、审核不合法课件和不合法教学信息、批准用户注册。 （1）学生需要登录“远程网络教学系统”后才能正常使用该系统的所有功能。如果忘记密码，可与通过“找回密码”功能恢复密码。请画出学生参与者的用例图。 （2）教师如果忘记密码，可以通过“找回密码”功能找回密码。请画出教师参与者的用例图。<br><img src="https://img-blog.csdnimg.cn/23ecd05524634115ae393469457ffbb1.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/963336bf56734f778e7d1ab8ec329e44.png" alt="在这里插入图片描述"></li><li>(简答题)简述用例模型的组成元素以及建模步骤<br>组成元素有：参与者，用例，通信关联，用例规约</li></ol><p> 建立用例模型步骤： (1)根据系统边界确定参与者 (2)根据每个参与者确定与之相关联的用例 (3)对每个用例写出用例规约文档，调整用例模型（优化参与者与参与者之间的关系，用例与用例之间的关系）</p><ol start="34"><li><p>(简答题)什么是用例描述？用例描述包括哪些主要部分？<br>用例描述即通过使用足够清楚的、便于理解的文字来描述一个事件流，进而来说明一个用例的行为。一般的用例描述主要包括用例名称、用例编号、参与者、用例描述、触发器、前置条件、基本事件流、扩展事件流、结论、后置条件、补充约束。</p></li><li><p>(简答题)用例和用例之间存在什么关系，分别在什么时候使用？<br>用例之间的关系包括泛化关系和依赖关系。 用例间的泛化关系用来表示一般用例与特殊用例间的关系。用例间最常见的两种依赖关系为包含与扩展。包含指的是基用例可以包含用例具有的行为，其中包含用例中定义的行为将被插入基用例定义的行为中。扩展指的是扩展用例对基用例行为的增强。在这一关系中，扩展用例包含了一个或多个片段，每个片段都可以插入到基用例中的一个单独的位置上，而基用例对于扩展的存在是毫不知情的。</p></li></ol><h1 id="第五章简答题"><a href="#第五章简答题" class="headerlink" title="第五章简答题"></a>第五章简答题</h1><ol start="29"><li>(简答题)请根据下面的用例图设计相关类图</li></ol><p><img src="https://img-blog.csdnimg.cn/d0e7198953e44bf1a2bfcae7642c9208.png" alt="在这里插入图片描述"><br>30. (简答题)已知三个类A.B和C.其中类A由类B的一个实体类和类C的1个或多个实体类构成。请画出能够正确表示类A,B和C之间关系的UML类图.<br><img src="https://img-blog.csdnimg.cn/4367cfbf9a544ace8cdd113bc2f06b60.png" alt="在这里插入图片描述"></p><h1 id="第六章简答题"><a href="#第六章简答题" class="headerlink" title="第六章简答题"></a>第六章简答题</h1><ol start="10"><li>(简答题)对于Vehicle（车）类和Wheel（轮子）类，存在一个一对多的关联关系。试创建一个Vehicle类的三轮车对象，与三个轮子对象存在链，有一个前轮和两个后轮。用对象图表示三轮车对象与轮子对象之间的关系。<br><img src="https://img-blog.csdnimg.cn/b3defca7199b48aaa30845c1fd83ba2a.png" alt="在这里插入图片描述"></li><li>(简答题)在某出版系统中，存在出版社、图书、作者三个实体类。试对一图书对象创建对象图，并在图中表示出其与出版社对象及作者对象之间的关系。<br><img src="https://img-blog.csdnimg.cn/edc40c7364c44c3e8254a70d57a91cb2.png" alt="在这里插入图片描述"></li></ol><h1 id="第七章简答题"><a href="#第七章简答题" class="headerlink" title="第七章简答题"></a>第七章简答题</h1><ol start="15"><li>(简答题)在某系统中存在三个逻辑部分，分别是Business包、DataAccess包和Common包，其中Business包需要导入DataAccess包和Common包，DataAccess包需要导入Common包。在类图中试着创建这些包，并绘制其关系。<br><img src="https://img-blog.csdnimg.cn/f94451391978470f90af1263fde6d880.png" alt="在这里插入图片描述"></li></ol><h1 id="第八章简答题"><a href="#第八章简答题" class="headerlink" title="第八章简答题"></a>第八章简答题</h1><ol start="22"><li>(简答题)图书管理系统功能性需求说明如下: 1.图书管理系统能够为一定数量的借阅者提供服务。每个借阅者能够拥有唯一标识其存在的编号。图书馆向每一个借阅者发放图书证，其中包含每一个借阅者的编号和个人信息。提供的服务包括：提供查询图书信息、查询个人信息服务和预定图书服务等。 2.当借阅者需要借阅图书、归还书籍时需要通过图书管理员进行，即借阅者不直接与系统交互，而是通过图书管理员充当借阅者的代理和系统交互。 3.系统管理员主要负责系统的管理维护工作，包括对图书、数目、借阅者的添加、删除和修改。并且能够查询借阅者、图书和图书管理员的信息。 4.可以通过图书的名称或图书的ISBN&#x2F;ISSN号对图书进行查找。 回答下面问题： (1)该系统中有哪些参与者? (2)确定该系统中的类，找出类之间的关系并画出类图 (3)画出语境“借阅者预定图书”的时序图</li></ol><p>该系统中有哪些参与者?借阅者  图书管理员   系统管理员</p><p>确定该系统中的类，找出类之间的关系并画出类图</p><p>用户类、用户角色类、图书类、预定类、借阅类、书目类<br><img src="https://img-blog.csdnimg.cn/96e57180ccb14b289a0ed076bcdecfa4.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2cc0b84a90c94177bc8a4fcc4013255f.png" alt="在这里插入图片描述"><br>23. (简答题)在某一学生指纹考勤系统中，有一个用例名为“上课登记”。此用例允许学生在上课前使用系统识别自己的指纹信息进而识别自己的身份，同时系统可以将登录信息存储在数据库中。 “上课登记”用例的主要事件流如下：  学生从系统菜单中选择“上课登记”；  系统显示指纹识别界面；  学生将手指放置于界面上；  系统捕获并识别学生的指纹，向学生返回识别的身份信息；  学生选择“确认”按钮； 系统生成一个关于该登记学生及当前日期、时间的新记录，并将该记录保存到数据库中。 请根据以上描述绘制“上课登记”用例的顺序图。<br><img src="https://img-blog.csdnimg.cn/f97a9f22484241e28c64b472964dec32.png" alt="在这里插入图片描述"></p><h1 id="第九章简答题"><a href="#第九章简答题" class="headerlink" title="第九章简答题"></a>第九章简答题</h1><ol start="16"><li>(简答题)（1） 某银行系统存款处理过程如下： ① 系统将存款单上的存款金额分别记录在存折和账目文件中。 ② 将现金存入现金库。 ③ 最后将打印后的存折还给储户。 请分析此交互过程所涉及的系统对象，并结合存款处理流程绘制通信图。<br><img src="https://img-blog.csdnimg.cn/f8518f78696b43faa4ad6ed6b839c64f.png" alt="在这里插入图片描述"></li><li>(简答题)（2） 对于某在线购物系统，主要有以下三个交互过程。 ① 登录： 用户申请登录系统，系统验证用户身份的有效性。 ② 购物： 用户浏览系统的搜索页面，搜索到目标商品，并将之添加到购物车。 ③ 结算： 用户结算购物车内的所有商品，更新库存并创建订单。 绘制通信图来表示这三个交互过程。<br><img src="https://img-blog.csdnimg.cn/136b0fd02fc5410593538d34e8af6537.png" alt="在这里插入图片描述"></li></ol><h1 id="第十章简答题"><a href="#第十章简答题" class="headerlink" title="第十章简答题"></a>第十章简答题</h1><ol start="14"><li><p>(简答题)<br><img src="https://img-blog.csdnimg.cn/eee2ff876776451c9155b2881328cd6e.png" alt="在这里插入图片描述"><br>1.该图是什么图，其中的矩形框表示什么 2.该图描述了怎样的情形<br>状态图，表示就绪，运行，阻塞状态； 线程运行的基本流程如下： 当线程准备运行时，进入就绪状态，如果获得cpu时间片，就转入运行状态，运行正常结束，进入结束状态，如果在运行过程中，cpu时间片用完后还没有完成任务，就进入就绪状态，等待再次得到cpu时间片，如果线程在运行过程中，不满足所须资源，就进入阻塞状态，处于阻塞状态的线程得到相关资源后，进入就绪状态，依次循环。</p></li><li><p>(简答题)简述简单状态和复合状态的异同。<br>简单状态都是不包含嵌套子结构的； 而复合状态是指包含有一个或多个嵌套状态机的状态。</p></li><li><p>(简答题)当手机开机时，它处于空闲状态，当用户使用电话呼叫某人时，手机进入拨号状态。如果呼叫成功，即电话接通，手机就处于通话状态； 如果呼叫不成功，例如对方线路有问题或关机，则拒绝接听。这时手机停止呼叫，重新进入空闲状态，手机在空闲状态下被呼叫，手机进入响铃状态（ringing）； 如果用户接听电话（pick），手机处于通话状态； 如果用户未做出任何反应，可能他没有听见铃声，手机一直处于响铃状态； 如果用户拒绝来电，手机回到空闲状态。请按以上描述绘制出使用手机的状态机图。<br> <img src="https://img-blog.csdnimg.cn/58562e44ae934356864b8ff2e761ded8.png" alt="在这里插入图片描述"></p></li><li><p>(简答题)简单的数字手表表面上有一个显示屏和两个设置按钮A和B，有两种操作模式： 显示时间和设定时间。在显示时间模式下，手表会显示小时数和分钟数，小时数和分钟数由闪烁的冒号分隔。设定时间模式有两种子模式： 设定小时和设定分钟。按钮A选择模式，每次按下此按钮时，模式会连续前进： 设定小时、设定分钟等。在子模式内，每次只要按下按钮B，就会拨快小时或分钟。绘制一个数字手表的状态机图。<br> <img src="https://img-blog.csdnimg.cn/7bbca808dbd74101940f1776dc44a75e.png" alt="在这里插入图片描述"></p></li><li><p>(简答题)简述状态机图的组成要素。<br>状态机图的主要元素是状态，各状态由转移连接在一起。此外，伪状态和复合状态也是其组成元素。</p></li></ol><h1 id="第十一章简答题"><a href="#第十一章简答题" class="headerlink" title="第十一章简答题"></a>第十一章简答题</h1><ol start="24"><li><p>(简答题)简述活动图和普通流程图的异同。<br>事实上活动图是在流程图的基础上添加了大量软件工程术语而成的改进版。具体地说，活动图的表达能力包括了逻辑判断、分支甚至并发，所以活动图的表达能力要远高于流程图： 流程图仅仅展示一个固定的过程，而活动图可以展示并发和控制分支，并且可以对活动与活动之间信息的流动进行建模。可以说，活动图在表达流程的基础上继承了一部分协作图的特点，即可以适当表达活动之间的关系。</p></li><li><p>(简答题)某学生选课系统的查询课程用例如下： 学生首先进入选课系统，然后输入要查询的课程名，系统验证输入的课程名是否存在，若存在，则跳转到对应的显示课程信息的页面； 若不存在，则给出提示信息，返回选课页面。 请根据以上描述绘制活动图。<br><img src="https://img-blog.csdnimg.cn/20dc5dbae8d64ef2a74d2d611f04bd52.png" alt="在这里插入图片描述"></p></li><li><p>(简答题)在机票预订系统中，使用系统的用户必须先注册一个自己的账号，其过程为输入注册信息、验证信息完整、提交信息、系统进行验证（是否重名等等），如果验证均通过，则注册成功，否则失败。 请根据以上描述，对用户注册用例画出活动图。<br><img src="https://img-blog.csdnimg.cn/2ed4a47599164040a477ed31706d5ac6.png" alt="在这里插入图片描述"></p></li></ol><h1 id="第十二章简答题"><a href="#第十二章简答题" class="headerlink" title="第十二章简答题"></a>第十二章简答题</h1><ol start="15"><li><p>(简答题)已知某系统包括三个组件，分别命名为MainProg、PrintProg与Database。其中，PrintProg组件提供IPrint接口供MainProg使用，MainProg组件在运行时直接依赖于Database组件的存在。请对以上所描述的三个组件绘制出相应的组件图。<br><img src="https://img-blog.csdnimg.cn/5aaea39098154dfab4c552831d81347f.png" alt="在这里插入图片描述"></p></li><li><p>(简答题)目前住院病人主要由护士护理，这样做不仅需要大量护士，而且由于不能随时观察危重病人的病情变化，还会延误抢救时机。某医院打算开发一个以计算机为中心的患者监护系统。医院对患者监护系统的基本要求是随时接收每个病人的生理信号（脉搏、体温、血压、心电图等），定时记录病人情况，以形成患者日志。当某个病人的生理信号超出医生规定的安全范围时，向值班护士发出警告信息。此外，护士在需要时还可以要求系统打印出某个指定病人的病情报告。 设计阶段拟将系统分为五个主要组件： 用户界面、系统控制、病人监护、患者日志实体与数据库。请根据情境描述，结合设计阶段提出的五个组件绘制组件图。</p></li></ol><p>首先确定出系统所需的五个组件： UserInterface、SystemController、Entity、PatientObserver以及Database。其中Entity组件需要依赖于Database组件，SystemController组件和PatientObserver组件均需要依赖于Entity组件，UserInterface组件要依赖于SystemController组件和PatientObserver组件。<br><img src="https://img-blog.csdnimg.cn/1f787bc44ee6449395741ec6c858d1d7.png" alt="在这里插入图片描述"></p><h1 id="第十三章简答题"><a href="#第十三章简答题" class="headerlink" title="第十三章简答题"></a>第十三章简答题</h1><ol start="11"><li><p>(简答题)简述部署图的建模方法。<br>部署图的意义在于对各种系统的静态部署视图进行建模。使用部署图对系统建模，可以遵循以下步骤： 将设备建模为节点； 使用构造型对不同种类的节点进行限制说明； 在节点之间建立关系； 添加注释和约束。</p></li><li><p>(简答题)某自动售货机系统部署时存在三个节点，分别为远程服务器、售货机、客户端。远程服务器负责一些数据存储工作； 售货机是自动售货机机器中的有处理和计算能力的部分； 客户端是机器中直接和用户进行交互的硬件部分。 其中售货机部分和客户端部分通过机器直接相连，售货机通过无线网络与远程服务器通信。 请根据以上描述绘制部署图。</p></li></ol><p>首先确定系统所需的三个节点： Client、SodaMachine与RemoteServer，其中Client节点是设备，另外两个节点是处理器。然后根据节点之间通信方式在节点之间建立带有构造型的关联。部署图可参考下图。<br><img src="https://img-blog.csdnimg.cn/5e5b6e727d2c47bab6c5ece18c353124.png" alt="在这里插入图片描述"><br>13. (简答题)为什么要将处理器和设备分开处理？谈谈你的理解。</p><p>既然我们把节点这些硬件资源纳入考虑当中，就必然少不了要从其特性出发来分析它们的运行时特性，如运算速度、内存大小等问题，因为这些问题可能是最终限制软件性能，或者强化软件运行效率的关键参数。这些节点的附加特性UML没有进行预定义，因此需要使用构造型或标记值自行创建。</p><h1 id="第十四章简答题"><a href="#第十四章简答题" class="headerlink" title="第十四章简答题"></a>第十四章简答题</h1><ol start="17"><li><p>(简答题)RUP统一过程中的四个阶段？<br>初始阶段 、细化阶段、构造阶段、提交阶段</p></li><li><p>(简答题)简述RUP的静态结构，并解释工作者、活动、制品和工作流的概念。<br>过程的静态结构即“谁在什么时候要用什么方法做什么”，包括工作者、活动、制品和工作流。 工作者定义了软件开发工作中某个工作单位的行为和责任，这个工作单位可能指某个个体，或者某个工作小组。 活动定义了一件事或一个动作，并且必须存在一个特定的工作者角色负责执行这个活动。 制品描述了一个过程中产生、修改或使用的事物。 工作流就是展示一个活动的可见价值的流程，可以描述活动的操作顺序以及工作者之间的交互关系等。</p></li><li><p>(简答题)简述RUP中的核心工作流。<br>在RUP中，软件开发的全过程被分划成九个核心工作流，每一项工作中的工作者和活动依照逻辑规则被列入某一个或几个工作流中。这九个核心工作流中，有六个属于核心工程工作流： 业务建模工作流、需求工作流、分析与设计工作流、实现工作流、测试工作流、部署工作流。而另外三个属于核心支持工作流： 项目管理工作流、配置与变更管理工作流、环境工作流。</p></li></ol><h1 id="第一章判断题"><a href="#第一章判断题" class="headerlink" title="第一章判断题"></a>第一章判断题</h1><ol start="9"><li>(判断题)对象的自治性指的是对象是完全封闭的，不受任何外界影响。 错</li><li>(判断题)类是面向对象程序中的构造単位，也是面向对象程序设计语言的基本成分。  对</li><li>(判断题)C语言对面向对象的发展起到了重要作用。 错</li><li>(判断题)面向对象方法中的对象是从客观世界中抽象出来的一个集合体。 对</li><li>(判断题)面向对象可以保证开发过程中的需求变化完全不会导致系统结构的变化。 错</li><li>(判断题)面向对象方法就是使用面向对象的程序设计语言进行编程。  错</li><li>(判断题)软件就是程序，编写软件就是编写程序。  错</li><li>(判断题)软件危机的只要表现就是软件需求增加，软件价格上升。  错</li></ol><h1 id="第二章判断题"><a href="#第二章判断题" class="headerlink" title="第二章判断题"></a>第二章判断题</h1><ol start="9"><li>(判断题)UML适用于以体系结构为中心的开发过程，但不适合在具有迭代特征的开发过程中使用。 错</li><li>(判断题)UML是一种直观化、明确化、构建和文档化软件产物的通用语言。    对</li><li>(判断题)UML提供了一些方法可以让用户创建出新的模型元素。  对</li><li>(判断题)在UML这个名称出现之前，James Rumbaugh和Grady Booch的合并OMT和Booch工作成果被称为UML0.8。   对</li><li>(判断题)1997年11月，UML 1.1规范被OMG全体成员通过，正式被采纳为规范。  对</li><li>(判断题)UML既是一门建模语言，也可以作为一门编程语言。   错</li><li>(判断题)在UML出现之前，众多不同的面向对象的方法同时存在，给用户带来了一定困扰。 对</li><li>(判断题)UML 2.0的出现彻底推翻了UML 1.x中的核心概念，发展成了一门与之前截然不同的建模语言。  错</li><li>(判断题)UML是一种建模语言，是一种标准的表示，是一种方法。   错</li><li>(判断题)UML支持面向对象的主要概念，并与具体的开发过程相关。  错</li></ol><h1 id="第三章填空题"><a href="#第三章填空题" class="headerlink" title="第三章填空题"></a>第三章填空题</h1><ol start="21"><li><p>(填空题)状态图和类图、顺序图不同之处在于，后两种图能够对______建立模型，而状态图只是对______建立模型。<br>(1) 多个对象<br>(2) 1个对象</p></li><li><p>(填空题)UML背后的两个重量级概念是______和______。<br>(1) 用例<br>(2) 面向对象</p></li><li><p>(填空题)软件体系结构是指一个系统的有目的的设计和规划，这个设计规划既不描述______，也不描述___ ，它只描述系统的 ___及其相互的______。<br>(1) 活动<br>(2) 系统怎样开发<br>(3) 组成元素<br>(4) 交互协作</p></li></ol><h1 id="第四章判断题"><a href="#第四章判断题" class="headerlink" title="第四章判断题"></a>第四章判断题</h1><ol start="18"><li>(判断题)在用例图中，Actor仅代表与目标系统进行交互的人。 错</li><li>(判断题)在两个用例中，如果一个用例拥有另一个用例的所有结构、行为和关系，并在此基础上增加了新的特性，则此两个用例之间可以用泛化关系表示。 对 </li><li>(判断题)用例的包含关系与扩展关系在表示法上相似，都是将虚线箭头从基用例指向包含用例（扩展用例）。 错</li><li>(判断题)如果两个用例构成包含关系，则在基用例执行过程中，包含用例一定会执行至少一次。  对</li><li>(判断题)用例元素本身就可以描述该用例所表达的事件或交互过程。   错</li><li>(判断题)用例描述中的前置条件与后置条件分别指的是用例执行前和执行后系统与参与者所处的状态。   对</li><li>(判断题)在用例图中，一个参与者一定对应于现实中的某个特定对象。   错</li><li>(判断题)用例图中的参与者可能对应于现实世界中的人，也可能是其他与系统有交互的事物。   对</li><li>(判断题)参与者就是那些为系统提供输入的人或事物。   错</li><li>(判断题)在用例图中，用例必须由相应的参与者来发起或执行。    对</li><li>(判断题)在绘制用例图时，其中用例的粒度越细越好。   错</li><li>(判断题)参与者位于系统边界外，并不是系统的一部分。   对</li></ol><h1 id="第五章判断题"><a href="#第五章判断题" class="headerlink" title="第五章判断题"></a>第五章判断题</h1><ol start="21"><li>(判断题)里氏替换原则的主要内容是“父类对于子类应该是完全可替换的”。   错</li><li>(判断题)假设班级类（Class）与学生类（Student）之间建立了关联关系，并且约定一个班级至少拥有一个学生，每个学生只能属于一个班级，则关联关系的班级类一端的多重性应设为1..*。   错</li><li>(判断题)在UML中，当接口使用小圆圈表示时，该接口与其他类的实现关系可以被简化为一条实线段。   对</li><li>(判断题)模板类在其参数未确定时，无法创建直接实例。   对</li><li>(判断题)类图主要通过系统中的类及类之间的关系来描述系统的动态结构。   错</li><li>(判断题)任何一个类都必须具有一定数量的属性与操作。   错</li><li>(判断题)接口中的操作不应该包含其具体实现。   对</li><li>(判断题)接口与抽象类的概念是完全相同的。   错</li></ol><h1 id="第六章判断题"><a href="#第六章判断题" class="headerlink" title="第六章判断题"></a>第六章判断题</h1><ol start="5"><li>(判断题)在UML中，对象和类的表示法完全相同。    错</li><li>(判断题)链是关联关系的实例，是两个或多个对象之间的独立连接。   对</li><li>(判断题)每一个对象图只是系统的静态设计视图或静态交互视图的图形表示。   对</li><li>(判断题)对象图显示了某一时刻的一组对象及它们之间的关系。   对</li><li>(判断题)类图可被看作是对象图的实例。   错</li></ol><h1 id="第七章判断题"><a href="#第七章判断题" class="headerlink" title="第七章判断题"></a>第七章判断题</h1><ol start="7"><li>(判断题)包之间表示依赖关系的虚线箭头指向被依赖的包的一方。   对</li><li>(判断题)包中可见性修饰为public的元素表示这些元素可以被项目中的所有包无条件地访问。   错</li><li>(判断题)包的路径名使用前缀来表示出上层包的名称。   对</li><li>(判断题)UML中的所有模型元素都可以被直接包含在包中。   对</li><li>(判断题)包内元素的可见性表示同一个包内的其他元素对该元素的访问权限。   错</li><li>(判断题)在UML中，每个元素只能被包含在一个包中。 对</li><li>(判断题)包只能用来组织UML中的事物，而无法用来组织UML图。   错</li><li>(判断题)包元素是UML中最重要的结构事物之一。   错</li></ol><h1 id="第八章判断题"><a href="#第八章判断题" class="headerlink" title="第八章判断题"></a>第八章判断题</h1><ol start="13"><li>(判断题)每条消息一定关联着至少两个不同的对象，即消息的发送者和接收者。   错</li><li>(判断题)在顺序图中，如果一个对象在接收到消息时还没有被激活，那么这条消息将会激活这个对象。    对</li><li>(判断题)顺序图虽然能表示消息发送的事件顺序，却无法量化地表示出消息发送的具体时间。   对</li><li>(判断题)顺序图中的对象可以在交互开始时已经存在，也可以在交互过程中才被创建。   对</li><li>(判断题)在顺序图中，对象的生命线一定会贯穿整个交互过程。   错</li><li>(判断题)在顺序图中，所有对象的生命线一定会被一个销毁标记所结束。   错</li><li>(判断题)激活表示在这一时间段内对象正在完成某项任务。   对</li><li>(判断题)顺序图从时间顺序上显示了交互过程中信息的交换。   对</li><li>(判断题)顺序图中元素的摆放顺序无关紧要。   错</li></ol><h1 id="第九章判断题"><a href="#第九章判断题" class="headerlink" title="第九章判断题"></a>第九章判断题</h1><ol start="6"><li>(判断题)因为通信图无法表示出对象在交互时的激活，顺序图也无法表示出交互过程中对象间的链，因此两种图所表达的语义是完全不等价的。   错</li><li>(判断题)与关联关系相似，UML也允许对象自身与自身之间建立一条链。   对 </li><li>(判断题)在通信图中，只有通过链连接的对象才能进行消息传递和交互。   错</li><li>(判断题)在通信图中出现的链是静态关联的实例。   错</li><li>(判断题)就语义和表示法而言，通信图中的消息与顺序图中的消息完全相同。   对</li><li>(判断题)通信图是表现对象协作关系的图，它展现了多个对象在协同工作达成共同目标的过程中互相通信的情况。    对</li><li>(判断题)通信图的主要组成元素包括对象、链、生命线和消息。   错</li><li>(判断题)通信图中应该表示出交互发生的时刻系统中存在的所有对象。   错</li><li>(判断题)由于交互时可能会有一组同类型的对象在交互中执行同一个操作，因此通信图提供了多重对象的概念。    对</li><li>(判断题)通信图将对象和时间作为两个维度在图中表示。   错</li></ol><h1 id="第十一章判断题"><a href="#第十一章判断题" class="headerlink" title="第十一章判断题"></a>第十一章判断题</h1><ol start="14"><li>(判断题)在活动图中，合并节点仅有逻辑意义而没有时间和数据上的意义。   对</li><li>(判断题)结合节点与合并节点相似，当控制流进行到该节点时都不需要等待其他控制流的到达。   错</li><li>(判断题)活动图可以像流程图一样表达出顺序、分支及循环控制结构，但语义要比流程图丰富得多。   对</li><li>(判断题)活动图可以在逻辑顺序角度对用例中的各个交互的流进行建模。   对</li><li>(判断题)活动图中必须有且只能有一个开始标记。   对</li><li>(判断题)活动图的控制流与状态图中的转换是语义完全相同的元素。   错</li><li>(判断题)泳道按活动发生的时间将活动图划分为几部分。   错</li><li>(判断题)一个活动不可能属于多个泳道。   对</li><li>(判断题)活动图是一种用于表达系统动态特性的UML图。   对</li><li>(判断题)活动本身是一个原子操作，是不可被中断的。   错</li></ol><h1 id="第十二章判断题"><a href="#第十二章判断题" class="headerlink" title="第十二章判断题"></a>第十二章判断题</h1><ol start="8"><li>(判断题)请求接口（Required Interface）用于定义一个构件所提供的服务。    错</li><li>(判断题)组件是组件图中语义最小的元素。   错</li><li>(判断题)组件是一个封装完好的物理实现单元，与外部完全分离。    对</li><li>(判断题)组件比类的抽象层次要高，类应该从属于某个组件。   对</li><li>(判断题)组件是系统工作产品的一部分，因此exe文件是一个组件，而程序的源文件不能作为一个组件。   错</li><li>(判断题)组件与其提供的接口之间构成依赖关系。   错</li><li>(判断题)在组件图中，组件之间的依赖关系表示组件在某些行为上的对其他组件的依赖。   对</li></ol><h1 id="第十三章判断题"><a href="#第十三章判断题" class="headerlink" title="第十三章判断题"></a>第十三章判断题</h1><ol start="6"><li>(判断题)部署图中节点之间的关联关系，可以对其应用构造型来表示不同类型的通信路径或者通信的实现方式。   对</li><li>(判断题)如果开发的软件只运行在一台机器上且所有与机器交互的设备都已经由操作系统进行连接，这类软件就不必对其设计部署图。   对</li><li>(判断题)部署图与组件图都是用来对系统的物理方面进行建模，因此二者所表达的语义是完全相同的。   错</li><li>(判断题)节点就是一台计算机      错</li><li>(判断题)在部署图中，节点之间可以建立来表示节点的通信      对</li></ol><h1 id="第十四章判断题"><a href="#第十四章判断题" class="headerlink" title="第十四章判断题"></a>第十四章判断题</h1><ol start="10"><li>(判断题)在起始阶段和转化阶段均可以使用到用例图。   对</li><li>(判断题)核心工作流在不同的阶段中可以有所重叠，但各个主要阶段不重叠。   对</li><li>(判断题)RUP的两个阶段之间交接的重要条件被称为迭代条件。   错</li><li>(判断题)RUP的核心工作流有九个，其中六个属于核心工程工作流，三个属于核心支持工作流   对</li><li>(判断题)RUP过程的静态结构通常用“活动”“制品”“参与者”和“工作流”的术语描述。   错</li><li>(判断题)迭代过程指的是在某一个工作流中重复执行工作。   错</li><li>(判断题)制品指的是软件产品，可以有测试版或发布版的可执行文件，但不包括文档。错</li></ol>]]></content>
      
      
      <categories>
          
          <category> 题库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot</title>
      <link href="/2023/08/18/SpringBoot/"/>
      <url>/2023/08/18/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-boot的配置文件和自动配置原理"><a href="#Spring-boot的配置文件和自动配置原理" class="headerlink" title="Spring boot的配置文件和自动配置原理"></a>Spring boot的配置文件和自动配置原理</h2><h3 id="配置文件的使用"><a href="#配置文件的使用" class="headerlink" title="配置文件的使用"></a>配置文件的使用</h3><h4 id="配置文件的介绍"><a href="#配置文件的介绍" class="headerlink" title="配置文件的介绍"></a>配置文件的介绍</h4><p>Spring Boot使用一个全局的配置文件 核心配置文件，配置文件名在约定的情况下名字是固定的:配置文件的作用: 修改SpringBoot自动配置的默认值; SpringBoot在底层都给我们自动配置好。</p><p>在spring boot框架中，resource文件夹里可以存放配置的文件有两种: properties和yml。</p><ol><li><p>application.properties的用法: 扁平的k&#x2F;v格式。</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8881</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/magichell</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml的用法: 树型结构</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">servlet:</span></span><br><span class="line"><span class="attr">context-path:</span> <span class="string">/magichell</span></span><br></pre></td></tr></table></figure></li></ol><p>两种前者是，而后者是yml的，建议使用后者，因为它的可读性更强。可以看到要转换成YML我们只需把properies里按.去拆分即可.</p><h4 id="yml的基础语法"><a href="#yml的基础语法" class="headerlink" title="yml的基础语法"></a>yml的基础语法</h4><p>k:(空格)v: 表示一对键值对(空格必须有)<br>以空格的缩进来控制层级关系;只要是左对齐的一列数据，都是同一个层级的属性和值也是大小写敏感，</p><h3 id="配置文件的加载顺序"><a href="#配置文件的加载顺序" class="headerlink" title="配置文件的加载顺序"></a>配置文件的加载顺序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**/application*.yml&lt;/include&gt;</span><br><span class="line">&lt;include&gt;**/application*.yaml&lt;/include&gt;</span><br><span class="line">&lt;include&gt;**/application*.properties&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br></pre></td></tr></table></figure><h3 id="外部约定配置文件加载顺序"><a href="#外部约定配置文件加载顺序" class="headerlink" title="外部约定配置文件加载顺序"></a>外部约定配置文件加载顺序</h3><h3 id="Spring-Boot-启动还会扫描以下位置的application-properties或者application-yml文件作为Spring-boot的默认配置文件"><a href="#Spring-Boot-启动还会扫描以下位置的application-properties或者application-yml文件作为Spring-boot的默认配置文件" class="headerlink" title="Spring Boot 启动还会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件"></a>Spring Boot 启动还会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</h3><p>低</p><ol><li><p>classpath根目录下的</p> <img src="/2023/08/18/SpringBoot/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-19%20101816.png" class="" title="屏幕截图 2023-08-19 101816"><ol start="2"><li><p>classpath根config&#x2F;</p> <img src="/2023/08/18/SpringBoot/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-19%20102345.png" class=""><ol start="3"><li><p>项目根目录</p><p> 如果当前项目是继承&#x2F;耦合关系maven项目的话，项目根目象&#x3D;父maven项目的根目录</p><ol start="4"><li><p>项目根目录&#x2F;config </p><ol start="5"><li><p>直接子目录&#x2F;config</p><ol start="6"><li></li></ol> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java -jar configuration_file-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar --spring.config.location=D:\config</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li></ol></li></ol><p>高</p><p><strong>优先级由底到高，高优先级的配置会覆盖低优先级的配置，互补配置。</strong></p><h5 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">optional:<span class="title">classpath</span>:/</span></span><br><span class="line"><span class="function"><span class="title">optional:classpath</span>:/<span class="title">config</span>/</span></span><br><span class="line"><span class="function"><span class="title">optional:file</span>:./</span></span><br><span class="line"><span class="function"><span class="title">optional:file</span>:./<span class="title">config</span>/*/</span></span><br><span class="line"><span class="function"><span class="title">optional:file</span>:./<span class="title">config</span>/</span></span><br><span class="line"><span class="function"><span class="title">optional:classpath</span>:<span class="title">custom</span>-<span class="title">config</span>/--<span class="title">spring.config.location</span></span></span><br><span class="line"><span class="function"><span class="title">optional:file</span>:./<span class="title">custom</span>-<span class="title">config</span>/--<span class="title">spring.config.location</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/18/hello-world/"/>
      <url>/2023/08/18/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="各类编程语言的第一个程序"><a href="#各类编程语言的第一个程序" class="headerlink" title="各类编程语言的第一个程序"></a>各类编程语言的第一个程序</h1><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>代码示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一个程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础学习</title>
      <link href="/2023/08/18/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/18/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h1><ul><li>javaSE：java Standard Edition</li><li>javaME：java Micro Edition</li><li>javaEE：java Enterprise Edition</li></ul><hr><p>JDK:java Development Kit（Java开发包）<br>JRE:java Runtime Environment(java执行环境)<br><strong>JDK包含了JRE</strong></p><hr><p>如何查询Java版本<br><code>java -version</code></p><p><img src="https://img-blog.csdnimg.cn/eb996522e4c347a2ba80a3b6cbefbceb.png" alt="在这里插入图片描述"></p><hr><p>实现你的第一个Java程序{Hello World}</p><ul><li><p>注：所有的Java代码，其后缀都是以Java结尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main &#123;String[] args&#125;&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java程序的执行过程分为两步</p></li></ul><ol><li>编译 <code>Javac Text.java</code></li><li>执行 <code>java Text</code><br>最后就会出现Hello World了</li></ol><hr><p><strong>class 文件是字节码文件，程序最终执行的就是这个字节码（bytecode）文件</strong></p><h1 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h1><p>java中的数据类型分为两类：</p><ol><li>原生数据类型 （primitive Data Type）</li><li>引用数据类型 ｛对象类型｝（Reference Type）</li></ol><hr><p> <strong>java中的原生数据类型共有8种</strong></p><ol><li>整型：使用int表示。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>字节型：使用byte表示。（表示-128~127之间的256个整数）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>短整型：使用short表示。（占比16位）</li><li>长整型：使用long表示。（占比64位）</li><li>单精度浮点型：使用float表示。所谓浮点型，指的就是小数。也叫作实数。</li><li>双精度浮点型：使用double表示。双精度浮点型表示的数据范围要比单精度浮点型要大。<br><code>即便double类型的值处于float类型的范围内也是不可以的。总之，能否成功赋值取决于等号右边的值的类型与等号左边的值的类型是否一致。</code><br><strong>问：如何将double类型转换为float类型的变量？<br>答: 强制转换，强制转换的语法是：类型 变量名 &#x3D; （类型）变量值</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*第一种方法*/</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span>(<span class="type">float</span>) <span class="number">1.2</span>;<span class="comment">//强制转换</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*第二种方法*/</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">1.2f</span>;<span class="comment">//强制转换</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>字符型：使用char表示（char是character的缩写）。所谓的字符，就是单个的字符表示，比如字母a,或中文张，外面用单引号包围上，比如char a &#x3D; ‘b’; char b &#x3D; ‘张’；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>布尔类型，使用boolean表示。布尔类型只有两种可能值，分别是true或者是flase。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span>  <span class="variable">a</span> <span class="operator">=</span> flase;</span><br><span class="line">        System.out,println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>可以将表示范围小的值赋给表示范围大的变量，但直接不能将表示范围大的值赋给表示范围小的变量，只能通过强制类型转换实现。</code><br>​</p><h1 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h1><ol><li>java中所有浮点类型默认情况下都是double。不能将double类型的值赋给float类型的变量，即便该double类型的值处于float类型的范围内也是不可以的。总之，能否成功赋值取决于等号右边的值的类型与等号左边的变量类型是否一致</li><li><strong>如何将double类型的值赋给float类型的变量？</strong><br>强制类型转换，将double类型的值强制转换为float类型<br><strong>强制转换的语法：类型 变量名 &#x3D; （类型） 变量值</strong></li><li>变量在使用前必须要赋值；变量必须要声明其类型方可使用；变量在使用前必须要定义，并且只能定义一次。</li></ol><h1 id="第四讲"><a href="#第四讲" class="headerlink" title="第四讲"></a>第四讲</h1><ol><li>当有若干个变量参与运算时，结果类型取决于这些变量中表示范围最大的那个变量类型。</li></ol><p>比如：参与运算的变量中，有整型 int ， 有双精度浮点型double，有短整型short，那么最后的结果类型就是double。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;<span class="comment">//3</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> a - b;<span class="comment">//-1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> a/b;<span class="comment">//0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> a*b;<span class="comment">//2</span></span><br><span class="line">        System.out.println(c); </span><br><span class="line">        System.out.println(d); </span><br><span class="line">        System.out.println(e); </span><br><span class="line">        System.out.println(f); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//出现double都让路</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> a - b;</span><br><span class="line">        <span class="type">double</span> <span class="variable">e</span> <span class="operator">=</span> a/b;</span><br><span class="line">        <span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span> a*b;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println(e);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码中，a 和 b 都是整型，但是通过（double）a这种转换将a转换为一个匿名的变量，该变量的类型是double，但是要注意：a本身依旧是int类型，而不是double类型，这样。(double)a&#x2F;b就是double类型除以int类型，结果自然是double类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">e</span> <span class="operator">=</span> (<span class="type">double</span>) a/b;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取模运算符：使用%表示。【取模的规律：取模的结果符号永远与被除数的符号相同】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a % b;</span><br><span class="line">       System.out.println (c);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第五讲"><a href="#第五讲" class="headerlink" title="第五讲"></a>第五讲</h1><ol><li>关系运算符：大于（&gt;），小于（&lt;），等于（&#x3D;&#x3D;）， 不等于（!&#x3D;），大于等于（&gt;&#x3D;）,小于等于（&lt;&#x3D;），关系运算的结果是个boolean值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span> ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> ( a&gt;b );</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果显示（true）*/</span></span><br></pre></td></tr></table></figure><p>2.逻辑运算符：重点讲解两个，逻辑运算符本身也返回一个boolean值。</p><p>1）逻辑与：使用&amp;&amp;表示，逻辑与是个双目运算符（即有两个操作数的运算符），只有当两个操作数都为真的时候，结果才为真；其余均为假。（逻辑与表示的并且的意思）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">e</span> <span class="operator">=</span> (a &lt; b) &amp;&amp; (c &lt; d);</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果显示：true*/</span></span><br></pre></td></tr></table></figure><p>2）逻辑或：使用||表示，逻辑或也是个双目运算符，只有当两个操作数都为假的时候，结果才为假；其余情况都为真。（逻辑或表示或者的意思）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">e</span> <span class="operator">=</span> (a&lt;b)||(c&lt;d);</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果显示：true*/</span></span><br></pre></td></tr></table></figure><p>3）关于逻辑运算符的短路特性。</p><ol><li><p>逻辑与：如果第一个操作数为flase，那么结果肯定就是flase，所以在这种情况下，，将不会执行后面的运算了，即发现了短路现象。</p></li><li><p>逻辑或：如果第一个操作数为true，那么结果肯定就是true，所在在这种情况下，将不会执行逻辑或后面的运算了，即发生了短路现象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">e</span> <span class="operator">=</span> (a &gt; b)||((f = c) &lt; d);</span><br><span class="line">        System.out.println(e); </span><br><span class="line">        System.out.println(f);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果是：true</span></span><br><span class="line"><span class="comment">          5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>4）关于变量的自增与自减运算<br>1.关于 int b &#x3D; a++,作用是将a的值先赋给b，然后再让a自增1。<br>2.关于 int b &#x3D; ++a,作用是将a的值先自增1，然后将自增后的结果赋给b。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String [] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//a += 1;//等价于 a = a + 1;</span></span><br><span class="line">        a++;</span><br><span class="line">        </span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果是：4*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String [] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//a += 1;//等价于 a = a + 1;</span></span><br><span class="line">        ++a;</span><br><span class="line">        </span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果是：4</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String [] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//a += 1;//等价于 a = a + 1;</span></span><br><span class="line">        a--;</span><br><span class="line">        </span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果是：2*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String [] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//a += 1;//等价于 a = a + 1;</span></span><br><span class="line">        --a;</span><br><span class="line">        </span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果是：2*/</span></span><br></pre></td></tr></table></figure><h1 id="第七讲"><a href="#第七讲" class="headerlink" title="第七讲"></a>第七讲</h1><ol><li>java中的循环控制语句一共有三种，分别是while，do…while以及for循环。<br>1）while循环，形式为：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//待执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//循环变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//存储相加后的变量</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(a &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">            sum += a;</span><br><span class="line">            a++;<span class="number">76</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果是：5050*/</span></span><br></pre></td></tr></table></figure><p>​                 2）do……while循环，形式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//待执行的代码</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            sum += a;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(a&lt;=<span class="number">100</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果是：5050*/</span></span><br></pre></td></tr></table></figure><p>while与do……while之间的区别：如果布尔表达式的第一次判断就为false，那么while循环一次也不执行；do…….while循环则会执行一次。如果布尔表达式第一次判断为true，那么while循环与do…….while循环等价。<br>3）for循环（使用最多的一种循环），形式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量初始化；条件判断；步进)&#123;</span><br><span class="line">   <span class="comment">//待执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环的执行过程：<br>1）执行变量初始化。<br>2）执行条件判断。如果条件判断结果为假，那么退出for循环，开始执行循环后面的代码；如果条件判断为真，执行for循环里面的代码。<br>3）执行步进。<br>4）重复步骤2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//存储相加后的结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第八讲"><a href="#第八讲" class="headerlink" title="第八讲"></a>第八讲</h1><p><strong>理想面对程序对象</strong></p><ol><li>break语句：经常用在循环语句中，用于跳出整个循环，执行循环后面的代码。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">5</span> == i)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果是：</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>2.continue语句：经常用在循环语句中，用于跳出当前的这个循环（或者是跳出本次循环），开始下一次循环的执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">5</span> == i)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果是：</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>3.break与continue可以搭配标签使用，在实际开发中，根本没有人会将break与continue搭配标签来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(St  ring[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1</span> == i)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j &lt;= i; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">1</span> == j)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果是：</span></span><br><span class="line"><span class="comment">j=0</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.面向对象程序设计（object oriented programming;oop）<br>1)什么是面向对象？<br>在面向对象程序设计中有两个重要的概念：类（class）与对象（object）。<br>2）类<br>类是一种抽象概念，类包含了数据（通常使用名词来表示）与对数据的操纵（通常使用动词来表示）。比如说人就是一种抽象的概念，人具有姓名、年龄、身高等数据，还有吃饭、跑步等操纵数据的动作。<br><strong>类包含两个内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a）数据，数据在类中称作属性（Property或者attribute）或者叫成员变量（Member variable）</span><br><span class="line">b)对数据的操纵，这种操纵再类中称作方法（method）</span><br></pre></td></tr></table></figure><p>3）对象<br>对象是一种具体的概念，是类的一种具体的表现形式。比如说人是一种类，而张三、李四、王五等具体的人就是对象。</p><h1 id="第九讲"><a href="#第九讲" class="headerlink" title="第九讲"></a>第九讲</h1><ol><li><p>面向对象程序设计的三大基本特征：继承（inheritence）、封装（Encapsulation）、多态（Polymporphism）。</p></li><li><p>封装：类包含了数据与方法，将数据与方法放在一个类中就构成了封装。</p></li><li><p>如何定义类？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符  class 类的名字&#123;</span><br><span class="line">       <span class="comment">//类的内容(包含了属性与方法)</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>方法：如何定义方法？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回类型  方法名称([参数一，参数二，参数三])&#123;</span><br><span class="line">   //方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Main方法是整个JAVA程序的入口点，如果类的定义中没有main方法则程序无法执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Text&#123;</span><br><span class="line">    //两个整数相加</span><br><span class="line">    public int  add(int a,int b)&#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    //两个整数相-</span><br><span class="line">    public int  subtract(int a,int b)&#123;</span><br><span class="line">        return a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    //两个整数相乘</span><br><span class="line">    public int  multiply(int a,int b)&#123;</span><br><span class="line">        return a * b;</span><br><span class="line">    &#125;</span><br><span class="line">    //两个整数相除</span><br><span class="line">    public int  divide(int a,int b)&#123;</span><br><span class="line">        return a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法定义不能嵌套，也就是说不能在一个方法中定义另外一个方法，方法只能定义在类中。</p></li><li><p>关于方法的执行，首先需要定义方法，接下来就可以使用方法（调用方法），当方法调用完毕后，方法可以返回值，方法到底是否返回值是由方法的定义决定的。</p></li><li><p>如何生成对象？通过类来生成对象（通常使用new关键字来生成对象）。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Person&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">类名    变量名    = new 类名；</span><br><span class="line">Person persion1 = new persion();</span><br><span class="line">new之后才是对象</span><br></pre></td></tr></table></figure><ol start="9"><li><p>方法调用需要通过对象来完成。方法调用的形式：</p><p>对象变量.方法名([参数值一，参数值二，参数值三……])</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="comment">//两个整数相加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>  <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个整数相-</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>  <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个整数相乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>  <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个整数相除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>  <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Text</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> text.add(x,y);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol start="10"><li><p>关于方法的注意事项:</p><ol><li>在方法定义中，方法的返回类型与return后面的变量或常量类型保持一致。</li><li>在方法调用时，给方法传递的参数需要与方法定义时的参数保持一致（参数个数保持一致，参数类型保持一致）。</li><li>方法定义时的返回类型与接收方法返回值的变量类型保持一致。</li></ol></li><li><pre><code>public int add (int a,int b)&#123;    return a + b;&#125;方法定义时的参数叫做形式参数。int a = text.add(1,1);方法调用时所赋予的具体值叫做实际参数。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">12. 关键字void 表示方法不返回值</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    class Text&#123;</span><br><span class="line">        //使用void。关键字表示方法不返回值</span><br><span class="line">        public void  output()&#123;</span><br><span class="line">            System.out.println(&quot;Hello world&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        public static void main (String[] args)&#123;</span><br><span class="line">            Text text = new Text();</span><br><span class="line">            text.output();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>如果方法不返回值，那么声明方法的时候使用void关键字。在方法定义中，可以有两种情况实现不返回值：</p><p>a) 不使用return语句。</p><p>b）使用return。但return后面没有任何值或者变量，return后面只有一个分号，表示退出方法，返回到方法调用端。<code>return；</code></p></li></ol><h1 id="第十讲"><a href="#第十讲" class="headerlink" title="第十讲"></a>第十讲</h1><ol><li><p>类中的属性又叫做成员变量（member variable），属性用英文表示为property或者attribute。</p></li><li><p>对象（Object）又叫做实例。生成一个对象的过程又叫做实例化。</p></li><li><p>命名约定</p><p>a) 类：首字母大写，如果一个类名有多个单词构成，那么每个单词的首字母都大写，          中间不使用任何的连接符。比如：Person类，MemberTest类。</p><p>b)方法：首字母小写。如果一个方法由多个单词构成，那么第一个单词的所有字母全都小写，从第二个单词开始，每个单词的首字母大写。比如add，addThreeInt。</p><p>c）属性：命名约定与方法相同。比如age，ageOfPerson。</p></li><li><p>属性需要定义在类中，又叫做成员变量；而定义在方法中的变量叫做局部变量。</p></li><li><p>如何定义属性？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span>&#123;</span><br><span class="line">    修饰符  类型  属性名称；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如何使用属性？与方法一样，使用“.”运算符。首先需要生成类的实例，然后使用实例+“.”到方式来使用属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person = new person();</span><br><span class="line">person.age</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Persion</span> <span class="variable">persion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Persion</span>();</span><br><span class="line">        System.out.println(Persion.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/a20a89011c95476ff2d72c46473e6dfb.png" alt="在这里插入图片描述"></p><ol start="7"><li><p>局部变量使用前必须要声明并赋初值；中原变量使用前必须要声明，但可以不赋初值。</p></li><li><p>成员变量与局部变量的联系与区别：</p><p>a）没有，无论是成员变量还是局部变量，使用前都需要声明嗯或定义。</p><p>b）对于局部变量来说，使用前必须要初始化；对于成员变量来说，使用前可以不初始化。如果没有初始 化成员变量就开始使用，那么每个类型的成员变量都有一个默认的初始值。</p><p>​    i. byte、short、int、long类型的初始值为0</p><p>​    ii. float、double类型的初始值为0.0</p><p>​    iii. char类型的初始值为“\u0000”</p><p>​    iiii. boolean类型的初始值为false</p></li><li><p>引用类型（reference type），引用类型是用在对象上的。一个对象可以被多个引用所指向，但同一时刻，每个引用只能指向唯一的一个对象。如果一个对象被多个引用所指向，那么无论哪个引用对对象的属性进行了修改，都会反应到其他的引用当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">One</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(One one)</span>&#123;</span><br><span class="line">        one.age = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">One</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">One</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> one.age;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        one.change(one);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age2</span> <span class="operator">=</span> one.age;</span><br><span class="line">        System.out.println(age2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8f8d6de84058f2afe2dddd51b6ce02d9.png"></p></li></ol><h1 id="第十一讲"><a href="#第十一讲" class="headerlink" title="第十一讲"></a>第十一讲</h1><ol><li><p>如果一个类包含了属性与方法，那么该类的每个对象都具有自己的属性，但无论一个类有多少对象，这些对象共享同一个方法。</p></li><li><p>关于方法参数传递的总结：对于JAVA中的方法参数传递，无论传递的是原生数据类型还是引用类型，统一是传值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.change(person);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> persion.age;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        person.change1(i);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        person.age = <span class="number">30</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change1</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        age = <span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>什么类型的引用就能指下什么类型的对象，比如People类型的引用就能指向People类型的对象，但不能指向student类型的对象。比如:</p><p>People people &#x3D; new People();&#x2F;&#x2F;正确</p><p>People people &#x3D; new Student();&#x2F;&#x2F;错误</p></li></ol></li><li><p>构造方法（Constructor）：构造方法用于完成对象属性的初始化工作。构造方法的特点：</p><ol><li>构造方法的名字必须与类名完全一致（包括大小写）。</li><li>构造方法没有返回值，连void也不能出现。</li><li>如果在定义一个类的时候，没有喂类声明构造方法。那么JAVA编译器会自动为类添加一个没有参数且方法体为空的构造方法（默认的构造方法）。</li><li>如果在定义一个类的时候为类声明了构造方法，那么JAVA编译器就不会再被类添加构造方法了。</li><li>不能显示调用类的构造方法，构造方法通常是通过new关键字隐式调用。</li></ol></li><li><p>New关键字在生成对象时完成了三件事情：</p><ol><li>为对象开辟内存空间</li><li>调用类的构造方法</li><li>将生成的对象地址返回（返回给引用）</li></ol></li><li><p>默认的构造方法：构造方法没有参数，且方法体为空。</p></li><li><p>使用new来生成对象的时候，后面的小括号（）表示构造方法的参数列表，如果构造方法不接受参数，那么小括号中的内容为空；如果构造方法接收参数，那么小括号中的实际参数就要与构造方法定义中的形式参数保持一致（参数的数量一致、参数的类型一致、按照顺序逐一的赋值）。</p></li></ol><h1 id="第十二讲"><a href="#第十二讲" class="headerlink" title="第十二讲"></a>第十二讲</h1><ol><li><p>注释：注释是给人看的，不是给计算机看的。JAVA中共有三种类型的注释：</p><ol><li>单行注释：以&#x2F;&#x2F;开头，&#x2F;&#x2F;后面的所有内容均被当作注释做注释处理。</li><li>多行注释：以&#x2F;<em>开头，以</em>&#x2F;结束，中间的所有内容均被当做注释处理，多行注释来源于c&#x2F;c++。关于多行注释，需要注意的是，多行注释不能嵌套。</li><li>另一种多行注释用于产生JAVA doc帮助文档。</li></ol></li><li><p>强制类型转换</p><p>float f &#x3D; 1.2f;</p><p>float f &#x3D; (float)1.2;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlaotText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">flaot</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">1.2f</span>;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>轻量级文本编译器：vi,vim,gvim,UItraEdit,Editplus</p></li><li><p>类是一种抽象的概念，对象是类的一种具体表示形式，是具体的概念。先有类，然后由类来生成对象，对象又叫做实例。</p></li><li><p>类有两大部分构成：属性以及方法，属性一般用名词来表示，方法一般用动词来表示。  </p></li><li><p>如果有一个JAVA源文件中定义了多个类，那么这些类最多只能有一个类是pub换句话说定义的多个类可以都不是public的。</p></li><li><p>在JAVA中进行方法的参数传递时，无论传递的是原生数据类型还是引用类型，参数传递方式统一是传值，JAVA中没有传引用的概念。</p><p><strong>第十二讲到第十六讲都为复习！！！</strong></p></li></ol><h1 id="第十七讲"><a href="#第十七讲" class="headerlink" title="第十七讲"></a>第十七讲</h1><ol><li><p>方法重载（Overload）：表示两个或多个方法名字相同，但方法参数不同。方法参数不同有两层含义：1. 参数个数不同。2. 参数类型不同。注意：方法的返回值对重载没有任何影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teat</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Teat</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teat</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> test.add(<span class="number">1</span>+<span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> test.add(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(result2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法重载：只需要看参数即可。如果想在一个构造方法中调用另外一个构造方法，那么可以使用this()的方式调用，this()括号中的参数表示目标构造方法的参数。this()必须要作为构造方法的第一条语句，换句话说，this()之前不能有任何可执行的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">One</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">One</span><span class="params">()</span>&#123;</span><br><span class="line">        Systerm.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">One</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        System.out.println(++i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mian</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">One</span> <span class="variable">co</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">One</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承（inheritance）：Java是单继承的，意味着一个类只能从另一个类继承（被继承的类叫做父类【基类，base class】,继承的类叫做子类），Java中的继承使用extends关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> extents Parent&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Child</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;parent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当生成子类对象时，JAVA默认首先调用父类的不带参数的构造方法。然后执行该构造方法生成父类的对象，接下来再去调用子类的构造方法，生成子类的对象。【要想生成子类的对象，首先需要生成父类的对象，没有父类对象就没有子类对象，比如说没有父亲就没有孩子。】</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> extents Parent&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">1</span>);<span class="comment">//调用父类特定的构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;child&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Child</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;parent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>super关键字：super表示对父类对象的引用。</p></li><li><p>如果子类使用super（）显示调用父类的某个构造方法，那么在执行的时候就会寻找与super（）所对应的构造方法而不会再去寻找父类的不带参数的构造方法。与this一样，super也必须要作为构造方法的第一条执行语句。前面不能有其他可执行的语句。</p></li><li><p>关于继承有以下几点：</p><ol><li>父类有的，子类也有。</li><li>父类没有的，子类可以增加。</li><li>父类有的，子类可以改变。</li></ol></li><li><p>关于继承的注意事项</p><ol><li>构造方法不能被继承。</li><li>方法和属性可以被继承。</li><li>子类的构造方法隐式的调用父类的不带参数的构造方法。</li><li>当弗雷没有不带参数的构造方法时，子类需要使用super来显示的调用父类的构造方法，super指的是对父类的引用。</li><li>super关键字必须是构造方法中的第一行语句。</li></ol></li></ol><h1 id="第十八讲"><a href="#第十八讲" class="headerlink" title="第十八讲"></a>第十八讲</h1><ol><li><p>方法重写（Override）又叫做覆写：子类与父类的方法返回类型一样，方法名称一样，参数一样，这样我们说此类与父类的方法构成了重写关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lianxi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal is runing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/8c495e753639097f8771eaa01da57421.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lianxi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal is runing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/78d5a7d72e9e00011da4858208a45964.png" alt="在这里插入图片描述"></p><ol start="2"><li>方法重写与方法重载之间的关系：重载发生在同一个类内部的两个或多个方法。重写发生在父类与子类之间。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lianxi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.run(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal is runing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.run();<span class="comment">//调用父类的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;dog is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b1375f7461a17e9830e21865d778dae9.png" alt="在这里插入图片描述"><br>3. 当两个方法形成重写关系时，可以在子类方法中通过super.run()形式调用父类的run()方法，其中super.run（）形式调用父类的run（）方法，其中super.run()不必放在第一行语句，因此此时父类对象已经构造完毕，先调用父类的run()方法是根据程序的逻辑决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lianxi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.run(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal is runing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog is running&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.run();<span class="comment">//调用父类的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2fdf05257e0394199ed14e5e53441fd4.png" alt="在这里插入图片描述"><br>4. 在定义一个类的时候，如果没有显试指定该类的父类，那么该类就会继承于java.lang.Object类（JDK提供的一个类，Object类是JAVA中所有类的直接或间接的父类）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lianxi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grandpa</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Grandpa</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Grandpa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">Grandpa</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span>  <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a9ecc90105adf78cfbae83670a321ad2.png" alt="在这里插入图片描述"><br>5. 多态（Polymorphism）:我们说子类就是父类（玫瑰花是花，男人是人），因此多态的意思就是：父类型的引用可以指向子类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lianxi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Flower</span> <span class="variable">rose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rose</span>();<span class="comment">//多态</span></span><br><span class="line">        rose.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flower</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;it is singing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rose</span> <span class="keyword">extends</span> <span class="title class_">Flower</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/68b9e1fcd3d88e7dfe2c4ef98d1718db.png" alt="在这里插入图片描述"></p><h1 id="第十九讲"><a href="#第十九讲" class="headerlink" title="第十九讲"></a>第十九讲</h1><ol><li><p>多态：父类型的引用可以指向子类型的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lianxi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Parent</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">        child.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;parent is singing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child is singing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/5249c825efda6ea8785e9c64ed44d195.png" alt="在这里插入图片描述"><br>2. Parent child &#x3D; new Child();当使用多态方式调用方法时，首先检查父类是否有sing()方法，如果没有编译错误；如果有，再去调用子类的sing()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lianxi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span>  (Dog)a;</span><br><span class="line">        dog.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span> <span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal is singing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is singing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/cef768f4cc2989d6ea1ef09f544b5ecd.png" alt="在这里插入图片描述"></p><h1 id="第二十讲"><a href="#第二十讲" class="headerlink" title="第二十讲"></a>第二十讲</h1><ol><li><pre><code class="java">package lianxi;public class Test2 &#123;    public static void main(String[] args)&#123;        Animal animal = new Dog();        Animal animal2 = new Animal();        animal2 = animal;        animal2.sing();    &#125;&#125;class Animal &#123;    public void sing ()&#123;        System.out.println(&quot;animal is singing&quot;);    &#125;&#125;class Dog extends Animal &#123;    public void sing()&#123;        System.out.println(&quot;Dog is singing&quot;);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> ![在这里插入图片描述](https://img-blog.csdnimg.cn/img_convert/b565c18eb20d66b8cb7c3143ae316d61.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 一共有两种类型的强制类型转换：</span><br><span class="line"></span><br><span class="line">   1. 向上的类型转换（upcast）：比如说将dog类型转换为Animal类型，即将子类型转换为父类型。对于向上类型转换，不需要显示指定。</span><br><span class="line"></span><br><span class="line">      ```java</span><br><span class="line">      package lianxi;</span><br><span class="line">      public class Test2 &#123;</span><br><span class="line">          public static void main(String[] args)&#123;</span><br><span class="line">              //向上类型转换</span><br><span class="line">              Dog dog = new Dog();</span><br><span class="line">              Animal animal = dog;</span><br><span class="line">              animal.sing();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      class Animal &#123;</span><br><span class="line">          public void sing ()&#123;</span><br><span class="line">              System.out.println(&quot;animal is singing&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      class Dog extends Animal &#123;</span><br><span class="line">          public void sing()&#123;</span><br><span class="line">              System.out.println(&quot;Dog is singing&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/f1e0859993c496201dea07b53f6cf0a9.png" alt="在这里插入图片描述"></p><ol start="2"><li><p>向下的类型转换（downcast）：比如将Animal类型转换为dog类型。即将父类型转换为子类型。对于向下类型转换，必须要显示指定（必须要使用强制类型转换）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lianxi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//向下类型转换</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog)a;</span><br><span class="line">        dog.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span> <span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal is singing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is singing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ef73b0a621ee3f1ec6fdd9f972c41d58.png" alt="在这里插入图片描述"></p></li></ol><h1 id="第二十一讲"><a href="#第二十一讲" class="headerlink" title="第二十一讲"></a>第二十一讲</h1><ol><li>抽象类（abstract class ）:使用abstract关键字所修饰的累叫做抽象类。抽象类无法实例化，也就是说，不能new出来一个抽象类的对象（实例）。<br><strong>错误演示</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package exercise;</span><br><span class="line"></span><br><span class="line">public class exercise001 &#123;</span><br><span class="line">    public static void main (String[] args)&#123;</span><br><span class="line">        T t = new T();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//使用abstract关键字所修饰的累叫做抽象类。</span><br><span class="line">abstract class T&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0ba2a463cae44625beca1b9afafa9b63.png" alt="在这里插入图片描述"><br>2. 抽象方法（abstract method）:使用abstract关键字所修饰的方法叫做抽象方法。<em><strong>抽象方法需要定义在抽象类中。</strong></em> 相对于抽象方法，之前所定义的方法叫做具体方法（有声明，有实现）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用abstract关键字所修饰的累叫做抽象类。</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/013d0f601df69680f4398a812da479d1.png" alt="在这里插入图片描述"><br>3. 如果有一个类包含了抽象方法，那么这个类一定是个抽象类。<br>4. 如果某个类是抽象类，那么该类可以包含具体方法（有声明，有实现）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用abstract关键字所修饰的累叫做抽象类。</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/cb876ae8efe405321058cffed5c49c10.png" alt="在这里插入图片描述"><br>5. 如果一个类中包含了抽象方法，那么这个类一定要声明成abstract class ，也就是说，该类一定是抽象类；反之，如果某个类是抽象类，那么该类既可以包含抽象方法，也可以包含具体方法。<br>6. 无论何种情况，只要一个类是抽象类，那么这个类就无法实例化。<br>7. 在子类继承父类（父类是一个抽象类）的情况下，那么该子类必须要实现父类中所定义的所有抽象方法；否则，该子类需要声明一个<strong>abstract class</strong> 。<br><em><strong>错误示范</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用abstract关键字所修饰的累叫做抽象类。</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">R</span> <span class="keyword">extends</span> <span class="title class_">T</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a93c911ae8c2022d643d78864c959259.png" alt="在这里插入图片描述"><br><em><strong>正确示范</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用abstract关键字所修饰的累叫做抽象类。</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">R</span> <span class="keyword">extends</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/747f34187aa0b2a9bcc909411888b29e.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//R r = new R();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用abstract关键字所修饰的累叫做抽象类。</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">R</span> <span class="keyword">extends</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b4f65a0359ffeb96f084ce1935e15436.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise002</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Triange</span>(<span class="number">10</span>,<span class="number">6</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> shape.computeArea();</span><br><span class="line">        System.out.println(area);</span><br><span class="line">        shape = <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">areas</span> <span class="operator">=</span> shape.computeArea();</span><br><span class="line">        System.out.println(areas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">computeArea</span><span class="params">()</span>;<span class="comment">//计算形状面积</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triange</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">    <span class="type">int</span> width;</span><br><span class="line">    <span class="type">int</span> heights;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Triange</span><span class="params">(<span class="type">int</span> width,<span class="type">int</span> heights)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;<span class="comment">//自己获取自己</span></span><br><span class="line">        <span class="built_in">this</span>.heights= heights;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">computeArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width * heights /<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">    <span class="type">int</span> width;</span><br><span class="line">    <span class="type">int</span> heights;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> width,<span class="type">int</span> heights)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.heights = heights;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">computeArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width * heights;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ae5233b528794ccbd8c73f25a68295cc.png" alt="在这里插入图片描述"></p><h1 id="第二十二讲"><a href="#第二十二讲" class="headerlink" title="第二十二讲"></a>第二十二讲</h1><ol><li>接口（interface）：接口的地位等同于class, <strong>接口中所有方法都是抽象方法。</strong> 在声明接口中的方法时，可以使用abstract关键字，也可以不使用。通常情况下，都会省略掉abstract关键字。（有声明，无实现）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">exercise003</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/img_convert/5118ed222df0b9bbb85623459b598e39.png" alt="在这里插入图片描述"></li><li>可以将接口看作是特殊的抽象类（抽象类中可以有具体方法，也可以有抽象方法，而接口中只能有抽象方法，不能有具体方法）。</li><li>类可以实现接口，实现使用关键字implements表示，代表了某个类实现了某个接口。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise003</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Myclass</span> <span class="variable">myclass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myclass</span>();</span><br><span class="line">        myclass.output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myclass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;output&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/23442f953476d0038f76d743e853fdd6.png" alt="在这里插入图片描述"><br>4. 一个类实现了某个接口，那么该类必须要实现接口声明的所有方法。如果该类是个抽象类，那么就无需实现接口中的方法了。<br>5. Java是单继承的，也就是说某个类只能有唯一一个父类；一个类可以实现多个接口，多个接口之间使用逗号分隔。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise003</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Myclass</span> <span class="variable">myclass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myclass</span>();</span><br><span class="line">        myclass.output();</span><br><span class="line">        myclass.output2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myclass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span>,MyInterface2&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;output&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;output2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5d3bc0fa9bcd9250798a0d26421fda2d.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise003</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Myclass</span> <span class="variable">myclass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myclass</span>();</span><br><span class="line">        myclass.output();</span><br><span class="line">        myclass.output2();</span><br><span class="line">        myclass.output3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myparent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;output3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myclass</span> <span class="keyword">extends</span> <span class="title class_">Myparent</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span>,MyInterface2&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;output&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;output2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/804ae2b6c3abd1be6dcf288f15d2515d.png" alt="在这里插入图片描述"><br>6. 多态：所谓多态，就是父类型的引用可以指向子类型的对象，或者接口类型的引用可以指向实现该接口的类的实例。关于接口与实现接口的类之间的强制类型转换方式与父类和子类之间的强制类型转换方式完全一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise004</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mian</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">AA</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();<span class="comment">//多态</span></span><br><span class="line">        bb.output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span>  <span class="title class_">AA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">implements</span> <span class="title class_">AA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0583f6c352ca418a07059f12b099aec4.png" alt="在这里插入图片描述"><br>7. Static 关键字：可以用于修饰属性，也可以用于修饰方法，还可以用于修饰类。<br>8. static 修饰属性：无论一个类生成了多少个对象，所有这些对象共同使用唯一一份静态成员变量；一个对象对该静态成员变量进行了修改，其他对象的该静态成员变量的值也随之发生变化。如果一个成员变量是static的，那么我们可以通过 <strong>类名.成员变量名</strong> 的方式来使用它（Java推荐我们使用这种方法）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise005</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">MyStatic</span> <span class="variable">myStatic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyStatic</span>();</span><br><span class="line">        <span class="type">MyStatic</span> <span class="variable">myStatic1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyStatic</span>();</span><br><span class="line">        myStatic.a = <span class="number">10</span>;</span><br><span class="line">        System.out.println(myStatic1.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStatic</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4f8a2631b9c7f2efa9b6d998e77f460f.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise005</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">MyStatic</span> <span class="variable">myStatic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyStatic</span>();</span><br><span class="line">        myStatic.a = <span class="number">10</span>;</span><br><span class="line">        System.out.println(myStatic.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStatic</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/88e715056d0a8694d3e63f47a992f031.png" alt="在这里插入图片描述"></p><h1 id="第二十三讲"><a href="#第二十三讲" class="headerlink" title="第二十三讲"></a>第二十三讲</h1><ol><li>static 修饰方法：static 修饰的方法叫做静态方法。对于静态方法来说，可以使用类名.方法名的方式来访问。<br><em><strong>正常</strong></em></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise006</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">MyStatic2</span> <span class="variable">test</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MyStatic2</span>();</span><br><span class="line">        test.out();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStatic2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ba1a7426af97fe8c6a4b40070d2b0b0f.png" alt="在这里插入图片描述"><br><em><strong>修正后的</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise006</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        MyStatic2.out();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStatic2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2068582e7d2b630b9576bac0f5da187e.png" alt="在这里插入图片描述"><br><em><strong>对比</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise007</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">N</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">N</span>();</span><br><span class="line">        n.output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">N</span> <span class="keyword">extends</span> <span class="title class_">M</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/57725ce7ecc4fe5f12343e88e2327add.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise007</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">M</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">N</span>();</span><br><span class="line">        m.output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">N</span> <span class="keyword">extends</span> <span class="title class_">M</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e25ecd246773734c82f3956a7be19256.png" alt="在这里插入图片描述"><br> <strong>2. 静态方法只能继承，不能重写（Override）。</strong><br> 3. final关键字：final可以修饰属性、方法、类。<br> 4. final修饰类：当一个类被final所修饰时，表示该类是一个终态类，即不能被继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise008</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">F</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">F</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">E</span>&#123;<span class="comment">//表示该类不能被继承</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span> <span class="keyword">extends</span> <span class="title class_">E</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9d81b517f6cf9e69990d50d91e5cc85e.png" alt="在这里插入图片描述"><br>5. final修饰方法：当一个方法被final所修饰时，表示该方法是一个终态方法，即不能被重写（Override） 。<br><em><strong>错误示例</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise008</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">H</span> <span class="variable">h</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">H</span>();</span><br><span class="line">        h.out();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">G</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">H</span> <span class="keyword">extends</span> <span class="title class_">G</span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ea71f63ac4d55be2177316fdc52d1f2c.png" alt="在这里插入图片描述"><br>6. final 修饰属性：当一个属性被final所修饰时，表示该属性不能被改写。<br><em><strong>错误示例</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise008</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">        people.age = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b75c0bc5fb0e868edf57233466dfa1d5.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise008</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">        people.address.name = <span class="string">&quot;shanghai&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;dalian&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>可以执行</strong></em><br><img src="https://img-blog.csdnimg.cn/img_convert/128130f4bd43c029122fdf104133f055.png" alt="在这里插入图片描述"><br>7. 当final修饰一个原生数据类型时，表示该原生数据类型的值不能发生变化（比如说不能从10变成20）；如果final修饰一个引用类型时，表示该引用类型不能在指向其他对象了；但该引用所指向的对象的内容是可以发生变化的。</p><h1 id="第二十四讲"><a href="#第二十四讲" class="headerlink" title="第二十四讲"></a>第二十四讲</h1><ol><li>对于final类型成员变量，一般来说有两种赋初值方式：<ol><li>在声明final类型的成员变量时就赋上初值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise009</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在声明final类型的成员变量时不赋初值，但在类的所有构造方法中都为其赋上初值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise009</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">exercise009</span><span class="params">()</span>&#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">exercise009</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>static 代码块：静态代码块。静态代码块的作用也是完成一些初始化工作。首先执行静态代码块，然后执行构造方法。静态代码块在类被加载的时候执行，而构造方法是在生成对象的时候执行；要想调用某个类来生成对象，首先需要将类加载到Java虚拟机上（JVM），然后由jvm加载这个类来生成对象。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise009</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">P</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">P</span>();</span><br><span class="line">        <span class="type">P</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">P</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">P</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;P out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/img_convert/5e41b2ad74c06493be930c575e7108aa.png" alt="在这里插入图片描述"></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise009</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">S</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;P static block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">P</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;P out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Q</span> <span class="keyword">extends</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Q static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Q</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Q out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S</span> <span class="keyword">extends</span> <span class="title class_">Q</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;S static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">S</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;S out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/1ef8d1a7221639f784db5255f4ba35ff.png" alt="在这里插入图片描述"><br>3. 类的静态代码块只会执行一次，是在类被加载的时候执行的，因为每个类只会被加载一次，所有静态代码块也只会被执行一次；而构造方法则不然，每次生成一个对象的时候都会调用类的构造方法，所以new一次就会调用构造方法一次。<br>4. 如果继承体系中既有构造方法，又有静态代码块，那么首先执行最顶层的类的静态代码块，一直执行到最底层类的静态代码块。<strong>注意：静态代码块只会执行一次</strong> 。<br>5. 不能在静态方法中访问非静态成员变量；可以在静态方法中访问静态的成员变量。可以在非静态方法中访问静态的成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise010</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        W.change();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">W</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">()</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><p><strong>总结：静态的只能访问静态的；非静态的可以访问一切</strong></p></li><li><p><strong>不能在静态方法中使用this关键字。</strong></p></li><li><p>多态：父类型的引用可以指向子类型的对象。</p></li><li><p>Parent child &#x3D; new Child();当使用多态方式调用方法时，首先检查父类是否有sing()方法，如果没有编译错误；如果有，再去调用子类的sing()方法。</p></li><li><p>一共有两种类型的强制类型转换：</p><ol><li>向上的类型转换（upcast）：比如说将dog类型转换为Animal类型，即将子类型转换为父类型。对于向上类型转换，不需要显示指定。</li><li>向下的类型转换（downcast）：比如将Animal类型转换为dog类型。即将父类型转换为子类型。对于向下类型转换，必须要显示指定（必须要使用强制类型转换）。</li></ol></li><li><p>抽象类（abstract class ）:使用abstract关键字所修饰的累叫做抽象类。抽象类无法实例化，也就是说，不能new出来一个抽象类的对象（实例）。</p></li><li><p>抽象方法（abstract method）:使用abstract关键字所修饰的方法叫做抽象方法。<em><strong>抽象方法需要定义在抽象类中。</strong></em> 相对于抽象方法，之前所定义的方法叫做具体方法（有声明，有实现）。</p></li><li><p>如果有一个类包含了抽象方法，那么这个类一定是个抽象类。</p></li><li><p>如果某个类是抽象类，那么该类可以包含具体方法（有声明，有实现）。</p></li><li><p>如果一个类中包含了抽象方法，那么这个类一定要声明成abstract class ，也就是说，该类一定是抽象类；反之，如果某个类是抽象类，那么该类既可以包含抽象方法，也可以包含具体方法。</p></li><li><p>无论何种情况，只要一个类是抽象类，那么这个类就无法实例化。</p></li><li><p>在子类继承父类（父类是一个抽象类）的情况下，那么该子类必须要实现父类中所定义的所有抽象方法；否则，该子类需要声明一个<strong>abstract class</strong> 。</p></li><li><p>接口（interface）：接口的地位等同于class, <strong>接口中所有方法都是抽象方法。</strong> 在声明接口中的方法时，可以使用abstract关键字，也可以不使用。通常情况下，都会省略掉abstract关键字。（有声明，无实现）。</p></li><li><p>可以将接口看作是特殊的抽象类（抽象类中可以有具体方法，也可以有抽象方法，而接口中只能有抽象方法，不能有具体方法）。</p></li><li><p>类可以实现接口，实现使用关键字implements表示，代表了某个类实现了某个接口。</p></li><li><p>一个类实现了某个接口，那么该类必须要实现接口声明的所有方法。如果该类是个抽象类，那么就无需实现接口中的方法了。</p></li><li><p>Java是单继承的，也就是说某个类只能有唯一一个父类；一个类可以实现多个接口，多个接口之间使用逗号分隔。</p></li><li><p>多态：所谓多态，就是父类型的引用可以指向子类型的对象，或者接口类型的引用可以指向实现该接口的类的实例。关于接口与实现接口的类之间的强制类型转换方式与父类和子类之间的强制类型转换方式完全一样。</p></li><li><p>Static 关键字：可以用于修饰属性，也可以用于修饰方法，还可以用于修饰类。</p></li><li><p>static 修饰属性：无论一个类生成了多少个对象，所有这些对象共同使用唯一一份静态成员变量；一个对象对该静态成员变量进行了修改，其他对象的该静态成员变量的值也随之发生变化。如果一个成员变量是static的，那么我们可以通过 类名.成员变量名 的方式来使用它（Java推荐我们使用这种方法）。</p></li><li><p>static 修饰方法：static 修饰的方法叫做静态方法。对于静态方法来说，可以使用类名.方法名的方式来访问。</p></li><li><p><strong>静态方法只能继承，不能重写（Override）。</strong></p></li><li><p>final关键字：final可以修饰属性、方法、类。</p></li><li><p>final修饰类：当一个类被final所修饰时，表示该类是一个终态类，即不能被继承。</p></li><li><p>final修饰方法：当一个方法被final所修饰时，表示该方法是一个终态方法，即不能被重写（Override） 。</p></li><li><p>final 修饰属性：当一个属性被final所修饰时，表示该属性不能被改写。</p></li><li><p>当final修饰一个原生数据类型时，表示该原生数据类型的值不能发生变化（比如说不能从10变成20）；如果final修饰一个引用类型时，表示该引用类型不能在指向其他对象了；但该引用所指向的对象的内容是可以发生变化的。</p></li><li><p>类的静态代码块只会执行一次，是在类被加载的时候执行的，因为每个类只会被加载一次，所有静态代码块也只会被执行一次；而构造方法则不然，每次生成一个对象的时候都会调用类的构造方法，所以new一次就会调用构造方法一次。</p></li><li><p>如果继承体系中既有构造方法，又有静态代码块，那么首先执行最顶层的类的静态代码块，一直执行到最底层类的静态代码块。<strong>注意：静态代码块只会执行一次</strong> 。</p></li><li><p>不能在静态方法中访问非静态成员变量；可以在静态方法中访问静态的成员变量。可以在非静态方法中访问静态的成员变量。</p></li><li><p><strong>总结：静态的只能访问静态的；非静态的可以访问一切</strong></p></li><li><p><strong>不能在静态方法中使用this关键字。</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础学习</title>
      <link href="/2023/08/18/Spring%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/18/Spring%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringFamilyBase"><a href="#SpringFamilyBase" class="headerlink" title="SpringFamilyBase"></a>SpringFamilyBase</h1><p>本人学习spring全家桶的所有练习代码及笔记</p><p>（注解：spring2.5与Java1.8版本不兼容）！！！！！！</p><hr><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><p>在applicationContext.xml中编写的是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        bean:将某一各类交给spring容器来管理，那么这个类就是一个bean里</span></span><br><span class="line"><span class="comment">            id：为指定的bean类获取一个唯一的标识符</span></span><br><span class="line"><span class="comment">            class： 指定bean类的包路径</span></span><br><span class="line"><span class="comment">        bean对象：通过spring容器创建的对象</span></span><br><span class="line"><span class="comment">          scope:常用的值有request、session、prototype（多例）、singleton（单例）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.java.entity.Student&quot;</span> <span class="attr">scope</span> = <span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如何启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        student.study();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><blockquote><p>在Spring框架中，<code>request</code>和<code>session</code>是两个常见的作用域，用于管理Bean的生命周期和可见性。</p><ol><li><p><code>request</code>作用域：当一个Bean被声明为<code>request</code>作用域时，它的实例将与每个HTTP请求相关联，并在请求结束后销毁。这意味着在同一个请求中，多次使用该Bean将得到同一个实例。不同请求之间的Bean实例是独立的。<code>request</code>作用域适用于需要处理每个请求的数据，并且不需要在请求之间共享状态的情况。</p></li><li><p><code>session</code>作用域：当一个Bean被声明为<code>session</code>作用域时，它的实例将与每个用户会话相关联，并在用户会话结束后销毁。用户会话是从用户登录到退出的整个过程。在同一个用户会话中，多次使用该Bean将得到同一个实例。不同用户之间的Bean实例是独立的。<code>session</code>作用域适用于需要在整个用户会话期间保持状态的情况，例如保存用户的登录信息或购物车内容。</p></li></ol><p>要在Spring中声明<code>request</code>或<code>session</code>作用域的Bean，可以使用<code>@Scope</code>注解。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRequestBean</span> &#123;</span><br><span class="line">    <span class="comment">// Bean的定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySessionBean</span> &#123;</span><br><span class="line">    <span class="comment">// Bean的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>MyRequestBean</code>将被声明为<code>request</code>作用域的Bean，而<code>MySessionBean</code>将被声明为<code>session</code>作用域的Bean。请注意，<code>proxyMode</code>属性在使用<code>request</code>或<code>session</code>作用域时通常需要设置为<code>ScopedProxyMode.TARGET_CLASS</code>，以便正确创建代理对象以管理作用域。</p></blockquote><h2 id="传统的单例设计模式"><a href="#传统的单例设计模式" class="headerlink" title="传统的单例设计模式"></a>传统的单例设计模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private static final Student stu = new Student();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////饿汉式</span></span><br><span class="line"><span class="comment">//public static Student getInstance() &#123;</span></span><br><span class="line"><span class="comment">//return stu;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//懒汉式（线程安全问题）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Student <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(student != <span class="literal">null</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当谈到传统的单例模式时，可以考虑饿汉式和懒汉式两种实现方式。</p><ol><li>饿汉式（Eager Initialization）单例模式：<br>在饿汉式中，单例对象在类加载时就被实例化。它的特点是在任何情况下都会创建实例，无论是否使用它。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在饿汉式中，<code>instance</code>是在类加载时创建的，因此保证了线程安全。但是，这种方式可能会在应用程序启动时加载大量资源，因为实例化过程发生在类加载时。如果该单例对象在应用程序运行期间很少使用，这可能会浪费内存。</p><ol start="2"><li>懒汉式（Lazy Initialization）单例模式：<br>在懒汉式中，单例对象在第一次使用时才被实例化。它的特点是延迟加载，只有在需要时才创建实例。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在懒汉式中，<code>instance</code>是在第一次调用<code>getInstance()</code>方法时才被实例化。为了保证线程安全，可以使用<code>synchronized</code>关键字修饰<code>getInstance()</code>方法。然而，这种方式在高并发环境下可能会引起性能问题，因为每次调用<code>getInstance()</code>都要获取锁。</p><p>需要注意的是，以上示例代码是传统的单例模式实现。在实际开发中，也可以考虑其他更好的单例模式实现方式，如基于静态内部类的单例模式或使用枚举类型实现的单例模式。这些实现方式能够更好地处理线程安全性和懒加载的问题，并提供更简洁的代码。</p></blockquote><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lazy-init:指定spring容器创建对象的时机，default\true\false </span></span><br><span class="line"><span class="comment">    true:懒加载，只有使用某一个对象的时候，这儿对象才会被创建。节省内存资源</span></span><br><span class="line"><span class="comment">    default、false ：非懒加载，容器启动的时候对象就会被创建。占用内存资源，使用的较多，防止运行时异常</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;person&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;cn.java.lazy2.Person&quot;</span> <span class="attr">lazy-init</span> = <span class="string">&quot;default&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在Spring框架中，<code>lazy-init</code>是一个常用的属性，用于控制Bean的延迟初始化。当设置为<code>lazy-init=&quot;true&quot;</code>时，Bean将在首次被请求时才进行初始化；而当设置为<code>lazy-init=&quot;false&quot;</code>时，Bean将在应用程序启动时立即进行初始化。</p><p>可以在Spring配置文件（如XML配置文件）中使用<code>lazy-init</code>属性来配置Bean的延迟初始化。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyBean&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Bean的其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>myBean</code>被配置为延迟初始化。当Spring容器启动时，该Bean不会立即被实例化，而是在首次被请求时才进行初始化。</p><p>延迟初始化的优点是可以节省系统启动时间和资源占用，特别是对于那些很少被使用的大型对象或资源密集型对象。只有当需要使用该Bean时，才会进行初始化，避免不必要的开销。</p><p>需要注意的是，默认情况下，Spring容器中的单例Bean是在容器启动时进行初始化的（<code>lazy-init=&quot;false&quot;</code>）。因此，如果需要将某个单例Bean配置为延迟初始化，需要显式地将<code>lazy-init</code>属性设置为<code>true</code>。</p><p>另外，对于通过注解方式配置的Bean（如使用<code>@Component</code>或<code>@Bean</code>注解），可以使用<code>@Lazy</code>注解来实现延迟初始化。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy(true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line">    <span class="comment">// Bean的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@Lazy(true)</code>注解可以将<code>MyBean</code>配置为延迟初始化的Bean。</p></blockquote><h3 id="DI（依赖注入）"><a href="#DI（依赖注入）" class="headerlink" title="DI（依赖注入）"></a>DI（依赖注入）</h3><p>DI就是给对象赋值</p><ol><li>第一种：通过get、set方法赋值（必须为实体类中的属性提供访问器、修改器）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span>  (Person)applicationContext.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        person1.setAge(<span class="number">12</span>);</span><br><span class="line">        person1.setUsername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="给实体类list、set、map、property集合类型赋值"><a href="#给实体类list、set、map、property集合类型赋值" class="headerlink" title="给实体类list、set、map、property集合类型赋值"></a>给实体类list、set、map、property集合类型赋值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">&quot;husbantand&quot;</span> <span class="attr">class</span> =<span class="string">&quot;cn.java.di1.Husbantand&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;husbantandNameString&quot;</span> <span class="attr">value</span> =<span class="string">&quot;王五&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;ageInteger&quot;</span> <span class="attr">value</span> = <span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>  <span class="attr">ref</span> = <span class="string">&quot;wife&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;lists&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>王二<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span> = <span class="string">&quot;wife&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>nu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>19<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span> =<span class="string">&quot;husbantandNameString&quot;</span> <span class="attr">value</span> =<span class="string">&quot;admin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span> = <span class="string">&quot;ageInteger&quot;</span> <span class="attr">value</span> = <span class="string">&quot;人&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prop&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc://mysql///dt36<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>第二种：通过有参构造方法</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;person&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;cn.java.lazy2.Person&quot;</span> <span class="attr">lazy-init</span> = <span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;username&quot;</span> <span class="attr">value</span> = <span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;age&quot;</span> <span class="attr">value</span> = <span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;wife&quot;</span> <span class="attr">class</span> =<span class="string">&quot;cn.java.di1.Wife&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">&quot;wifeName&quot;</span>  <span class="attr">value</span> = <span class="string">&quot;小明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;genderString&quot;</span> <span class="attr">value</span> = <span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">&quot;husbantand&quot;</span> <span class="attr">class</span> =<span class="string">&quot;cn.java.di1.Husbantand&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;husbantandNameString&quot;</span> <span class="attr">value</span> =<span class="string">&quot;王五&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;ageInteger&quot;</span> <span class="attr">value</span> = <span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>  <span class="attr">ref</span> = <span class="string">&quot;wife&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过构造方法实现依赖注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;person&quot;</span> <span class="attr">class</span> = <span class="string">&quot;cn.java.di2.Person&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span> = <span class="string">&quot;0&quot;</span> <span class="attr">type</span> = <span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span> = <span class="string">&quot;貂蝉&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span> = <span class="string">&quot;1&quot;</span> <span class="attr">type</span> = <span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">value</span> = <span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通过注解方式实现IOC"><a href="#通过注解方式实现IOC" class="headerlink" title="通过注解方式实现IOC"></a>通过注解方式实现IOC</h2><ol><li><p>在主配置文件中引入注解的相关命名空间</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 和注解相关的命名空间 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置包扫描</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置包扫描</span></span><br><span class="line"><span class="comment">base-package：包名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.java.annotation.ioc1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果某一个类的对象创建过程交给spring容器来处理，则需要在这个类的上面添加注解</p><p> （@Component（控制层）、@Service、@Repository（dao层）、@controller、@Scope{单例，多例}）</p></li></ol><h2 id="通过注解方式实现DI"><a href="#通过注解方式实现DI" class="headerlink" title="通过注解方式实现DI"></a>通过注解方式实现DI</h2><p>如果某一类中的属性需要通过注解的方式实现注入</p><p>@Autowired{快速生成new}</p><blockquote><p>在Spring中，<code>@Autowired</code>注解用于自动装配依赖项，它可以应用在字段、构造函数、Setter方法或者普通方法上。</p><p>以下是<code>@Autowired</code>的用法示例：</p><ol><li><p>字段注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyDependency myDependency;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MyDependency myDependency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(MyDependency myDependency)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myDependency = myDependency;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Setter方法注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MyDependency myDependency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyDependency</span><span class="params">(MyDependency myDependency)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myDependency = myDependency;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MyDependency myDependency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">injectDependency</span><span class="params">(MyDependency myDependency)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myDependency = myDependency;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意事项：</p><ul><li>在使用<code>@Autowired</code>注解时，Spring会根据类型进行自动装配。如果存在多个匹配的候选项，可以使用<code>@Qualifier</code>注解指定要注入的具体实例。</li><li><code>@Autowired</code>注解默认情况下要求依赖项必须存在，如果找不到匹配的依赖项，将抛出异常。可以使用<code>required = false</code>参数来解除这种要求。</li><li><code>@Autowired</code>注解还可以与<code>@Qualifier</code>、<code>@Primary</code>、<code>@Resource</code>等注解一起使用，以更精确地指定要注入的依赖项。</li></ul><p>除了<code>@Autowired</code>注解，Spring还提供了其他的自动装配注解，如<code>@Inject</code>、<code>@Resource</code>等，它们可以实现类似的自动装配功能，但具体用法和细节可能有所不同。</p><p>总结：<code>@Autowired</code>注解是Spring中实现自动装配的关键注解，它可以方便地将依赖项注入到需要的地方，简化了代码的编写和配置。</p></blockquote><p>@Resource注解</p><blockquote><p>在Spring中，<code>@Resource</code>注解用于进行依赖注入，类似于<code>@Autowired</code>注解。它提供了一种通过名称或类型进行自动装配的方式。</p><p>以下是<code>@Resource</code>注解的用法示例：</p><ol><li><p>通过名称进行注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;myDependency&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> MyDependency myDependency;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过类型进行注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyDependency myDependency;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意事项：</p><ul><li>默认情况下，<code>@Resource</code>注解通过名称进行自动装配。当没有提供<code>name</code>属性时，它会根据字段名或方法名与依赖项的名称进行匹配。如果找不到匹配的依赖项，将抛出异常。可以使用<code>name</code>属性明确指定要注入的依赖项的名称。</li><li>如果提供了<code>name</code>属性，<code>@Resource</code>注解将会按照指定的名称进行匹配。这个名称可以是Spring bean的名称或者是其他命名资源的名称。</li><li><code>@Resource</code>注解也可以应用在Setter方法上进行依赖注入。</li><li>和<code>@Autowired</code>注解一样，<code>@Resource</code>注解也可以与<code>@Qualifier</code>注解一起使用，以指定要注入的具体实例。</li><li><code>@Resource</code>注解是Java EE的标准注解，而<code>@Autowired</code>注解是Spring的特有注解。</li></ul><p>总结：<code>@Resource</code>注解提供了一种通过名称或类型进行依赖注入的方式，在Spring中可以用于替代或补充<code>@Autowired</code>注解。它可以方便地将依赖项注入到需要的地方，实现自动装配的功能。</p></blockquote><h2 id="AOP：面向切面"><a href="#AOP：面向切面" class="headerlink" title="AOP：面向切面"></a>AOP：面向切面</h2><ol><li><p>切面—Security、Logging、GC</p></li><li><p>通知：（切面中的方法为通知）</p><ol><li><p>前置通知—Security（方法）（在目标方法前面执行的通知为前置通知）</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span> = <span class="string">&quot;security&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置通知：</span></span><br><span class="line"><span class="comment">method：通知名字</span></span><br><span class="line"><span class="comment">printcut-ref ：指入切入点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">mothod</span> = <span class="string">&quot;checkSecurity&quot;</span> <span class="attr">pointcut-ref</span> = <span class="string">&quot;mdl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>后置通知—Logging、GC（方法）（在目标方法后面执行的通知为后置通知）</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span> = <span class="string">&quot;logging&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span> = <span class="string">&quot;logger&quot;</span> <span class="attr">pointcut-ref</span> = <span class="string">&quot;mdl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span> = <span class="string">&quot;gC&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span> = <span class="string">&quot;clearly&quot;</span> <span class="attr">pointcut-ref</span> = <span class="string">&quot;mdl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>带返回值的后置通知</p></li><li><p>环绕通知</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置环绕通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span> = <span class="string">&quot;auth&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:round</span> <span class="attr">method</span> = <span class="string">&quot;isLogin&quot;</span> <span class="attr">pointcut-ref</span> = <span class="string">&quot;mdl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:round</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>异常通知</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置异常通知 </span></span><br><span class="line"><span class="comment">public void handAllException(Throwable ex) &#123;</span></span><br><span class="line"><span class="comment">参数要一致</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span> = <span class="string">&quot;glibal&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span> = <span class="string">&quot;handAllException&quot;</span> <span class="attr">pointcut-ref</span> = <span class="string">&quot;mdl&quot;</span> <span class="attr">throwing</span> = <span class="string">&quot;ex&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>最终通知</p></li></ol></li><li><p>目标类—cn.java.service（核心操作所在的类）</p></li><li><p>目标方法—功能（目标类所在的方法）</p></li><li><p>切入点</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span> = <span class="string">&quot;execution(* cn.java.aop2.MobileDaoImpl.*(..))&quot;</span> <span class="attr">id</span> = <span class="string">&quot;mdl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span> </span><br></pre></td></tr></table></figure><ol start="6"><li>织入—把这一段编写成代码就是织入</li></ol><h4 id="AOP使用步骤"><a href="#AOP使用步骤" class="headerlink" title="AOP使用步骤"></a>AOP使用步骤</h4><ol><li><p>导入jar包</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/lang </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/lang/spring-lang-2.5.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 相关的命名空间 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>书写配置文件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 目标类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>= <span class="string">&quot;mobileDaoImpl&quot;</span> <span class="attr">class</span>= <span class="string">&quot;cn.java.aop2.MobileDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 切面类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>= <span class="string">&quot;logging&quot;</span> <span class="attr">class</span>= <span class="string">&quot;cn.java.aop2.Logging&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>= <span class="string">&quot;gC&quot;</span> <span class="attr">class</span>= <span class="string">&quot;cn.java.aop2.GC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>= <span class="string">&quot;security&quot;</span> <span class="attr">class</span>= <span class="string">&quot;cn.java.aop2.Security&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置切入点</span></span><br><span class="line"><span class="comment">expression:切入点表达式execution（* com.xyz.service.AccountService.*（..））</span></span><br><span class="line"><span class="comment">id：切入点的id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span> = <span class="string">&quot;execution(* cn.java.aop2.MobileDaoImpl.*(..))&quot;</span> <span class="attr">id</span> = <span class="string">&quot;mdl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span> = <span class="string">&quot;security&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置通知：</span></span><br><span class="line"><span class="comment">method：通知名字</span></span><br><span class="line"><span class="comment">printcut-ref ：指入切入点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">mothod</span> = <span class="string">&quot;checkSecurity&quot;</span> <span class="attr">pointcut-ref</span> = <span class="string">&quot;mdl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span> = <span class="string">&quot;logging&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span> = <span class="string">&quot;logger&quot;</span> <span class="attr">pointcut-ref</span> = <span class="string">&quot;mdl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span> = <span class="string">&quot;gC&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span> = <span class="string">&quot;clearly&quot;</span> <span class="attr">pointcut-ref</span> = <span class="string">&quot;mdl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动框架测试</p></li></ol><h2 id="spring-mybatis的整合"><a href="#spring-mybatis的整合" class="headerlink" title="spring+mybatis的整合"></a>spring+mybatis的整合</h2><ol><li><p>导入jar包</p></li><li><p>书写主配置文件（applicationContext.xml、mybatis.xml）</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">applicationContext.xml头文件</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mybatis.xml头文件</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;magichell&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 配置数据库（直接在applicationContext.xml配置）</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;basicDataSource&quot;</span> <span class="attr">class</span> = <span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span> = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;url&quot;</span> <span class="attr">value</span> = <span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;username&quot;</span> <span class="attr">value</span> = <span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;password&quot;</span> <span class="attr">value</span> = <span class="string">&quot;magichell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 扫描书写sql配置文件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描书写sql语句的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;sqlSessionFactoryBean&quot;</span> <span class="attr">class</span> = <span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span> = <span class="string">&quot;basicDataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定书写sql语句的xml文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span> = <span class="string">&quot;classpath*:cn/java/dao/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 扫描dao层类</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 扫描dao层类 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span> = <span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;basePackage&quot;</span>  <span class="attr">value</span> = <span class="string">&quot;cn.java.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动框架测试</p></li></ol><h2 id="Mybatis介绍"><a href="#Mybatis介绍" class="headerlink" title="Mybatis介绍"></a>Mybatis介绍</h2><p>mybatis驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Mybatis核心依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql 对应版本的连接器驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>书写主配置文件</p><ol><li><p>在java中如何去写mysql脚本的xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">头文件</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure> </li></ol><h5 id="sqlsession、SqlSessionFactory-、SqlSessionFactoryBuilder是什么"><a href="#sqlsession、SqlSessionFactory-、SqlSessionFactoryBuilder是什么" class="headerlink" title="sqlsession、SqlSessionFactory 、SqlSessionFactoryBuilder是什么"></a>sqlsession、SqlSessionFactory 、SqlSessionFactoryBuilder是什么</h5><blockquote><p><code>SqlSession</code>、<code>SqlSessionFactory</code>和<code>SqlSessionFactoryBuilder</code>是Java中用于管理和执行SQL语句的类和接口，通常用于与关系型数据库进行交互。</p><ol><li><p><code>SqlSessionFactoryBuilder</code>是一个用于创建<code>SqlSessionFactory</code>实例的构建器类。它负责读取配置文件（如XML文件）或直接从代码中的配置信息构建<code>SqlSessionFactory</code>对象。它是一个一次性的对象，创建完<code>SqlSessionFactory</code>后就可以丢弃。</p></li><li><p><code>SqlSessionFactory</code>是一个线程安全的类，用于创建<code>SqlSession</code>实例。它是基于数据库配置信息和映射文件创建的，可以通过<code>SqlSessionFactory</code>打开新的<code>SqlSession</code>对象。<code>SqlSessionFactory</code>是一个重量级的对象，一般在应用程序的生命周期内只需要创建一个实例。</p></li><li><p><code>SqlSession</code>是与数据库交互的主要接口。它提供了执行SQL语句、提交事务、获取映射器（Mapper）等方法。每个线程都应该拥有自己的<code>SqlSession</code>实例，并在使用完毕后关闭它。</p></li></ol><p>总结：<br><code>SqlSessionFactoryBuilder</code>用于创建<code>SqlSessionFactory</code>实例，而<code>SqlSessionFactory</code>用于创建<code>SqlSession</code>实例。<code>SqlSession</code>提供了与数据库交互的方法，包括执行SQL语句和管理事务等操作。这些类和接口通常与MyBatis等ORM（对象关系映射）框架一起使用，用于简化Java与数据库之间的交互。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectEmp</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//sqlsession---------SqlSessionFactory ------SqlSessionFactoryBuilder</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 得到SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="comment">     * 2. 通过SqlSessionFactoryBuilder对象得到SqlSessionFactory对象</span></span><br><span class="line"><span class="comment">     * 3. 得到sqlsession对象</span></span><br><span class="line"><span class="comment">     * 4. 执行对应的sql语句，接受结果，对结果进行遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> ssfb.build(ins);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line">    List&lt;Object&gt; emp = sqlSession.selectList(<span class="string">&quot;com.java.dao.impl.EmpDaoImpl.selectEmp&quot;</span>);</span><br><span class="line">    emp.forEach(temp -&gt; System.out.println(temp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mybatis中添加数据"><a href="#Mybatis中添加数据" class="headerlink" title="Mybatis中添加数据"></a>Mybatis中添加数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//sqlsession---------SqlSessionFactory ------SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 得到SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="comment">         * 2. 通过SqlSessionFactoryBuilder对象得到SqlSessionFactory对象</span></span><br><span class="line"><span class="comment">         * 3. 得到sqlsession对象</span></span><br><span class="line"><span class="comment">         * 4. 执行对应的sql语句，接受结果，对结果进行遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> ssfb.build(ins);</span><br><span class="line">        sqlSession = ssf.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询emp表中的所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectEmp</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;Object&gt; emp = sqlSession.selectList(<span class="string">&quot;com.java.dao.impl.EmpDaoImpl.selectEmp&quot;</span>);</span><br><span class="line">        emp.forEach(temp -&gt; System.out.println(temp));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    select标签：存放的是sql语句</span></span><br><span class="line"><span class="comment">    resultType；指定返回类型</span></span><br><span class="line"><span class="comment">    id属性：与dao类的方法名保持一致</span></span><br><span class="line"><span class="comment">    parameterType:指定参数类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM books;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOne&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM books WHERE id = 1;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectone&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM books WHERE id = #&#123;0&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 带多个参数的查询语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM books WHERE price <span class="symbol">&amp;lt;</span> #&#123;price&#125; and num <span class="symbol">&amp;gt;</span> #&#123;num&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><h3 id="Mybatis添加数据"><a href="#Mybatis添加数据" class="headerlink" title="Mybatis添加数据"></a>Mybatis添加数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//sqlsession---------SqlSessionFactory ------SqlSessionFactoryBuilder</span></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 1. 得到SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="comment">        * 2. 通过SqlSessionFactoryBuilder对象得到SqlSessionFactory对象</span></span><br><span class="line"><span class="comment">        * 3. 得到sqlsession对象</span></span><br><span class="line"><span class="comment">        * 4. 执行对应的sql语句，接受结果，对结果进行遍历</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br><span class="line">       <span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> ssfb.build(ins);</span><br><span class="line">       sqlSession = ssf.openSession();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line">       Map&lt;String,Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       paramMap.put(<span class="string">&quot;bookName&quot;</span>,<span class="string">&quot;Mybatis的作业&quot;</span>);</span><br><span class="line">       paramMap.put(<span class="string">&quot;price&quot;</span> , <span class="number">50F</span>);</span><br><span class="line">       paramMap.put(<span class="string">&quot;num&quot;</span> , <span class="number">10</span>);</span><br><span class="line">       <span class="type">int</span> <span class="variable">sql</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;com.java.dao.impl.EmpDaoImpl.insertOne&quot;</span>,paramMap);</span><br><span class="line">       sqlSession.commit();</span><br><span class="line">       <span class="comment">//提交事务</span></span><br><span class="line">       System.out.println(sql);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加一条数据</span></span><br><span class="line"><span class="comment">        备注：增删改标签不需要显示指定返回类型，默认返回类型都为int</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertOne&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO Books VALUES (null,#&#123;bookName&#125;,#&#123;price&#125;,#&#123;num&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果</p><h3 id="Myabtis删除数据"><a href="#Myabtis删除数据" class="headerlink" title="Myabtis删除数据"></a>Myabtis删除数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//sqlsession---------SqlSessionFactory ------SqlSessionFactoryBuilder</span></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 1. 得到SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="comment">        * 2. 通过SqlSessionFactoryBuilder对象得到SqlSessionFactory对象</span></span><br><span class="line"><span class="comment">        * 3. 得到sqlsession对象</span></span><br><span class="line"><span class="comment">        * 4. 执行对应的sql语句，接受结果，对结果进行遍历</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br><span class="line">       <span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> ssfb.build(ins);</span><br><span class="line">       sqlSession = ssf.openSession();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//提交事务</span></span><br><span class="line">   <span class="meta">@After</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">       sqlSession.commit();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> sqlSession.delete(<span class="string">&quot;com.java.dao.impl.EmpDaoImpl.deleteOne&quot;</span>,<span class="number">1L</span>);</span><br><span class="line">       System.out.println(flag);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteOne&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM books WHERE id = #&#123;0&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="myabtis改数据"><a href="#myabtis改数据" class="headerlink" title="myabtis改数据"></a>myabtis改数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//sqlsession---------SqlSessionFactory ------SqlSessionFactoryBuilder</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 得到SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="comment">     * 2. 通过SqlSessionFactoryBuilder对象得到SqlSessionFactory对象</span></span><br><span class="line"><span class="comment">     * 3. 得到sqlsession对象</span></span><br><span class="line"><span class="comment">     * 4. 执行对应的sql语句，接受结果，对结果进行遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> ssfb.build(ins);</span><br><span class="line">    sqlSession = ssf.openSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    paramMap.put(<span class="string">&quot;bookName&quot;</span>,<span class="string">&quot;Mybatis&quot;</span>);</span><br><span class="line">    paramMap.put(<span class="string">&quot;price&quot;</span> , <span class="number">50F</span>);</span><br><span class="line">    paramMap.put(<span class="string">&quot;num&quot;</span> , <span class="number">1999</span>);</span><br><span class="line">    paramMap.put(<span class="string">&quot;id&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">flg</span> <span class="operator">=</span> sqlSession.update(<span class="string">&quot;com.java.dao.impl.EmpDaoImpl.updateOne&quot;</span>,paramMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateOne&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">    UPDATE books SET bookName = #&#123;bookName&#125;,price = #&#123;price&#125;,num= #&#123;num&#125; WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在Mybatis-xml可以配置别名"><a href="#在Mybatis-xml可以配置别名" class="headerlink" title="在Mybatis.xml可以配置别名"></a>在Mybatis.xml可以配置别名</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置别名</span></span><br><span class="line"><span class="comment">        typeAliases属性:自定义实体类配置别名</span></span><br><span class="line"><span class="comment">        type属性：指定自定义类的具体路径</span></span><br><span class="line"><span class="comment">        alias属性：为当前自定义类取个别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.java.pojo.Emp&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="，-取值区别"><a href="#，-取值区别" class="headerlink" title="#，$取值区别"></a>#，$取值区别</h3><ol><li>#在取值时，会将所有数据当作字符串处理，自动添加上单引号；$取值时，将参数当作普通文本处理，不添加任何的单引号</li><li>#取值时可以防止SQL注入，$取值时不能防止SQL注入</li></ol><blockquote><p>在MyBatis中，<code>#</code>和<code>$</code>符号都用于在SQL语句中插入参数值，但它们在取值和处理方式上有一些区别。</p><ol><li><p><code>#</code>符号（预编译）：</p><ul><li><code>#</code>符号用于插入预编译参数，它会将参数值以安全的方式进行替换，防止SQL注入攻击。</li><li>在使用<code>#</code>符号时，MyBatis会将参数值作为一个占位符，并将其转义后放入SQL语句中，然后通过PreparedStatement进行预编译。</li><li>举个例子：<code>SELECT * FROM users WHERE id = #&#123;userId&#125;</code>，这里的<code>#&#123;userId&#125;</code>会被替换为预编译参数，如<code>SELECT * FROM users WHERE id = ?</code>，然后将实际参数值传递给PreparedStatement进行安全地执行。</li></ul></li><li><p><code>$</code>符号（字符串拼接）：</p><ul><li><code>$</code>符号用于直接替换参数值，它将参数值字面地嵌入SQL语句中。</li><li>在使用<code>$</code>符号时，MyBatis会简单地将参数值直接替换到SQL语句中，不进行预编译或转义操作。</li><li>举个例子：<code>SELECT * FROM users WHERE id = $&#123;userId&#125;</code>，这里的<code>$&#123;userId&#125;</code>会被替换为实际的参数值，如<code>SELECT * FROM users WHERE id = 1</code>，直接将参数值替换到SQL语句中。</li></ul></li></ol><p>需要注意的是，使用<code>$</code>符号存在一定的风险，因为参数值会直接替换到SQL语句中，如果参数值来自用户输入且未经过充分验证和转义，可能会导致SQL注入攻击。为了避免这种情况，建议在可能存在安全风险的地方使用<code>#</code>符号进行参数替换。</p><p>综上所述，使用<code>#</code>符号可以提供更安全的参数处理方式，而使用<code>$</code>符号则更适用于一些简单的字符串拼接场景。</p></blockquote><h3 id="Mybatis模糊查询"><a href="#Mybatis模糊查询" class="headerlink" title="Mybatis模糊查询"></a>Mybatis模糊查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//sqlsession---------SqlSessionFactory ------SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 得到SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="comment">         * 2. 通过SqlSessionFactoryBuilder对象得到SqlSessionFactory对象</span></span><br><span class="line"><span class="comment">         * 3. 得到sqlsession对象</span></span><br><span class="line"><span class="comment">         * 4. 执行对应的sql语句，接受结果，对结果进行遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> ssfb.build(ins);</span><br><span class="line">        sqlSession = ssf.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        paramMap.put(<span class="string">&quot;bookName&quot;</span>,<span class="string">&quot;Mybatis的作业&quot;</span>);</span><br><span class="line">        paramMap.put(<span class="string">&quot;num&quot;</span> , <span class="number">1</span>);</span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; flg = sqlSession.selectList(<span class="string">&quot;com.java.dao.impl.EmpDaoImpl.selcectMoHu&quot;</span>,paramMap);</span><br><span class="line">        System.out.println(flg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 模糊查询 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selcectMoHu&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">       SELECT * FROM books WHERE bookName LIKE &#x27;%$&#123;bookName&#125;%&#x27; AND num &gt;#&#123;num&#125;;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selcectMoHu2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">       SELECT * FROM books WHERE bookName LIKE CONCAT(&#x27;%&#x27;,&#x27;#&#123;bookName&#125;&#x27;,&#x27;%&#x27;) AND num &gt;#&#123;num&#125;;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用sql标签抽取公共字段"><a href="#使用sql标签抽取公共字段" class="headerlink" title="使用sql标签抽取公共字段"></a>使用sql标签抽取公共字段</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用sql标签抽取公共字段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;commonFiled&quot;</span>&gt;</span></span><br><span class="line">        id,bookName,price,num</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select标签：存放的是sql语句</span></span><br><span class="line"><span class="comment">        resultType；指定返回类型</span></span><br><span class="line"><span class="comment">        id属性：与dao类的方法名保持一致</span></span><br><span class="line"><span class="comment">        parameterType:指定参数类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">        SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;commonFiled&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> FROM books;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态查询SQL"><a href="#动态查询SQL" class="headerlink" title="动态查询SQL"></a>动态查询SQL</h3><p><u>动态SQL：包括动态查询SQL、动态修改SQL，sql语句会变化的sql语句</u> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//sqlsession---------SqlSessionFactory ------SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 得到SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="comment">         * 2. 通过SqlSessionFactoryBuilder对象得到SqlSessionFactory对象</span></span><br><span class="line"><span class="comment">         * 3. 得到sqlsession对象</span></span><br><span class="line"><span class="comment">         * 4. 执行对应的sql语句，接受结果，对结果进行遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> ssfb.build(ins);</span><br><span class="line">        sqlSession = ssf.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//动态查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test010</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; flg = sqlSession.selectList(<span class="string">&quot;com.java.dao.impl.EmpDaoImpl.selectDynameic&quot;</span>,paramMap);</span><br><span class="line">        System.out.println(flg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态查询sql语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDynameic&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM computers</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">&quot;brand!=null and brand != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                brand = #&#123;brand&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">&quot;startPrice!=null and startPrice != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND price <span class="symbol">&amp;gt;</span>= #&#123;startPrice&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">&quot;endPrice!=null and endPrice != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND price <span class="symbol">&amp;lt;</span>= #&#123;endPrice&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">&quot;runMem!=null and runMem != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND runMem = #&#123;runMem&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">&quot;xianKa!=null and xianKa != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND xianKa = #&#123;xianKa&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">&quot;cpu!=null and cpu != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND cpu = #&#123;cpu&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态修改"><a href="#动态修改" class="headerlink" title="动态修改"></a>动态修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态修改</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test011</span><span class="params">()</span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    paramMap.put(<span class="string">&quot;brand&quot;</span>,<span class="string">&quot;联想2525&quot;</span>);</span><br><span class="line">    paramMap.put(<span class="string">&quot;id&quot;</span>,<span class="number">2L</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">flg</span> <span class="operator">=</span> sqlSession.update(<span class="string">&quot;com.java.dao.impl.EmpDaoImpl.updateDynameic&quot;</span>,paramMap);</span><br><span class="line">    System.out.println(flg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态修改sql语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateDynameic&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> &gt;</span></span><br><span class="line">    UPDATE computers SET</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand!=null and brand != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        brand=#&#123;brand&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;runMem!=null and runMem != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        runMem=#&#123;runMem&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;price!=null and price != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        price=#&#123;price&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;cpu!=null and cpu != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        cpu=#&#123;cpu&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;xianKa!=null and xianKa != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        xianKa=#&#123;xianKa&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    WHERE id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateDynameic01&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> &gt;</span></span><br><span class="line">    UPDATE computers</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand!=null and brand != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            brand=#&#123;brand&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;runMem!=null and runMem != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            runMem=#&#123;runMem&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;price!=null and price != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            price=#&#123;price&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;cpu!=null and cpu != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            cpu=#&#123;cpu&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;xianKa!=null and xianKa != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            xianKa=#&#123;xianKa&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        WHERE id=#&#123;id&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一对一的关系"><a href="#一对一的关系" class="headerlink" title="一对一的关系"></a>一对一的关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 描述Husband，Wife，sql语句字段的映射关系 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">resultMap标签:描述JavaBean与数据库表中的字段、JavaBean与IavaBean回的关系</span></span><br><span class="line"><span class="comment">            id属性:为当前标签体中的内容取一个唯一表示</span></span><br><span class="line"><span class="comment">            type属性:需要被描述的实体美的名宁</span></span><br><span class="line"><span class="comment">            result标签:用来表达JavaBean的属性与数据库表中字段的映射</span></span><br><span class="line"><span class="comment">            property属性:javaBean的属性</span></span><br><span class="line"><span class="comment">            column属性:表字段属性</span></span><br><span class="line"><span class="comment">            javaType属性:javaBean的所性的类型</span></span><br><span class="line"><span class="comment">            jdbcTvpe属性(可以省略): 表字段属性的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;hus&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.pojo.Husband&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;husid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">column</span>=<span class="string">&quot;husid&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;husbandname&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;husbandname&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;wife&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.java.pojo.Wife&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;wifeid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">column</span>=<span class="string">&quot;wifeid&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;nianlin&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">column</span>=<span class="string">&quot;nianlin&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;wifename&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;wifename&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;hid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">column</span>=<span class="string">&quot;hid&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 一对一的关联关系 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultMap 替换上面id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByOne2One&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;hus&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM husband hs INNER JOIN wife w</span><br><span class="line">        ON hs.husid=w.hid WHERE hs.husbandname = #&#123;0&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一对多的关系 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;uMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uName&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.java.pojo.Order&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;remark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderNo&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderNo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cost&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Float&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;createTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;User&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">column</span>=<span class="string">&quot;User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByOne2Two&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;uMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM orders o INNER JOIN users u</span><br><span class="line">        ON o.userID = u.id WHERE u.phone = #&#123;0&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><h5 id="pagehelper"><a href="#pagehelper" class="headerlink" title="pagehelper"></a>pagehelper</h5><blockquote><p>MyBatis 是一款优秀的持久层框架，而 PageHelper 是一个为 MyBatis 提供分页查询功能的插件。它简化了在数据库中进行分页查询的操作，提供了方便的 API 和配置方式。</p><p>使用 PageHelper 插件，你可以轻松地实现数据库分页查询功能。下面是使用 PageHelper 的基本步骤：</p><ol><li><p>引入 PageHelper 依赖：在你的项目中，需要添加 PageHelper 的依赖。如果使用 Maven，可以在 pom.xml 文件中添加以下依赖配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 PageHelper：在 MyBatis 的配置文件（通常是 <code>mybatis-config.xml</code>）中，添加 PageHelper 的配置信息。配置信息可以包括分页插件的属性和参数，例如数据库类型、分页参数名称等。以下是一个简单的配置示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;数据库方言&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;params&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pageNum=pageNumKey;pageSize=pageSizeKey;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在代码中使用分页功能：在你的查询代码中，使用 PageHelper.startPage 方法来开启分页功能，并指定页码和每页显示的记录数。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数为页码，第二个参数为每页显示的记录数</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.getAllUsers();</span><br></pre></td></tr></table></figure></li><li><p>获取分页结果：执行完查询语句后，PageHelper 会自动将查询结果封装成一个 PageInfo 对象，其中包含了分页信息和查询结果列表。你可以通过 PageInfo 对象获取总记录数、总页数以及当前页的数据等。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(userList);</span><br><span class="line"><span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> pageInfo.getTotal(); <span class="comment">// 总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> pageInfo.getPages(); <span class="comment">// 总页数</span></span><br><span class="line">List&lt;User&gt; result = pageInfo.getList(); <span class="comment">// 当前页的数据列表</span></span><br></pre></td></tr></table></figure></li></ol><p>这就是使用 PageHelper 插件实现分页查询的基本步骤。通过简单的配置和调用，你可以方便地在 MyBatis 中实现数据库分页查询功能。记得根据实际情况配置合适的分页参数和数据库方言，以及处理异常情况。</p></blockquote><h2 id="分页操作"><a href="#分页操作" class="headerlink" title="分页操作"></a>分页操作</h2><h3 id="导入pagehelper包"><a href="#导入pagehelper包" class="headerlink" title="导入pagehelper包"></a>导入pagehelper包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pagehelper所需依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pageNum:当前页码</span><br><span class="line">pageSize：每页数据条数</span><br><span class="line">total：数据总记录数    SELECT COUNT(*) FROM books；</span><br><span class="line">startIndex = （pageNum - 1） * pagesize  起始下标</span><br><span class="line">pages = total / pageSize；    总页数</span><br><span class="line">SELECT * FROM books LIMIT    起始下标，每页显示的数据条数</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置pagehelper拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h3 id="什么是mvc"><a href="#什么是mvc" class="headerlink" title="什么是mvc"></a>什么是mvc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Model 数据模型</span><br><span class="line">View 视图</span><br><span class="line">Controller 控制器</span><br><span class="line">MVC是一种Web应用架构，是一种代码设计思想</span><br><span class="line">思想：将所有客户端请求全部交由控制器，由控制器将其分发并将结果响应给客户端</span><br></pre></td></tr></table></figure><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>分为六步：</p><ul><li>DispatcherServlet</li></ul><p>SpringMVC核心控制器：前端控制器，主要作用是用来分发</p><ul><li>HandlerMapping</li></ul><p>映射处理器：根据请求url映射到具体的处理Handler</p><p>Handler就是Controller层的实现类，也称为Action或Controller</p><ul><li>HandlerAdapter</li></ul><p>适配器：用来适配不同的处理器Handler</p><p>处理器有两种实现方式：实现接口、基于注解，所以执行之前需要先适配</p><ul><li>Handler</li></ul><p>处理器：执行处理具体业务，并产生数据模型Model和视图名View</p><p>Handler会将数据模型Model和视图名View封装成ModelAndView对象并返回</p><ul><li>ViewResolver</li></ul><p>视图解析器：根据视图名解析为具体的视图，一般多为jsp页面，然后封装为View对象</p><ul><li>View</li></ul><p>视图：使用具体的视图技术进行渲染，结合Model展示数据</p><p>视图有很多种形式：jsp、freemarker、velocity、excel、pdf等</p><h3 id="springmvc主要功能"><a href="#springmvc主要功能" class="headerlink" title="springmvc主要功能"></a>springmvc主要功能</h3><p>在获取多个参数、文件上传、servelt功能方面都能有很好的方法解决</p><h4 id="springMVC框架的搭建"><a href="#springMVC框架的搭建" class="headerlink" title="springMVC框架的搭建"></a>springMVC框架的搭建</h4><p>第一步：导入springmvc的jar包</p><p>第二步：书写主配置文件：SpringMVC.xml，web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC.xml的配置</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置包扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.java.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加入springMVC特有的注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">web.xml的配置</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置springMVC的核心控制类：DispatcherServlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> <span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> <span class="comment">&lt;!-- DispatcherServlet的地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步：启动tomcat测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java代码配置</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.java.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span><span class="comment">//如果一个普通类被@Controller注解，则普通类变成servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrontServlet</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/login.html&quot;)</span> <span class="comment">//为当前方法配置一个对外访问的虚拟路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/register.html&quot;,&quot;/zhucechenggong.html&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Register</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-MVC常见注解"><a href="#Spring-MVC常见注解" class="headerlink" title="Spring MVC常见注解"></a>Spring MVC常见注解</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="comment">//如果一个普通类被@Controller注解，则普通类变成servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrontServlet</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/login.html&quot;)</span> <span class="comment">//为当前方法配置一个对外访问的虚拟路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/register.html&quot;,&quot;/zhucechenggong.html&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Register</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/login.html&quot;)</span> <span class="comment">//为当前方法配置一个对外访问的虚拟路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scope-单例，多例"><a href="#Scope-单例，多例" class="headerlink" title="@Scope(单例，多例)"></a>@Scope(单例，多例)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test01.htm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">(User user)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test.........&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AutoWired（依赖注入）"><a href="#AutoWired（依赖注入）" class="headerlink" title="@AutoWired（依赖注入）"></a>@AutoWired（依赖注入）</h3><blockquote><p>当使用Spring框架进行Java应用程序开发时，可以使用<code>@Autowired</code>注解来自动装配依赖项。下面是一个简单的代码样例，演示了如何使用<code>@Autowired</code>注解注入依赖项。</p><p>首先，我们有一个名为<code>UserService</code>的服务类，它依赖于名为<code>UserRepository</code>的存储库类。使用<code>@Autowired</code>注解，我们可以自动将<code>UserRepository</code>注入到<code>UserService</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserRepository userRepository)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userRepository = userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用注入的UserRepository对象执行操作</span></span><br><span class="line">        List&lt;User&gt; users = userRepository.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们有一个名为<code>UserRepository</code>的存储库类，它提供了对用户数据的访问方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">    <span class="comment">// 数据访问方法省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 返回用户列表的逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>UserRepository</code>类使用<code>@Repository</code>注解进行注释，表示它是一个用于数据访问的存储库类。</p><p>最后，我们可以在应用程序的入口点或其他类中使用<code>UserService</code>，并调用其方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyApp</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.printUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>MyApp</code>类使用<code>@Autowired</code>注解将<code>UserService</code>注入进来，并调用其中的方法。</p><p>使用<code>@Autowired</code>注解，Spring框架会在运行时自动查找匹配的依赖项，并将它们注入到相应的类中。这样，我们就可以方便地管理和使用依赖项，提高代码的可维护性和可测试性。</p></blockquote><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test02.htm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">(<span class="meta">@RequestParam(name = &quot;user&quot;,defaultValue = &quot;zhangsan&quot;,required = false)</span> String username,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(name = &quot;pasd&quot;)</span>String password,<span class="meta">@RequestParam(name = &quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test02.........&quot;</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line">System.out.println(password);</span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC重定向与转发"><a href="#SpringMVC重定向与转发" class="headerlink" title="SpringMVC重定向与转发"></a>SpringMVC重定向与转发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">传统转发</span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test03&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">(String user,String pasd,String age,HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(user)&amp;&amp;<span class="string">&quot;123&quot;</span>.equals(pasd)) &#123;</span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/pages/front/success.jsp&quot;</span>).forward(request,response);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>).forward(request,response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">传统重定向</span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">(String user,String pasd,String age,HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(user)&amp;&amp;<span class="string">&quot;123&quot;</span>.equals(pasd)) &#123;</span><br><span class="line">response.sendRedirect(<span class="string">&quot;/dt48_springMVC2/pages/front/success.jsp&quot;</span> );</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">response.sendRedirect(<span class="string">&quot;/dt48_springMVC2/pages/front/fail.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//springmvc重定向</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test05</span><span class="params">(String user,String pasd,String age)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(user)&amp;&amp;<span class="string">&quot;123&quot;</span>.equals(pasd)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:/pages/front/success.jsp&quot;</span>;<span class="comment">//重定向</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/pages/front/fail.jsp&quot;</span>;<span class="comment">//转发</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="视图解析器（对重定向无效）"><a href="#视图解析器（对重定向无效）" class="headerlink" title="视图解析器（对重定向无效）"></a>视图解析器（对重定向无效）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span> = <span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置前缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span> = <span class="string">&quot;/pages/front/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;suffix&quot;</span> <span class="attr">value</span> = <span class="string">&quot;.jsp&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//springmvc重定向</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test06&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test06</span><span class="params">(String user,String pasd,String age)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(user)&amp;&amp;<span class="string">&quot;123&quot;</span>.equals(pasd)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;<span class="comment">//重定向</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;<span class="comment">//转发</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">在web.xml中</span><br><span class="line">  &lt;!-- 配置过滤器 --&gt;</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;encodingFilters&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-class&gt;cn.java.filters.EncodingFilters&lt;/filter-class&gt;</span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">  &lt;filter-name&gt;encodingFilters&lt;/filter-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/filter-mapping&gt;</span><br><span class="line">  在java中</span><br><span class="line">  package cn.java.filters;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.Filter;</span><br><span class="line">import javax.servlet.FilterChain;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line">//过滤器</span><br><span class="line">public class EncodingFilters implements Filter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)</span><br><span class="line">throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">filterChain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-mvc带数据给jsp（共三种方法）"><a href="#spring-mvc带数据给jsp（共三种方法）" class="headerlink" title="spring mvc带数据给jsp（共三种方法）"></a>spring mvc带数据给jsp（共三种方法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过request域来保存数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test07&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test07</span><span class="params">(String user,String pasd,HttpServletRequest request)</span> &#123;</span><br><span class="line">request.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(user)&amp;&amp;<span class="string">&quot;123&quot;</span>.equals(pasd)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;<span class="comment">//重定向</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;<span class="comment">//转发</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Model封装数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test08&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test08</span><span class="params">(String user,String pasd,Model model)</span> &#123;</span><br><span class="line">model.addAttribute(<span class="string">&quot;username&quot;</span>,user);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(user)&amp;&amp;<span class="string">&quot;123&quot;</span>.equals(pasd)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;<span class="comment">//重定向</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;<span class="comment">//转发</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Map集合封装数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test09&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test09</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">map.put(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;front/success.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通过request域来保存数据 --&gt;</span><br><span class="line">通过request域来保存数据：$&#123;requestScope.user&#125;</span><br><span class="line">&lt;!-- 通过Model封装数据 --&gt;</span><br><span class="line">通过Model封装数据:$&#123;requestScope.user&#125;</span><br><span class="line">&lt;!-- 通过Map集合封装数据 --&gt;</span><br><span class="line">通过Map集合封装数据:$&#123;requestScope.user&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC统一异常处理"><a href="#Spring-MVC统一异常处理" class="headerlink" title="Spring MVC统一异常处理"></a>Spring MVC统一异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一异常处理方式</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//异常处理注解出现Exception.class错误就去找他</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">excetHand</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.java.controller.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span><span class="comment">//异常抛出类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHander</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一异常处理方式</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//异常处理注解出现Exception.class错误就去找他</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">excetHand</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常处理注解</span></span><br><span class="line"><span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptHand2</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;哈哈，出错了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC之json"><a href="#SpringMVC之json" class="headerlink" title="SpringMVC之json"></a>SpringMVC之json</h3><ol><li><p>将实体类转化为json</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;beaToJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">beanToJson</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUsername(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">20</span>);</span><br><span class="line">user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将Map集合转化为json</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;mapToJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt;mapToJson()&#123;</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;java&quot;</span>, <span class="number">80f</span>);</span><br><span class="line">map.put(<span class="string">&quot;StringMvc&quot;</span>, <span class="number">100f</span>);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将List集合转化为json</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;listToJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listToJson</span><span class="params">()</span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">map1.put(<span class="string">&quot;java&quot;</span>, <span class="number">80f</span>);</span><br><span class="line">map1.put(<span class="string">&quot;StringMvc&quot;</span>, <span class="number">100f</span>);</span><br><span class="line">Map&lt;String, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">map2.put(<span class="string">&quot;java&quot;</span>, <span class="number">80f</span>);</span><br><span class="line">map2.put(<span class="string">&quot;StringMvc&quot;</span>, <span class="number">100f</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; mapList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">mapList.add(map1);</span><br><span class="line"><span class="keyword">return</span> mapList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回boolean类型、int</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;test1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//可以返回数值</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Test1Controller.......&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello springmvc&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="springMVC文件上传"><a href="#springMVC文件上传" class="headerlink" title="springMVC文件上传"></a>springMVC文件上传</h3><blockquote><p>导入文件上传的jar包</p><p>在springmvc.xml配置文件上传相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">配置文件上传配置</span></span><br><span class="line"><span class="comment">注意：id必须为multipartResolver</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span> = <span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置文件上传的编码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span> = <span class="string">&quot;utf-8&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置文件上传大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span> = <span class="string">&quot;1,048,576&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果表单中有file控件，则必须指定enctype &#x3D; “multipart&#x2F;form-data”</p></blockquote></li><li><p>单文件上传</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单文件上传</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;singleFileUpload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">singleFileUpload</span><span class="params">(<span class="meta">@RequestParam(name = &quot;bigHeadImage&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> IllegalStateException, IOException &#123;</span><br><span class="line"><span class="comment">//1. getOriginalFilename获取上传文件的文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"><span class="comment">//getName()获取表单控件的控件名&lt;p&gt;大头照&lt;input type = &quot;file&quot; name = &quot;bigHeadImage&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();</span><br><span class="line"><span class="comment">//将上传文件保存到指定目录下</span></span><br><span class="line"><span class="type">File</span> <span class="variable">filePathFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\ALL\\project\\GithubProject\\SpringFamilyBase\\dt48_springMVC2\\src\\main\\webapp\\upload\\&quot;</span> + originalFilename );</span><br><span class="line">file.transferTo(filePathFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>文件上传成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;&lt;%=basePath %&gt;/singleFileUpload.shtml&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span> <span class="attr">enctype</span> = <span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>大头照<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;file&quot;</span> <span class="attr">name</span> = <span class="string">&quot;bigHeadImage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>大头照<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">name</span> = <span class="string">&quot;上传&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单文件上传</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;singleFileUpload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">singleFileUpload</span><span class="params">(<span class="meta">@RequestParam(name = &quot;bigHeadImage&quot;)</span> MultipartFile file,HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalStateException, IOException &#123;</span><br><span class="line"><span class="comment">//1. getOriginalFilename获取上传文件的文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"><span class="comment">//getName()获取表单控件的控件名&lt;p&gt;大头照&lt;input type = &quot;file&quot; name = &quot;bigHeadImage&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line"><span class="comment">//将上传文件保存到指定目录下</span></span><br><span class="line"><span class="type">File</span> <span class="variable">filePathFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;&quot;</span>+path+<span class="string">&quot;\\&quot;</span> + originalFilename );</span><br><span class="line">file.transferTo(filePathFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;getUploadPath&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUploadPath</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">sc</span> <span class="operator">=</span>  request.getServletContext();</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> sc.getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">System.out.println(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="标准的单文件代码上传代码"><a href="#标准的单文件代码上传代码" class="headerlink" title="标准的单文件代码上传代码"></a>标准的单文件代码上传代码</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单文件上传</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;singleFileUpload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">singleFileUpload</span><span class="params">(<span class="meta">@RequestParam(name = &quot;bigHeadImage&quot;)</span> MultipartFile file,HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalStateException, IOException &#123;</span><br><span class="line"><span class="comment">//1. getOriginalFilename获取上传文件的文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"><span class="comment">//getName()获取表单控件的控件名&lt;p&gt;大头照&lt;input type = &quot;file&quot; name = &quot;bigHeadImage&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();</span><br><span class="line"><span class="comment">//UUID可以生成不重复序列号</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uuidString</span> <span class="operator">=</span>  UUID.randomUUID().toString(); </span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line"><span class="comment">//将上传文件保存到指定目录下</span></span><br><span class="line"><span class="type">File</span> <span class="variable">filePathFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;&quot;</span>+path+<span class="string">&quot;\\&quot;</span> + uuidString + originalFilename );</span><br><span class="line">file.transferTo(filePathFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多文件上传</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多文件上传</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;mutipleFileUpload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mutipleFileUpload</span><span class="params">(MultipartRequest files,HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalStateException, IOException &#123;</span><br><span class="line">Map&lt;String, MultipartFile&gt; filemap = files.getFileMap();</span><br><span class="line">Set&lt;String&gt; keySet =  filemap.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line"><span class="type">MultipartFile</span> <span class="variable">file</span> <span class="operator">=</span> filemap.get(key);</span><br><span class="line"><span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"><span class="comment">//getName()获取表单控件的控件名&lt;p&gt;大头照&lt;input type = &quot;file&quot; name = &quot;bigHeadImage&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();</span><br><span class="line"><span class="comment">//UUID可以生成不重复序列号</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uuidString</span> <span class="operator">=</span>  UUID.randomUUID().toString(); </span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line"><span class="comment">//将上传文件保存到指定目录下</span></span><br><span class="line"><span class="type">File</span> <span class="variable">filePathFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;&quot;</span>+path+<span class="string">&quot;\\&quot;</span> + uuidString + originalFilename );</span><br><span class="line">file.transferTo(filePathFile);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="将其封装到一个类中"><a href="#将其封装到一个类中" class="headerlink" title="将其封装到一个类中"></a>将其封装到一个类中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此工具类可以同时上传多个文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUpload</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多文件上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> files</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">uploadFiles</span><span class="params">(MultipartRequest files,HttpServletRequest request)</span> &#123;</span><br><span class="line">Map&lt;String, Object&gt; filePathMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Map&lt;String, MultipartFile&gt; filemap = files.getFileMap();</span><br><span class="line">Set&lt;String&gt; keySet =  filemap.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line"><span class="type">MultipartFile</span> <span class="variable">file</span> <span class="operator">=</span> filemap.get(key);</span><br><span class="line"><span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"><span class="comment">//getName()获取表单控件的控件名&lt;p&gt;大头照&lt;input type = &quot;file&quot; name = &quot;bigHeadImage&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();</span><br><span class="line"><span class="comment">//UUID可以生成不重复序列号</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uuidString</span> <span class="operator">=</span>  UUID.randomUUID().toString(); </span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">basePathString</span> <span class="operator">=</span> path.split(<span class="string">&quot;webapps&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;webapps\\upload&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">fileUploadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePathString);</span><br><span class="line"><span class="keyword">if</span>(!fileUploadFile.exists()) &#123;</span><br><span class="line">fileUploadFile.mkdir();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">filepathString</span> <span class="operator">=</span> basePathString+<span class="string">&quot;\\&quot;</span>+uuidString+originalFilename;</span><br><span class="line">file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filepathString));</span><br><span class="line"><span class="comment">//String positivaPath = &quot;uploads/&quot; + uuidString  + originalFilename;</span></span><br><span class="line"><span class="comment">//将上传文件保存到指定目录下</span></span><br><span class="line"><span class="comment">//File filePathFile = new File(&quot;&quot;+path+&quot;\\&quot; + uuidString + originalFilename );</span></span><br><span class="line"><span class="comment">//file.transferTo(filePathFile);</span></span><br><span class="line"><span class="comment">//filePathMap.put(uuidString, positivaPath);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> filePathMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据校验实例-代价较大"><a href="#数据校验实例-代价较大" class="headerlink" title="数据校验实例(代价较大)"></a>数据校验实例(代价较大)</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort() +request.getContextPath()+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;&lt;%=basePath %&gt;&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;注册QQ&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">        &lt;<span class="type">form</span> <span class="variable">action</span> <span class="operator">=</span> <span class="string">&quot;&lt;%=basePath %&gt;/register.shtml&quot;</span> method = <span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;昵称&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;text&quot;</span> name = <span class="string">&quot;nick&quot;</span> pattern = <span class="string">&quot;[\u4e00-\u9fa5]&#123;4,10&#125;&quot;</span> required=<span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入4-10为汉字&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;密码&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span> name = <span class="string">&quot;password&quot;</span> patterm =<span class="string">&quot;\w&#123;3,6&#125;&quot;</span> required = <span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入3-6位数字、字母、下划线&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;手机号&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;text&quot;</span> name = <span class="string">&quot;phone&quot;</span> patterm =<span class="string">&quot;1[3578]\d&#123;9&#125;&quot;</span> required = <span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入手机号&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;邮箱&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;email&quot;</span> name = <span class="string">&quot;email&quot;</span>  required = <span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入邮箱&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;text&quot;</span> name = <span class="string">&quot;age&quot;</span> patterm =<span class="string">&quot;[1-9]\d&#123;0,2&#125;&quot;</span> required = <span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入真实年龄&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;<span class="type">td</span> <span class="variable">colspan</span> <span class="operator">=</span> <span class="string">&quot;2&quot;</span>&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;submit&quot;</span> value = <span class="string">&quot;注册&quot;</span>&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;reset&quot;</span> value = <span class="string">&quot;重置&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.java.controller.front;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.java.entity.QQ;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateQQController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(QQ qqInfo)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;进入了&quot;</span>);</span><br><span class="line">System.out.println(qqInfo);</span><br><span class="line"><span class="type">String</span> <span class="variable">nick</span> <span class="operator">=</span> qqInfo.getNick();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> nick.matches(<span class="string">&quot;[\\u4e00-\\u9fa5]&#123;4,10&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> qqInfo.getPassword();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span> password.matches(<span class="string">&quot;\\w&#123;3,6&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> qqInfo.getPhone();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag3</span> <span class="operator">=</span> phone.matches(<span class="string">&quot;1\\d&#123;10&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> qqInfo.getEmail();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag4</span> <span class="operator">=</span> email.matches(<span class="string">&quot;[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]&#123;2,&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> qqInfo.getAge();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag5</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (age&gt;=<span class="number">1</span>&amp;&amp;age&lt;=<span class="number">150</span>) &#123;</span><br><span class="line">flag5 = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag1 &amp;&amp; flag2 &amp;&amp; flag3 &amp;&amp; flag4 &amp;&amp; flag5) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;数据正确&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;数据错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.java.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QQ</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String nick;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNick</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nick;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNick</span><span class="params">(String nick)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.nick = nick;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;QQ [nick=&quot;</span> + nick + <span class="string">&quot;, passsword=&quot;</span> + password + <span class="string">&quot;, phone=&quot;</span> + phone + <span class="string">&quot;, email=&quot;</span> + email + <span class="string">&quot;, age=&quot;</span></span><br><span class="line">+ age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特此注明名字一定要一样不一样值就传不回来</strong></p><p>SpringMVC中的数据校验</p><ol><li><p>导入jar包</p></li><li><p>编写配置文件springmvc.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置hibernate-validator --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;validator&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;validator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;providerClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.validator.HibernateValidator&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.java.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Email;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QQ</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pattern(regexp = &quot;[\\u4e00-\\u9fa5]&#123;4,10&#125;&quot;,message = &quot;昵称错误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String nick;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pattern(regexp = &quot;\\w&#123;3,6&#125;&quot;,message = &quot;密码错误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pattern(regexp = &quot;1\\\\d&#123;10&#125;&quot;,message = &quot;手机号错误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Email(message = &quot;你输入的邮箱格式有误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNick</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nick;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNick</span><span class="params">(String nick)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.nick = nick;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;QQ [nick=&quot;</span> + nick + <span class="string">&quot;, passsword=&quot;</span> + password + <span class="string">&quot;, phone=&quot;</span> + phone + <span class="string">&quot;, email=&quot;</span> + email + <span class="string">&quot;, age=&quot;</span></span><br><span class="line">+ age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;register2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register1</span><span class="params">(<span class="meta">@Valid</span> QQ qqInfo,BindingResult errorResult)</span> &#123;<span class="comment">//必须BindingResult挨着实体类</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> errorResult.hasErrors();</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="comment">//数据有误</span></span><br><span class="line">List&lt;FieldError&gt; errorList = errorResult.getFieldErrors();</span><br><span class="line"><span class="keyword">for</span> (FieldError fieldError : errorList) &#123;</span><br><span class="line"><span class="comment">//获取实体类中的属性名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> fieldError.getField();</span><br><span class="line"><span class="comment">//当前数据不满足规则时，获取错误提示信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> fieldError.getDefaultMessage();</span><br><span class="line">System.out.println(fieldName+<span class="string">&quot;=&quot;</span>+errorMessage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;正确了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort() +request.getContextPath()+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;&lt;%=basePath %&gt;&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;注册QQ&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">        &lt;<span class="type">form</span> <span class="variable">action</span> <span class="operator">=</span> <span class="string">&quot;&lt;%=basePath %&gt;/register2.shtml&quot;</span> method = <span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;昵称&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;text&quot;</span> name = <span class="string">&quot;nick&quot;</span> pattern = <span class="string">&quot;[\u4e00-\u9fa5]&#123;4,10&#125;&quot;</span> required=<span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入4-10为汉字&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;密码&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span> name = <span class="string">&quot;password&quot;</span> patterm =<span class="string">&quot;\w&#123;3,6&#125;&quot;</span> required = <span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入3-6位数字、字母、下划线&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;手机号&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;text&quot;</span> name = <span class="string">&quot;phone&quot;</span> patterm =<span class="string">&quot;1\\d&#123;10&#125;&quot;</span> required = <span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入手机号&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;邮箱&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;email&quot;</span> name = <span class="string">&quot;email&quot;</span>  required = <span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入邮箱&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;text&quot;</span> name = <span class="string">&quot;age&quot;</span> patterm =<span class="string">&quot;[1-9]\d&#123;0,2&#125;&quot;</span> required = <span class="string">&quot;required&quot;</span> placeholder = <span class="string">&quot;请输入真实年龄&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;<span class="type">td</span> <span class="variable">colspan</span> <span class="operator">=</span> <span class="string">&quot;2&quot;</span>&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;submit&quot;</span> value = <span class="string">&quot;注册&quot;</span>&gt;&lt;<span class="type">input</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;reset&quot;</span> value = <span class="string">&quot;重置&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>@AssertTrue &#x2F;&#x2F;用于boolean字段，该字段只能为true<br>@AssertFalse&#x2F;&#x2F;该字段的值只能为false<br>@CreditCardNumber&#x2F;&#x2F;对信用卡号进行一个大致的验证<br>@DecimalMax&#x2F;&#x2F;只能小于或等于该值<br>@DecimalMin&#x2F;&#x2F;只能大于或等于该值<br>@Digits(integer&#x3D;2,fraction&#x3D;20)&#x2F;&#x2F;检查是否是一种数字的整数、分数,小数位数的数字。<br>@Email&#x2F;&#x2F;检查是否是一个有效的email地址<br>@Future&#x2F;&#x2F;检查该字段的日期是否是属于将来的日期<br>@Length(min&#x3D;,max&#x3D;)&#x2F;&#x2F;检查所属的字段的长度是否在min和max之间,只能用于字符串<br>@Max&#x2F;&#x2F;该字段的值只能小于或等于该值<br>@Min&#x2F;&#x2F;该字段的值只能大于或等于该值<br>@NotNull&#x2F;&#x2F;不能为null<br>@NotBlank&#x2F;&#x2F;不能为空，检查时会将空格忽略<br>@NotEmpty&#x2F;&#x2F;不能为空，这里的空是指空字符串<br>@Null&#x2F;&#x2F;检查该字段为空<br>@Past&#x2F;&#x2F;检查该字段的日期是在过去<br>@Size(min&#x3D;, max&#x3D;)&#x2F;&#x2F;检查该字段的size是否在min和max之间，可以是字符串、数组、集合、Map等<br>@URL(protocol&#x3D;,host,port)&#x2F;&#x2F;检查是否是一个有效的URL，如果提供了protocol，host等，则该URL还需满足提供的条件<br>@Valid&#x2F;&#x2F;该注解只要用于字段为一个包含其他对象的集合或map或数组的字段，或该字段直接为一个其他对象的引用，<br>        &#x2F;&#x2F;这样在检查当前对象的同时也会检查该字段所引用的对象</p></blockquote><h3 id="将其封装到类中"><a href="#将其封装到类中" class="headerlink" title="将其封装到类中"></a>将其封装到类中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验实体类中的属性是否正确</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> qqInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> errorResult</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> :如果返回值为null，则代表数据完全正确，如果不为null，则返回一个封装错误信息map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title function_">fieldValidate</span><span class="params">(BindingResult errorResult)</span> &#123;</span><br><span class="line">Map&lt;String,Object&gt; errorMap =<span class="literal">null</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> errorResult.hasErrors();</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">errorMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line"><span class="comment">//数据有误</span></span><br><span class="line">List&lt;FieldError&gt; errorList = errorResult.getFieldErrors();</span><br><span class="line"><span class="keyword">for</span> (FieldError fieldError : errorList) &#123;</span><br><span class="line"><span class="comment">//获取实体类中的属性名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> fieldError.getField();</span><br><span class="line"><span class="comment">//当前数据不满足规则时，获取错误提示信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> fieldError.getDefaultMessage();</span><br><span class="line">System.out.println(fieldName+<span class="string">&quot;=&quot;</span>+errorMessage);</span><br><span class="line">errorMap.put(errorMessage, errorList);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在controller中的调用"><a href="#在controller中的调用" class="headerlink" title="在controller中的调用"></a>在controller中的调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;register3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register3</span><span class="params">(<span class="meta">@Valid</span> QQ qqInfo,BindingResult errorResult,Model model)</span> &#123;</span><br><span class="line">Map&lt;String, Object&gt; resultMap = Validator.fieldValidate(errorResult);</span><br><span class="line"><span class="keyword">if</span> (resultMap == <span class="literal">null</span>) &#123;<span class="comment">//数据正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;register_success&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//数据错误</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;errorMessage&quot;</span>,resultMap);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="springMVC中的定时器"><a href="#springMVC中的定时器" class="headerlink" title="springMVC中的定时器"></a>springMVC中的定时器</h2><ol><li>导入jar包</li><li>编写springMVC.xml配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:task</span>=<span class="string">&quot;http://www.springframework.org/schema/task&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/task   </span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/task/spring-task-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定时器配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">&quot;scheduler&quot;</span> <span class="attr">pool-size</span>=<span class="string">&quot;10&quot;</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">&quot;executor&quot;</span> <span class="attr">keep-alive</span>=<span class="string">&quot;3600&quot;</span> <span class="attr">pool-size</span>=<span class="string">&quot;100-200&quot;</span> <span class="attr">queue-capacity</span>=<span class="string">&quot;500&quot;</span> <span class="attr">rejection-policy</span>=<span class="string">&quot;CALLER_RUNS&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">&quot;executor&quot;</span> <span class="attr">scheduler</span>=<span class="string">&quot;scheduler&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>书写定时任务（常见写法）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.java.tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Scheduled(fixedRate = 1000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Date</span> <span class="variable">cTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(cTime);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>书写定时任务（SpringMVC写法）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task1</span> &#123;</span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;0/2 20 10 * * ?&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Date</span> <span class="variable">cTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(cTime);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="404类报错跳转页面"><a href="#404类报错跳转页面" class="headerlink" title="404类报错跳转页面"></a>404类报错跳转页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置错误错误处理页面 --&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">&lt;!-- 错误处理代码 --&gt;</span><br><span class="line">&lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">&lt;!-- 错误跳转页面 --&gt;</span><br><span class="line">&lt;location&gt;/pages/error/404.jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><h4 id="数据存放到webcontent下与WEB-INF下的区别"><a href="#数据存放到webcontent下与WEB-INF下的区别" class="headerlink" title="数据存放到webcontent下与WEB-INF下的区别"></a>数据存放到webcontent下与WEB-INF下的区别</h4><blockquote><p>如果数据资源存放到webcontext下，是可以直接访问的。如果数据存放到WEB-INF下，是不能通过在浏览器中的输入url地址或者从定向访问，只能通过转发来访问</p></blockquote><h4 id="springMVC4-spring4-Mybatis整合步骤"><a href="#springMVC4-spring4-Mybatis整合步骤" class="headerlink" title="springMVC4+spring4+Mybatis整合步骤"></a>springMVC4+spring4+Mybatis整合步骤</h4><blockquote><p><code>applicationContext.xml</code> 和 <code>springmvc.xml</code> 都是 Spring 配置文件，但它们在功能和用途上有一些区别：</p><ol><li><p>applicationContext.xml：</p><ul><li>功能：<code>applicationContext.xml</code> 是 Spring 应用程序的核心配置文件，用于配置应用程序中的核心组件和 Bean 定义。它负责配置应用程序的业务逻辑、数据访问对象、服务层、数据源、事务管理等。</li><li>作用范围：<code>applicationContext.xml</code> 在整个 Spring 应用程序中具有全局作用，涵盖了应用程序的所有组件和模块。</li><li>命名空间：<code>applicationContext.xml</code> 声明了 Spring 核心的命名空间，如 <code>xmlns:beans</code> 和 <code>xmlns:context</code>。</li></ul></li><li><p>springmvc.xml：</p><ul><li>功能：<code>springmvc.xml</code> 是 Spring MVC 框架的配置文件，主要用于配置与 Web 层相关的组件和功能。它负责配置控制器、视图解析器、拦截器、文件上传配置、视图解析器等。</li><li>作用范围：<code>springmvc.xml</code> 仅在 Spring MVC 部分起作用，用于配置 Web 层组件，与控制器和视图相关。</li><li>命名空间：<code>springmvc.xml</code> 声明了 Spring MVC 的命名空间，如 <code>xmlns:mvc</code> 和 <code>xmlns:context</code>。</li></ul></li><li><p>文件位置：虽然 <code>applicationContext.xml</code> 和 <code>springmvc.xml</code> 是两个独立的配置文件，但在一个典型的 Spring MVC 应用中，它们通常都位于同一个配置目录下，例如 <code>/WEB-INF/</code> 或 <code>src/main/resources/</code> 目录。</p></li><li><p>载入关系：在典型的 Spring MVC 应用程序中，通常会在 <code>web.xml</code> 文件中使用 <code>ContextLoaderListener</code> 来加载 <code>applicationContext.xml</code>，而在 <code>DispatcherServlet</code> 的配置中使用 <code>ContextLoader</code> 或 <code>ContextLoaderServlet</code> 来加载 <code>springmvc.xml</code>。</p></li></ol><p>综上所述，<code>applicationContext.xml</code> 主要用于配置应用程序的核心组件和功能，包括业务逻辑、数据访问等，而 <code>springmvc.xml</code> 主要用于配置与 Web 层相关的组件和功能，包括控制器、视图解析器等。这两个配置文件在 Spring MVC 应用程序中协同工作，帮助构建一个完整的 Spring MVC 应用。</p></blockquote><ol><li><p>导入jar包50个（放到环境中的spring的lib下）</p></li><li><p>编写配置文件（模板）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/mvc </span><br><span class="line">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/context </span><br><span class="line">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/task   </span><br><span class="line">   http://www.springframework.org/schema/task/spring-task-4.2.xsd&quot;&gt;</span><br><span class="line">   </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot; </span><br><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">xsi:schemaLocation=&quot;</span><br><span class="line">       http://www.springframework.org/schema/beans </span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">       http://www.springframework.org/schema/context</span><br><span class="line">       http://www.springframework.org/schema/context/spring-context-4.2.xsd</span><br><span class="line">       http://www.springframework.org/schema/tx</span><br><span class="line">       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd&quot;&gt;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 配置数据源 --&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mydatabase&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;magichell&quot; /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写配置文件（初始配置）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/mvc </span><br><span class="line">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/context </span><br><span class="line">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/task   </span><br><span class="line">   http://www.springframework.org/schema/task/spring-task-4.2.xsd&quot;&gt;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&lt;!-- 配置包扫描 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;cn.java.controller.*,cn.java.service.impl,cn.java.service&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mvc注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 视图解析器 --&gt;</span><br><span class="line">&lt;bean id = &quot;internalResourceViewResolver&quot; class = &quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;!-- 配置前缀 --&gt;</span><br><span class="line">&lt;property name = &quot;prefix&quot; value = &quot;/pages/&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置后缀 --&gt;</span><br><span class="line">&lt;property name = &quot;suffix&quot; value = &quot;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 文件上传 --&gt;</span><br><span class="line">&lt;bean id = &quot;multipartResolver&quot; class = &quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot; &gt; </span><br><span class="line">&lt;!-- 配置默认编码 --&gt;</span><br><span class="line">&lt;property name = &quot;defaultEncoding&quot; value = &quot;utf-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置文件上传的大小 --&gt;</span><br><span class="line">&lt;property name = &quot;maxUploadSize&quot; value = &quot;1048576&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 数据校验 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 定时器 --&gt;</span><br><span class="line">&lt;task:scheduler id=&quot;scheduler&quot; pool-size=&quot;10&quot; /&gt;  </span><br><span class="line">&lt;task:executor id=&quot;executor&quot; keep-alive=&quot;3600&quot; pool-size=&quot;100-200&quot; queue-capacity=&quot;500&quot; rejection-policy=&quot;CALLER_RUNS&quot; /&gt; </span><br><span class="line">&lt;task:annotation-driven executor=&quot;executor&quot; scheduler=&quot;scheduler&quot; /&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">xsi:schemaLocation=&quot;</span><br><span class="line">       http://www.springframework.org/schema/beans </span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">       http://www.springframework.org/schema/context</span><br><span class="line">       http://www.springframework.org/schema/context/spring-context-4.2.xsd</span><br><span class="line">       http://www.springframework.org/schema/tx</span><br><span class="line">       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd&quot;&gt;</span><br><span class="line">       </span><br><span class="line">       &lt;!-- 配置数据源 --&gt;</span><br><span class="line">       &lt;bean id = &quot;basicDataSource&quot; class = &quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;</span><br><span class="line">       &lt;property name = &quot;driverClassName&quot; value = &quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name = &quot;url&quot; value = &quot;jdbc:mysql://localhost:3306/dt48&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name = &quot;username&quot; value = &quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name = &quot;password&quot; value = &quot;magichell&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;/bean&gt;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       &lt;!-- 配置扫描保存sql语句的局部文件xml文件 --&gt;</span><br><span class="line">       &lt;bean id = &quot;sqlSessionFactoryBean&quot; class = &quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">       &lt;!-- 配置数据源 --&gt;</span><br><span class="line">       &lt;property name=&quot;dataSource&quot; ref = &quot;basicDataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;!-- 指定局部xml文件的位置 --&gt;</span><br><span class="line">       &lt;property name=&quot;mapperLocations&quot; value = &quot;classpath:cn/java/mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;/bean&gt;</span><br><span class="line">       </span><br><span class="line">       &lt;!-- 扫描mapper接口类，并且将接口类与xml文件相关联 --&gt;</span><br><span class="line">       &lt;bean id = &quot;mapperScannerConfigurer&quot; class = &quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot; &gt;</span><br><span class="line">       &lt;!-- 指定mapper接口存放位置 --&gt;</span><br><span class="line">       &lt;property name=&quot;basePackage&quot; value = &quot;cn.java.mapper&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;4.0&quot;&gt;</span><br><span class="line">  &lt;display-name&gt;dt48_ssm&lt;/display-name&gt;</span><br><span class="line">  &lt;welcome-file-list&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">  &lt;/welcome-file-list&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 配置过滤器代码 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">  &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">  &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/filter-mapping&gt;</span><br><span class="line">  </span><br><span class="line">&lt;!-- 读取spring：applicationcontext.xml文件 --&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">  &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;listener&gt;</span><br><span class="line">  &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">  &lt;/listener&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 配置springmvc的核心类：DispatcherServlet --&gt;</span><br><span class="line">   &lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt; &lt;!-- 别名 --&gt;</span><br><span class="line">  &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- DispatcherServlet的地址 --&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">  &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;!-- Corrected the param-name to contextConfigLocation --&gt;</span><br><span class="line">  &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;*.shtml&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 400/500报错页面 --&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">  &lt;!-- 错误处理代码 --&gt;</span><br><span class="line">  &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">  &lt;!-- 错误跳转页面 --&gt;</span><br><span class="line">  &lt;location&gt;/index.jsp&lt;/location&gt;</span><br><span class="line">  &lt;/error-page&gt;</span><br><span class="line">  </span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">  &lt;!-- 错误处理代码 --&gt;</span><br><span class="line">  &lt;error-code&gt;500&lt;/error-code&gt;</span><br><span class="line">  &lt;!-- 错误跳转页面 --&gt;</span><br><span class="line">  &lt;location&gt;/index.jsp&lt;/location&gt;</span><br><span class="line">  &lt;/error-page&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h4 id="在springmvc中ExceptionHander的作用"><a href="#在springmvc中ExceptionHander的作用" class="headerlink" title="在springmvc中ExceptionHander的作用"></a>在springmvc中ExceptionHander的作用</h4><blockquote><p>在Spring框架中，ExceptionHandler是一个用于处理全局异常的机制。它的作用是捕获和处理在应用程序中发生的未处理异常，以便提供友好的错误信息或执行适当的操作。</p><p>当应用程序中发生异常时，Spring框架将会根据以下的处理流程来寻找并执行对应的异常处理器方法：</p><ol><li><p>应用程序代码抛出异常：当应用程序代码中的某个方法抛出了异常，该异常会开始向调用堆栈的上层传播，直到到达 Spring MVC 控制器或 Spring Boot 的 Web 控制器。</p></li><li><p>异常未被处理：如果异常在控制器中没有被合适地处理，它将被传递到全局异常处理器。</p></li><li><p>全局异常处理器处理异常：全局异常处理器是一个带有<code>@ExceptionHandler</code>注解的方法，用于处理指定类型的异常。这些方法通常位于一个专门的类中，可以是一个@ControllerAdvice类或一个@RestControllerAdvice类。通过这些注解，Spring会自动将这些方法与异常类型进行关联。</p></li><li><p>返回错误响应或执行其他操作：在全局异常处理器中，你可以根据实际需求来编写处理异常的逻辑，例如返回一个自定义的错误响应、记录异常日志、发送电子邮件通知等。</p></li></ol><p>使用ExceptionHandler的好处在于将异常处理逻辑集中在一个地方，使得代码更加模块化和易于维护。此外，全局异常处理器还可以提供更好的用户体验，因为用户将会看到友好的错误信息而不是看到原始的异常堆栈信息。</p><p>以下是一个简单的使用@ControllerAdvice的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建自定义的ErrorResponse对象，并返回合适的HTTP状态码</span></span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">errorResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(HttpStatus.INTERNAL_SERVER_ERROR.value(), <span class="string">&quot;Something went wrong&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述例子中，如果任何未处理的异常被抛出，它都将被GlobalExceptionHandler中的handleException方法捕获，并返回一个带有错误信息的ErrorResponse对象和500状态码（服务器内部错误）。当然，你可以根据实际需求来定义更多的异常处理器方法来处理不同类型的异常。</p></blockquote><h4 id="在spring中transactional的作用"><a href="#在spring中transactional的作用" class="headerlink" title="在spring中transactional的作用"></a>在spring中transactional的作用</h4><blockquote><p>在Spring框架中，<code>@Transactional</code>是一个用于管理事务的注解。它可以应用在方法级别或类级别，用于声明一个方法或一个类中的所有方法应该在一个事务中运行。事务是一组数据库操作，要么全部成功执行，要么全部回滚（撤销）到初始状态，以确保数据的一致性和完整性。</p><p><code>@Transactional</code>注解的主要用途是简化事务的管理，将事务的配置从代码中分离出来，使得事务管理变得更加容易和灵活。在使用<code>@Transactional</code>注解时，Spring会自动为被注解的方法启动一个数据库事务，并在方法执行完成后根据方法的执行情况决定是否提交事务或回滚事务。</p><p><code>@Transactional</code>注解可以用于以下场景：</p><ol><li><p><strong>管理数据库事务：</strong> 当方法涉及到对数据库的修改操作（如插入、更新、删除）时，使用<code>@Transactional</code>可以确保这些操作在一个事务中进行，要么全部成功提交，要么全部回滚，避免数据不一致的问题。</p></li><li><p><strong>事务的传播行为：</strong> <code>@Transactional</code>注解允许你指定事务的传播行为，即当一个事务方法调用另一个事务方法时，如何处理事务。常用的传播行为包括REQUIRED（如果当前没有事务，就创建一个新的事务；如果当前存在事务，就加入到当前事务中）、REQUIRES_NEW（创建一个新的事务，如果当前存在事务，就挂起当前事务）等。</p></li><li><p><strong>事务的隔离级别：</strong> 你可以使用<code>@Transactional</code>注解设置事务的隔离级别，即多个事务之间相互隔离的程度。常用的隔离级别有READ_COMMITTED（读已提交，避免脏读）、REPEATABLE_READ（可重复读，避免脏读和不可重复读）、SERIALIZABLE（串行化，最高隔离级别）等。</p></li><li><p><strong>异常处理：</strong> <code>@Transactional</code>还允许你指定在遇到哪些异常时回滚事务，这样可以确保在某些特定的异常情况下数据回滚到正确的状态。</p></li></ol><p>下面是一个简单的使用<code>@Transactional</code>注解的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductRepository productRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateProductStock</span><span class="params">(<span class="type">long</span> productId, <span class="type">int</span> newStock)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productRepository.findById(productId);</span><br><span class="line">        product.setStock(newStock);</span><br><span class="line">        productRepository.save(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述例子中，<code>updateProductStock</code>方法被<code>@Transactional</code>注解修饰，表示该方法在一个事务中运行。如果在执行<code>productRepository.save(product)</code>时出现了异常，整个方法的操作会回滚，保证了数据的一致性。</p><p>需要注意的是，<code>@Transactional</code>注解的生效需要依赖于Spring的事务管理配置，通常需要在Spring配置文件中配置事务管理器。同时，该注解只能应用于公共的非静态方法上。</p></blockquote><h2 id="spy-properties"><a href="#spy-properties" class="headerlink" title="spy.properties"></a>spy.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># #%L</span></span><br><span class="line"><span class="comment"># P6Spy</span></span><br><span class="line"><span class="comment"># %%</span></span><br><span class="line"><span class="comment"># Copyright (C) 2013 P6Spy</span></span><br><span class="line"><span class="comment"># %%</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment"># #L%</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># P6Spy Options File                                            #</span></span><br><span class="line"><span class="comment"># See documentation for detailed instructions                   #</span></span><br><span class="line"><span class="comment"># http://p6spy.github.io/p6spy/2.0/configandusage.html          #</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># MODULES                                                       #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># Module list adapts the modular functionality of P6Spy.#</span></span><br><span class="line"><span class="comment"># Only modules listed are active.        #</span></span><br><span class="line"><span class="comment"># (default is com.p6spy.engine.logging.P6LogFactory and         #</span></span><br><span class="line"><span class="comment"># com.p6spy.engine.spy.P6SpyFactory)                            #</span></span><br><span class="line"><span class="comment"># Please note that the core module (P6SpyFactory) can&#x27;t be# </span></span><br><span class="line"><span class="comment"># deactivated. #</span></span><br><span class="line"><span class="comment"># Unlike the other properties, activation of the changes on     #</span></span><br><span class="line"><span class="comment"># this one requires reload.#</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment">#modulelist=com.p6spy.engine.spy.P6SpyFactory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment"># CORE (P6SPY) PROPERTIES                                      #</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># A comma separated list of JDBC drivers to load and register.</span></span><br><span class="line"><span class="comment"># (default is empty)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> This is normally only needed when using P6Spy in an</span></span><br><span class="line"><span class="comment"># application server environment with a JNDI data source or when</span></span><br><span class="line"><span class="comment"># using a JDBC driver that does not implement the JDBC 4.0 API</span></span><br><span class="line"><span class="comment"># (specifically automatic registration).</span></span><br><span class="line"><span class="attr">driverlist</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># for flushing per statement</span></span><br><span class="line"><span class="comment"># (default is false)</span></span><br><span class="line"><span class="attr">autoflush</span> = <span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># sets the date format using Java&#x27;s SimpleDateFormat routine. </span></span><br><span class="line"><span class="comment"># In case property is not set, miliseconds since 1.1.1970 (unix time) is used (default is empty)</span></span><br><span class="line"><span class="comment">#dateformat=</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># prints a stack trace for every statement logged</span></span><br><span class="line"><span class="comment">#stacktrace=false</span></span><br><span class="line"><span class="comment"># if stacktrace=true, specifies the stack trace to print</span></span><br><span class="line"><span class="comment">#stacktraceclass=</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># determines if property file should be reloaded</span></span><br><span class="line"><span class="comment"># Please note: reload means forgetting all the previously set</span></span><br><span class="line"><span class="comment"># settings (even those set during runtime - via JMX)</span></span><br><span class="line"><span class="comment"># and starting with the clean table </span></span><br><span class="line"><span class="comment"># (default is false)</span></span><br><span class="line"><span class="comment">#reloadproperties=false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># determines how often should be reloaded in seconds</span></span><br><span class="line"><span class="comment"># (default is 60)</span></span><br><span class="line"><span class="comment">#reloadpropertiesinterval=60</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># specifies the appender to use for logging</span></span><br><span class="line"><span class="comment"># Please note: reload means forgetting all the previously set</span></span><br><span class="line"><span class="comment"># settings (even those set during runtime - via JMX)</span></span><br><span class="line"><span class="comment"># and starting with the clean table </span></span><br><span class="line"><span class="comment"># (only the properties read from the configuration file)</span></span><br><span class="line"><span class="comment"># (default is com.p6spy.engine.spy.appender.FileLogger)</span></span><br><span class="line"><span class="comment">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class="line"><span class="attr">appender</span>=<span class="string">com.p6spy.engine.spy.appender.StdoutLogger</span></span><br><span class="line"><span class="comment">#appender=com.p6spy.engine.spy.appender.FileLogger</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># name of logfile to use, note Windows users should make sure to use forward slashes in their pathname (e:/test/spy.log) </span></span><br><span class="line"><span class="comment"># (used for com.p6spy.engine.spy.appender.FileLogger only)</span></span><br><span class="line"><span class="comment"># (default is spy.log)</span></span><br><span class="line"><span class="comment">#logfile = spy.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># append to the p6spy log file. if this is set to false the</span></span><br><span class="line"><span class="comment"># log file is truncated every time. (file logger only)</span></span><br><span class="line"><span class="comment"># (default is true)</span></span><br><span class="line"><span class="comment">#append=true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># class to use for formatting log messages (default is: com.p6spy.engine.spy.appender.SingleLineFormat)</span></span><br><span class="line"><span class="comment">#logMessageFormat=com.p6spy.engine.spy.appender.SingleLineFormat</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># format that is used for logging of the date/time/... (has to be compatible with java.text.SimpleDateFormat)</span></span><br><span class="line"><span class="comment"># (default is dd-MMM-yy)</span></span><br><span class="line"><span class="comment">#databaseDialectDateFormat=dd-MMM-yy</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># whether to expose options via JMX or not</span></span><br><span class="line"><span class="comment"># (default is true)</span></span><br><span class="line"><span class="comment">#jmx=true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># if exposing options via jmx (see option: jmx), what should be the prefix used?</span></span><br><span class="line"><span class="comment"># jmx naming pattern constructed is: com.p6spy(.&lt;jmxPrefix&gt;)?:name=&lt;optionsClassName&gt;</span></span><br><span class="line"><span class="comment"># please note, if there is already such a name in use it would be unregistered first (the last registered wins)</span></span><br><span class="line"><span class="comment"># (default is none)</span></span><br><span class="line"><span class="comment">#jmxPrefix=</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># DataSource replacement                                        #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># Replace the real DataSource class in your application server  #</span></span><br><span class="line"><span class="comment"># configuration with the name com.p6spy.engine.spy.P6DataSource #</span></span><br><span class="line"><span class="comment"># (that provides also connection pooling and xa support).       #</span></span><br><span class="line"><span class="comment"># then add the JNDI name and class name of the real             #</span></span><br><span class="line"><span class="comment"># DataSource here                                               #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># Values set in this item cannot be reloaded using the          #</span></span><br><span class="line"><span class="comment"># reloadproperties variable. Once it is loaded, it remains      #</span></span><br><span class="line"><span class="comment"># in memory until the application is restarted.                 #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment">#realdatasource=/RealMySqlDS</span></span><br><span class="line"><span class="comment">#realdatasourceclass=com.mysql.jdbc.jdbc2.optional.MysqlDataSource</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># DataSource properties                                         #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># If you are using the DataSource support to intercept calls    #</span></span><br><span class="line"><span class="comment"># to a DataSource that requires properties for proper setup,    #</span></span><br><span class="line"><span class="comment"># define those properties here. Use name value pairs, separate  #</span></span><br><span class="line"><span class="comment"># the name and value with a semicolon, and separate the         #</span></span><br><span class="line"><span class="comment"># pairs with commas.                                            #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># The example shown here is for mysql                           #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment">#realdatasourceproperties=port;3306,serverName;myhost,databaseName;jbossdb,foo;bar</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># JNDI DataSource lookup                                        #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># If you are using the DataSource support outside of an app     #</span></span><br><span class="line"><span class="comment"># server, you will probably need to define the JNDI Context     #</span></span><br><span class="line"><span class="comment"># environment.                                                  #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># If the P6Spy code will be executing inside an app server then #</span></span><br><span class="line"><span class="comment"># do not use these properties, and the DataSource lookup will   #</span></span><br><span class="line"><span class="comment"># use the naming context defined by the app server.             #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># The two standard elements of the naming environment are       #</span></span><br><span class="line"><span class="comment"># jndicontextfactory and jndicontextproviderurl. If you need    #</span></span><br><span class="line"><span class="comment"># additional elements, use the jndicontextcustom property.      #</span></span><br><span class="line"><span class="comment"># You can define multiple properties in jndicontextcustom,      #</span></span><br><span class="line"><span class="comment"># in name value pairs. Separate the name and value with a       #</span></span><br><span class="line"><span class="comment"># semicolon, and separate the pairs with commas.                #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># The example shown here is for a standalone program running on #</span></span><br><span class="line"><span class="comment"># a machine that is also running JBoss, so the JDNI context     #</span></span><br><span class="line"><span class="comment"># is configured for JBoss (3.0.4).                              #</span></span><br><span class="line"><span class="comment">#                                                               #</span></span><br><span class="line"><span class="comment"># (by default all these are empty)                              #</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment">#jndicontextfactory=org.jnp.interfaces.NamingContextFactory</span></span><br><span class="line"><span class="comment">#jndicontextproviderurl=localhost:1099</span></span><br><span class="line"><span class="comment">#jndicontextcustom=java.naming.factory.url.pkgs;org.jboss.nameing:org.jnp.interfaces</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#jndicontextfactory=com.ibm.websphere.naming.WsnInitialContextFactory</span></span><br><span class="line"><span class="comment">#jndicontextproviderurl=iiop://localhost:900</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment"># P6 LOGGING SPECIFIC PROPERTIES                               #</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># filter what is logged</span></span><br><span class="line"><span class="comment"># please note this is a precondition for usage of: include/exclude/sqlexpression</span></span><br><span class="line"><span class="comment"># (default is false)</span></span><br><span class="line"><span class="comment">#filter=false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># comma separated list of strings to include</span></span><br><span class="line"><span class="comment"># please note that special characters escaping (used in java) has to be done for the provided regular expression</span></span><br><span class="line"><span class="comment"># (default is empty)</span></span><br><span class="line"><span class="comment">#include =</span></span><br><span class="line"><span class="comment"># comma separated list of strings to exclude</span></span><br><span class="line"><span class="comment"># (default is empty)</span></span><br><span class="line"><span class="comment">#exclude =</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># sql expression to evaluate if using regex</span></span><br><span class="line"><span class="comment"># please note that special characters escaping (used in java) has to be done for the provided regular expression</span></span><br><span class="line"><span class="comment"># (default is empty)</span></span><br><span class="line"><span class="comment">#sqlexpression = </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#list of categories to exclude: error, info, batch, debug, statement,</span></span><br><span class="line"><span class="comment">#commit, rollback and result are valid values</span></span><br><span class="line"><span class="comment"># (default is info,debug,result,resultset,batch)</span></span><br><span class="line"><span class="comment">#excludecategories=info,debug,result,resultset,batch</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Execution threshold applies to the standard logging of P6Spy.       </span></span><br><span class="line"><span class="comment"># While the standard logging logs out every statement          </span></span><br><span class="line"><span class="comment"># regardless of its execution time, this feature puts a time   </span></span><br><span class="line"><span class="comment"># condition on that logging. Only statements that have taken   </span></span><br><span class="line"><span class="comment"># longer than the time specified (in milliseconds) will be     </span></span><br><span class="line"><span class="comment"># logged. This way it is possible to see only statements that  </span></span><br><span class="line"><span class="comment"># have exceeded some high water mark.                          </span></span><br><span class="line"><span class="comment"># This time is reloadable.                                     </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># executionThreshold=integer time (milliseconds)</span></span><br><span class="line"><span class="comment"># (default is 0)</span></span><br><span class="line"><span class="comment">#executionThreshold=</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment"># P6 OUTAGE SPECIFIC PROPERTIES                                #</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment"># Outage Detection</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This feature detects long-running statements that may be indicative of</span></span><br><span class="line"><span class="comment"># a database outage problem. If this feature is turned on, it will log any</span></span><br><span class="line"><span class="comment"># statement that surpasses the configurable time boundary during its execution.</span></span><br><span class="line"><span class="comment"># When this feature is enabled, no other statements are logged except the long</span></span><br><span class="line"><span class="comment"># running statements. The interval property is the boundary time set in seconds.</span></span><br><span class="line"><span class="comment"># For example, if this is set to 2, then any statement requiring at least 2</span></span><br><span class="line"><span class="comment"># seconds will be logged. Note that the same statement will continue to be logged</span></span><br><span class="line"><span class="comment"># for as long as it executes. So if the interval is set to 2, and the query takes</span></span><br><span class="line"><span class="comment"># 11 seconds, it will be logged 5 times (at the 2, 4, 6, 8, 10 second intervals).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># outagedetection=true|false</span></span><br><span class="line"><span class="comment"># outagedetectioninterval=integer time (seconds)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># (default is false)</span></span><br><span class="line"><span class="comment">#outagedetection=false</span></span><br><span class="line"><span class="comment"># (default is 60)</span></span><br><span class="line"><span class="comment">#outagedetectioninterval=30</span></span><br></pre></td></tr></table></figure><h2 id="database-properties"><a href="#database-properties" class="headerlink" title="database.properties"></a>database.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Mysql</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/dt48</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">magichell</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##p6spy</span></span><br><span class="line"><span class="comment">#driver=com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line"><span class="comment">#url=jdbc:p6spy:mysql://localhost:3306/dt48</span></span><br><span class="line"><span class="comment">#username=root</span></span><br><span class="line"><span class="comment">#password=magichell</span></span><br></pre></td></tr></table></figure><h3 id="springmvc之拦截器"><a href="#springmvc之拦截器" class="headerlink" title="springmvc之拦截器"></a>springmvc之拦截器</h3><p>在springmvc.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;oneInterceptor&quot;</span> <span class="attr">class</span> = <span class="string">&quot;cn.java.interceptors.OneInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截器代码</span></span><br><span class="line"><span class="keyword">package</span> cn.java.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;OneInterceptor&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON请求与响应"><a href="#JSON请求与响应" class="headerlink" title="JSON请求与响应"></a>JSON请求与响应</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$.fn.serializeObject = function()    </span><br><span class="line">&#123;    </span><br><span class="line">   <span class="type">var</span> <span class="variable">o</span> <span class="operator">=</span> &#123;&#125;;    </span><br><span class="line">   <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> <span class="built_in">this</span>.serializeArray();    </span><br><span class="line">   $.each(a, function() &#123;    </span><br><span class="line">       <span class="keyword">if</span> (o[<span class="built_in">this</span>.name]) &#123;    </span><br><span class="line">           <span class="keyword">if</span> (!o[<span class="built_in">this</span>.name].push) &#123;    </span><br><span class="line">               o[<span class="built_in">this</span>.name] = [o[<span class="built_in">this</span>.name]];    </span><br><span class="line">           &#125;    </span><br><span class="line">           o[<span class="built_in">this</span>.name].push(<span class="built_in">this</span>.value || <span class="string">&#x27;&#x27;</span>);    </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">           o[<span class="built_in">this</span>.name] = <span class="built_in">this</span>.value || <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">       &#125;    </span><br><span class="line">   &#125;);    </span><br><span class="line">   <span class="keyword">return</span> o;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;input[type=submit]&quot;</span>).click(function()&#123;</span><br><span class="line"><span class="comment">/* var data = $(&quot;#form1&quot;).serializeArray(); //自动将form表单封装成json  </span></span><br><span class="line"><span class="comment">        alert(JSON.stringify(data)); */</span>  </span><br><span class="line">        <span class="type">var</span> <span class="variable">jsonuserinfo</span> <span class="operator">=</span> $(<span class="string">&#x27;#form1&#x27;</span>).serializeObject();  </span><br><span class="line">        <span class="type">var</span> <span class="variable">jsonData</span> <span class="operator">=</span> JSON.stringify(jsonuserinfo);</span><br><span class="line">        <span class="comment">//alert(jsonData);</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">        url:<span class="string">&#x27;&lt;%=basePath %&gt;/formToJson.shtml&#x27;</span>,</span><br><span class="line">        type:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        dataType:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        contentType: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        data:jsonData,</span><br><span class="line">        success:function(result)&#123;</span><br><span class="line">        alert(result);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取register.jsp页面传递过来的json数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;getJson&quot;)</span></span><br><span class="line"><span class="comment">// public boolean getJson(@RequestBody Map&lt;String, Object&gt; jsonMap) &#123;</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="type">boolean</span> <span class="title function_">getJson</span><span class="params">(<span class="meta">@RequestBody</span> QQ jsonMap)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;getJson=&quot;</span> + jsonMap);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!-- JavaEE --&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">                &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">                &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!-- Spring --&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!-- mybatis --&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.4.5&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!-- Mysql --&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;8.0.32&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.1.6&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!-- 工具 --&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.2.47&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.9.4&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring Family Base </category>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
